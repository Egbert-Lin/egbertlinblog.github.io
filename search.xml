<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[LeetCode Road] Add Binary</title>
    <url>/posts/e6133085/</url>
    <content><![CDATA[<h1 id="67-Add-Binary"><a href="#67-Add-Binary" class="headerlink" title="67. Add Binary"></a><center>67. Add Binary</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given two binary strings <span style="background-color:#F0F0F0"><font color=#808080>a</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>b</font></span>, return <em>their sum as a binary string</em>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> a = "11", b = "1"<br><b>Output:</b> "100"<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> a = "1010", b = "1011"<br><b>Output:</b> "10101"<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= a.length, b.length &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>a</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>b</font></span> consist only of <span style="background-color:#F0F0F0"><font color=#808080>‘0’</font></span> or <span style="background-color:#F0F0F0"><font color=#808080>‘1’</font></span> characters.</li></strong><br><strong><li>Each string does not contain leading zeros except for the zero itself.</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a><u>Version</u></h2><p>Idea:<br>I want to post my method originally, but the method is very inefficient (add two elements of string as <a href="https://egbert-yu-ting.github.io/posts/acf6f11e/">Plus One</a>, do the same thing for each bits.)<br>So, I refered to <a href="https://zxi.mytechroad.com/blog/math/leetcode-67-add-binary/">Huahua’s Tech Road</a>. Wow, it’s a concise approach and coding, use only 1 while() to process.<br>This part, we can learn how to convert char to integer、how to convert integer to char、calculate a value of carry and output in reverse.<br>At 9 line, use <code>conditional ? Ture:False</code> to implement summation can save many if statements.<br>At 12 line, it is a right shift operator. </p>
<p style="background-color:#F0F0F0">
int a[i] = 1; // binary: 00000001<br>
int b[j] = 1; // binary: 00000001<br>
int sum = a[i] + b[j] = 2 // binary: 00000010<br>
int carry = sum >> 1; // binary: 00000001 (right shifts the bits of the number accordingly)</p>
Then, ues <span style="background-color:#F0F0F0">- '0'</span> to convert char to int as <span style="background-color:#F0F0F0">a[i--] - '0'</span>, because character <span style="background-color:#F0F0F0">'0'</span> means 48.<br>
At 15 line, we use logical AND <span style="background-color:#F0F0F0"><font color=#808080>&</font></span> to get the result of 0 or 1.
<p style="background-color:#F0F0F0">
if sum = 0 // binary: 00000000<br>
&emsp;(sum & 1) = 0<br>
if sum = 2 // binary: 00000010<br>
&emsp;(sum & 1) = 1<br>
if sum = 3 // binary: 00000011<br>
&emsp;(sum & 1) = 1</p>
Then, we can use <span style="background-color:#F0F0F0">+ '0'</span> to convert int to char.<br>
Finally, the variable of res is our answer, but the content is in reverse, so we need to output the last as head, <b>rbegin()</b> and <b>rend()</b> are built-in functions in C++ STL. rbegin() can return a reverse iterator pointing to the last char. rend() can return a reverse iterator pointing to the theoretical element preceding the first char of the string.

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = b.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = (i &gt;= <span class="number">0</span> ? a[i--] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>) +</span><br><span class="line">                      (j &gt;= <span class="number">0</span> ? b[j--] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>) +</span><br><span class="line">                      carry;</span><br><span class="line">            carry = sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            res += <span class="string">&#x27;0&#x27;</span> + (sum &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry) res += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;(res.rbegin()), (res.rend())&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Logical_Operators</tag>
        <tag>Shift_Operators</tag>
        <tag>ASCII</tag>
        <tag>Reverse_iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Binary Tree Level Order Traversal II</title>
    <url>/posts/cac8b982/</url>
    <content><![CDATA[<h1 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a><center>107. Binary Tree Level Order Traversal II</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>For example:<br>Given binary tree <span style="background-color:#F0F0F0"><font color=#808080>[3,9,20,null,null,15,7]<span style="background-color:#F0F0F0"><font color=#808080>,</p>
<p style="background-color:#F0F0F0">
&emsp;&emsp;&emsp;3<br>
&emsp;&emsp;&ensp;/&ensp;\<br>
&emsp;&emsp;9&emsp;20<br>
&emsp;&emsp;&emsp;/&emsp;\<br>
&emsp;&emsp;&ensp;15&emsp;&ensp;7</p>
return its bottom-up level order traversal as:
<p style="background-color:#F0F0F0">
[<br>
&emsp;&emsp;[15,7],<br>
&emsp;&emsp;[9,20],<br>
&emsp;&emsp;[3]<br>
]</p>

<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>I made a big mistake, I always think the solution that find the deepest depth first, the go back to the root with each layers. I realized an efficient approach until I had refered to <a href="https://zxi.mytechroad.com/blog/tree/leetcode-107-binary-tree-level-order-traversal-ii/">Huahua’s Tech Road</a>.<br>You must understand how to implement a two dimensional vector first. Write a function as recursion, store each elements from top of tree. <code>res.size() &lt;= depth&gt;</code> is an important statement to expand 2D vector size. Then, we must go through every left &amp; right nodes and store it based on correspondingly depth.<br>Finaly, let go back to original function, we must use reverse() to pass the answers.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</span><br><span class="line">        levelOrderBottom(root, <span class="number">0</span>, res);</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(res.size() &lt;= depth) res.push_back(&#123;&#125;);</span><br><span class="line">        res[depth].push_back(root-&gt;val);</span><br><span class="line">        levelOrderBottom(root-&gt;left, depth + <span class="number">1</span>, res);</span><br><span class="line">        levelOrderBottom(root-&gt;right, depth + <span class="number">1</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>2D_Vector</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Climbing Stairs</title>
    <url>/posts/7af6a106/</url>
    <content><![CDATA[<h1 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70. Climbing Stairs"></a><center>70. Climbing Stairs</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>You are climbing a staircase. It takes <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> steps to reach the top.</p>
<p>Each time you can either climb <span style="background-color:#F0F0F0"><font color=#808080>1</font></span> or <span style="background-color:#F0F0F0"><font color=#808080>2</font></span> steps. In how many distinct ways can you climb to the top?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> n = 2<br>
<b>Output:</b> 2<br>
<b>Explanation:</b> There are two ways to climb to the top.<br>
&#49;. 1 step + 1 step<br>
&#50;. 2 steps<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> n = 3<br>
<b>Output:</b> 3<br>
<b>Explanation:</b> There are three ways to climb to the top.<br>
&#49;. 1 step + 1 step + 1 step<br>
&#50;. 1 step + 2 steps<br>
&#51;. 2 steps + 1 step<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 45</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>We must find the reqular pattern. As example mentioned, n = 2 -&gt; output: 2, n = 3 -&gt; output: 3.<br>You can derive n = 4, n = 5, …ect. My answer is as below and you can get the reqular result:<br>n = 4 -&gt; Output: 5  // 2 + 3<br>n = 5 -&gt; Output: 8  // 3 + 5<br>n = 6 -&gt; Output: 13 // 5 + 8<br>n = 7 -&gt; Output: 21 // 8 + 13<br>(Results: 1 2 3 5 8 13 21 …)<br>Isn’t it like classical problem of <strong>Fibonacci Sequence</strong>? So, I directly think recursion can solve it. The approach is as below, but the recursion can’t pass the submission, because it will show <u>Time Limit Exceeded</u> when n = 44.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h2><p>Idea:<br>The strategy of second approach is an iterator. We can use for loop instead of recursion. Very simple coding as below and it can pass the submission.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> next = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">            result = prev + next;</span><br><span class="line">            prev = next;</span><br><span class="line">            next = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Fibonacci_Sequence</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Convert Sorted Array to Binary Search Tree</title>
    <url>/posts/17bf1818/</url>
    <content><![CDATA[<h1 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><center>108. Convert Sorted Array to Binary Search Tree</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0">
Given the sorted array: [-10,-3,0,5,9],<br>
<br>
One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:<br>
&emsp;&emsp;&emsp;&ensp;0<br>
&emsp;&emsp;&emsp;/&ensp;\<br>
&emsp;&emsp;-3&emsp;&ensp;9<br>
&emsp;&emsp;/&emsp;&ensp;/<br>
&emsp;-10&emsp;5</p>

<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>At first, let we understand “What is Height Balanced Binary Search Tree(BST)”.<br>You inquire/insert/delete a node of the tree, the time of these actions is proportional to height of the tree. It must keeps its height in the face of arbitrary item (actions), it’s call a height balane (or self balancing) BST.<br>Back to this problem, the strategy is “Binary Search”. At 22 line, the recursive function always satisfy the establishment of the left nodes. On the contrary, it always satisfy the establishment of hte right nodes at 23 line. Using the binary search will through every nodes and get a sequential array.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sortedArrayToBST(nums, <span class="number">0</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">        TreeNode* res = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        res-&gt;left = sortedArrayToBST(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        res-&gt;right = sortedArrayToBST(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Each steps info.:</p>
<p style="background-color:#F0F0F0">
left:0, right:4, mid's value:0<br>
left:0, right:1, mid's value:-10<br>
left:0, right:-1, return NULL<br>
left:1, right:1, mid's value:-3<br>
left:1, right:0, return NULL<br>
left:2, right:1, return NULL<br>
left:3, right:4, mid's value:5<br>
left:3, right:2, return NULL<br>
left:4, right:4, mid's value:9<br>
left:4, right:3, return NULL<br>
left:5, right:4, return NULL<br>
<p style="background-color:#F0F0F0">]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>TreeNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Count and Say</title>
    <url>/posts/e0d9ee0a/</url>
    <content><![CDATA[<h1 id="38-Count-and-Say"><a href="#38-Count-and-Say" class="headerlink" title="38. Count and Say"></a><center>38. Count and Say</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:<br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>countAndSay(1) = “1”</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>countAndSay(n)</font></span> is the way you would “say” the digit string from <span style="background-color:#F0F0F0"><font color=#808080>countAndSay(n-1)</font></span>, which is then converted into a different digit string.</li></strong><br>To determine how you “say” a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.</p>
<p>For example, the saying and conversion for digit string “3322251”:<br><img src="38_example.png" alt="">Given a positive integer <span style="background-color:#F0F0F0"><font color=#808080>n</font></span>, return <em>the</em> <span style="background-color:#F0F0F0"><font color=#808080>n^th</font></span> <em>term of the count-and-say sequence</em>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> n = 1<br><b>Output:</b> "1"<br><b>Explanation:</b> This is the base case.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> n = 4<br>
<b>Output:</b> "1211"<br><b>Explanation:</b><br>countAndSay(1) = "1"<br>countAndSay(2) = say "1" = one 1 = "11"<br>countAndSay(3) = say "11" = two 1's = "21"<br>countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 30</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a><u>Version</u></h2><p>Idea:<br>It is a sticky problem for me, my methods always got Time Limit Exceeded. I had no choice but to refer to <a href="https://zxi.mytechroad.com/blog/simulation/leetcode-38-count-and-say/">Huahua’s Tech Road</a>.<br>Declare a string consists 1 character, if n = 1, return a string.<br><code>record</code> as a index, it starts from 0. We must check <code>res[record] != res[j]</code>, use <code>j - count</code> we can get number of the same characters. Finally, use temporary string to store the results.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> record = <span class="number">0</span>, len = res.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res[record] != res[j] || j == len)&#123;</span><br><span class="line">                    <span class="keyword">int</span> count = j - record;</span><br><span class="line">                    temp += <span class="string">&#x27;0&#x27;</span> + count;</span><br><span class="line">                    temp += res[record];</span><br><span class="line">                    record = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Error message: Please tell me who you are. Run git config --global...</title>
    <url>/posts/278f103a/</url>
    <content><![CDATA[<h1 id="Command-line-“hexo-d”-and-you-got-error-message-Please-tell-me-who-you-are"><a href="#Command-line-“hexo-d”-and-you-got-error-message-Please-tell-me-who-you-are" class="headerlink" title="Command line: “hexo d” and you got error message: Please tell me who you are."></a>Command line: “hexo d” and you got error message: Please tell me who you are.</h1><h2 id="Full-error-message-info"><a href="#Full-error-message-info" class="headerlink" title="Full error message info:"></a>Full error message info:</h2><p><font color=#FF0000>Please tell me who you are.</p>
<p>Run</p>
<p>git config –global user.email “you&#64;example.com”<br>git config –global user.name “Your Name”</p>
<p>to set your account’s default identity.<br>Omit –global to set the identity only in this repository.</p>
<p>fatal: unable to auto-detect email address (got …)<br>error: src refspec HEAD does not match any.<br>error: failed to push some refs to(your …github.io)</font></p>
<hr>
<p>When I ran “hexo d” command, the deployment was stuck!<br>The reason was I updated my mac OS a few days age.<br>Now, the system can’t distinguish your indentity.</p>
<p>So, the solution can solve it:</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>Input commands:</p>
<p>1) git config –global user.email “email”<br>   //Your github email address(https:&#47;&#47;username.github.io)</p>
<p>2) git config –global user.name “username”<br>   //(your nickname、github’s username or anyone you name it) only English! </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Interview programming question - Find second largest element</title>
    <url>/posts/16153cc7/</url>
    <content><![CDATA[<h1 id="Let-coding-interview-become-easy-Find-second-largest-element"><a href="#Let-coding-interview-become-easy-Find-second-largest-element" class="headerlink" title="Let coding interview become easy - Find second largest element"></a><center>Let coding interview become easy - Find second largest element</center></h1><p>Maybe you will face it problem when you have an interview for a job with Tech. company.<br>The problem is “How to find second largest element?”, it seems very easy to get result, but you must propose an efficient approach.<br>If there is a vector that consists <code>&#123;2, 3, 4, 1, 7, 6, 5&#125;</code>, I delcare two variables as first largest element and second largest element. I initialize variables to INT_MIN. At 13 lines, <code>if(input[i]&gt;first)</code> is true, <code>input[i]</code> is largest element and pass it to <code>first</code> after storing a value of <code>first</code> by <code>second</code>. Otherwise, compare <code>input[i]</code> with <code>second</code>, it checks a current value whether it bigger than <code>second</code> or not.</p>
<p>Source code as below:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt; findLargest(vector&lt;int&gt; input)&#123;</span><br><span class="line">    <span class="keyword">int</span> first = INT_MIN;</span><br><span class="line">    <span class="keyword">int</span> second = INT_MIN;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(input[i]&gt;first)&#123;</span><br><span class="line">            second = first;</span><br><span class="line">            first = input[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(input[i] &gt; second)&#123;</span><br><span class="line">            second = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(first, second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = findLargest(arr);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The first largest element=&quot;</span> &lt;&lt; ans.first &lt;&lt; <span class="string">&quot;, the second largest element=&quot;</span> &lt;&lt; ans.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeInterview</category>
      </categories>
      <tags>
        <tag>Pair</tag>
        <tag>INT_MIN</tag>
      </tags>
  </entry>
  <entry>
    <title>[Step by Step] How to install Google Chrome on Ubuntu 16.04</title>
    <url>/posts/65af7d45/</url>
    <content><![CDATA[<h1 id="Tutorial-Google-Chrome-Web-Browser-in-Ubuntu"><a href="#Tutorial-Google-Chrome-Web-Browser-in-Ubuntu" class="headerlink" title="Tutorial - Google Chrome Web Browser in Ubuntu"></a><center>Tutorial - Google Chrome Web Browser in Ubuntu</center></h1><p>If you are working on the Ubuntu environment and not used to using FireFox browser, Google Chrome maybe is your first choice.<br>Here, I shared my experience of installing Google Chrome on Ubuntu 16.04. You can implement it rapidly and easily.</p>
<ul>
<li><p><strong>Step 1.</strong> Download the Google Chrome to your Ubuntu system</p>
<p style="background-color:#F0F0F0">$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</p>
</li>
<li><p><strong>Step 2.</strong> Install the Google Chrome</p>
<p style="background-color:#F0F0F0">$ sudo dpkg -i google-chrome-stable_current_amd64.deb
</p>
</li>
<li><p><strong>Step 3.</strong> Update the Google Chrome and you can run it.</p>
<p style="background-color:#F0F0F0">$ cat /etc/apt/sources.list.d/google-chrome.list</p>

</li>
</ul>
<p><img src="GoogleChromeInstallation_1.png" alt=""></p>
<hr>
<p>When open the application, if you meet <font color=#FF0000>“Your connection is not secure”</font> message or result as below:<br><img src="GoogleChromeInstallation_2.png" alt=""></p>
<p><strong>Solution.</strong> Installation of Network Security Service libraries package:</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install libnss3-1d</p>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Google_Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Implement strStr()</title>
    <url>/posts/9bc77297/</url>
    <content><![CDATA[<h1 id="28-Implement-strStr"><a href="#28-Implement-strStr" class="headerlink" title="28. Implement strStr()"></a><center>28. Implement strStr()</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Implement <font color=#808080>strStr()</font>.</p>
<p>Return the index of the first occurrence of needle in haystack, or <font color=#808080>-1</font> if <font color=#808080>needle</font> is not part of <font color=#808080>haystack</font>.<br><strong>Clarification:</strong><br>What should we return when <font color=#808080>needle</font> is an empty string? This is a great question to ask during an interview.</p>
<p>For the purpose of this problem, we will return 0 when <font color=#808080>needle</font> is an empty string. This is consistent to C’s <font color=#808080>strstr()</font> and Java’s <font color=#808080>indexOf()</font>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> haystack = "hello", needle = "ll"<br><b>Output:</b> 2<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> haystack = "aaaaa", needle = "bba"<br><b>Output:</b> -1<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> haystack = "", needle = ""<br><b>Output:</b> 0<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= haystack.length, needle.length &lt;= 5 * 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>haystack</font><span> and <span style="background-color:#F0F0F0"><font color=#808080>needle</font></span> consist of only lower-case English characters.</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>My bad method got Time Limit Exceeded. Because I used two loop to check each characters of string, record the index by 2 variables if both of characters are equal.<br>I racked my brains for good solution without using substr(). Finally, I got up and went to online to find answer. I refered to <a href="https://zxi.mytechroad.com/blog/string/leetcode-28-implement-strstr/">Huahua’s Tech Road</a>. The loop repeats <code>haystack.length() - needle.length()</code> times, it can reduce computing time. Use the length of needle to match haystack, if index of j is equal to needle.length(), return index of i.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack == needle || !needle.length()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> h = haystack.length();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = needle.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= h - n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; haystack[i+j] == needle[j]) j++;</span><br><span class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Length of Last Word</title>
    <url>/posts/b04b682/</url>
    <content><![CDATA[<h1 id="58-Length-of-Last-Word"><a href="#58-Length-of-Last-Word" class="headerlink" title="58. Length of Last Word"></a><center>58. Length of Last Word</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a string <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists of some words separated by spaces, return the <em>length of the last word in the string</em>. <em>If the last word does not exist, return</em> <span style="background-color:#F0F0F0"><font color=#808080>0</font></span>.</p>
<p>A <strong>word</strong> is a maximal substring consisting of non-space characters only.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> s = "Hello World"<br><b>Output:</b> 5<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = " "<br><b>Output:</b> 0</br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists of only English letters and spaces <span style="background-color:#F0F0F0"><font color=#808080>‘ ‘</font></span></li></strong>.</p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a><u>Version</u></h3><p>Idea:<br>This problem took me a lot of time thinking how to solve, because I tried many methods based on scanning string in order. As a result, I ingorned tailing spaces situation, e.g. “a    “ or “a  bc   “. Obviously, my logic was error! Finally, I refered to <a href="https://zxi.mytechroad.com/blog/string/leetcode-58-length-of-last-word/">Huahua’s Tech Road</a>, the solution is very understandable, it scan the string in <strong>reverse order</strong> <u>until a space or reach the beginning of the string</u>. So, the first <code>while(i &gt;= 0 &amp;&amp; s[i] == &#39; &#39;)</code> means trimming off space at tail; the second <code>while(i &gt;= 0 &amp;&amp; s[i] != &#39; &#39;)</code> means calculating length of a last word.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> characters = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            i--;</span><br><span class="line">            characters ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> characters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Reverse_order</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Longest Common Prefix</title>
    <url>/posts/2768cb2c/</url>
    <content><![CDATA[<h1 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a><center>14. Longest Common Prefix</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <span style="background-color:#F0F0F0"><font color=#808080>“”</font></span>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> strs = ["flower","flow","flight"]<br><b>Output:</b> "fl"<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> strs = ["dog","racecar","car"]<br><b>Output:</b> ""<br><b>Explanation:</b> There is no common prefix among the input strings.<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= strs.length &lt;= 200</font></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= strs[i].length &lt;= 200</font></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>strs[i]</font></span> consists of only lower-case English letters.</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>First, declared a variable of string that stored strs[0]. Then, I compared it with each elements of vector. At 8 line, <code>min(res.length(), strs[i].length())</code> means finding a smallest length for matching between strings. At 10 line, if a statement is true, I stored a current lenght of string and prepared to compare next element; if a statement is false, it means these strings aren’t the same, so the length must be subtract 1 and compare each others again. At 17 line, if length is 0, there is no reason to execute althought maybe there are many elements that have not been compared.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.size(); i++)&#123;</span><br><span class="line">            length = min(res.length(), strs[i].length());</span><br><span class="line">            <span class="keyword">while</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.substr(<span class="number">0</span>, length) == strs[i].substr(<span class="number">0</span>, length))&#123;</span><br><span class="line">                    res = strs[i].substr(<span class="number">0</span>, length);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    length --;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h3><p>Idea:<br>A method is refered from online. Aims to compare every characters, if each characters is the same at the same position, store it!<br>The first loop is the length of strs[0] (1th string), the second loop is number of elements of vector. At 8 line, take each characters <code>s[i]</code> from every strings to match a character of <code>strs[0][i]</code>, meanwhile, check the length of string whether it exceeds i index(position) or not. If a condtion is true, store this character <code>strs[0][i]</code>. On the contrary, return a record.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.empty()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">string</span> &amp;s : strs)</span><br><span class="line">                <span class="keyword">if</span> (s.length() &lt;= i || s[i] != strs[<span class="number">0</span>][i]) <span class="keyword">return</span> res;</span><br><span class="line">            res += strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Shared partition between Mac OS X and Windows 10 [Save time]</title>
    <url>/posts/4755908e/</url>
    <content><![CDATA[<h1 id="Bootcamp-File-sharing-between-Mac-OS-X-and-Windows-10-on-MacBook-Pro"><a href="#Bootcamp-File-sharing-between-Mac-OS-X-and-Windows-10-on-MacBook-Pro" class="headerlink" title="Bootcamp: File sharing between Mac OS X and Windows 10 on MacBook Pro"></a><center>Bootcamp: File sharing between Mac OS X and Windows 10 on MacBook Pro</center></h1><p>Here are some reason you should consider deploying Windows on your Mac device.</p>
<ol>
<li>More games with better performance in Windows OS.</li>
<li>Some Applications don’t work in macOS or not support all functions.</li>
<li>Developers need to test projects in Windows OS.</li>
</ol>
<p>So, I shared my experience to save your time of installing Windows on MacBook Pro.</p>
<h2 id="Hardward-amp-Software-preparation"><a href="#Hardward-amp-Software-preparation" class="headerlink" title="Hardward &amp; Software preparation"></a>Hardward &amp; Software preparation</h2><ul>
<li>Hardware<br>Product model: Macbook Pro 2017</li>
<li>Software - Win10 ISO<br>You can go to this url to downlaod ISO:<br><a href="https://www.microsoft.com/zh-tw/software-download/windows10">https://www.microsoft.com/zh-tw/software-download/windows10</a><br>Choose version:Windows 10, Choose language: English and choose 64-bit version</li>
</ul>
<h2 id="Use-Bootcamp-to-install-Win10"><a href="#Use-Bootcamp-to-install-Win10" class="headerlink" title="Use Bootcamp to install Win10"></a>Use Bootcamp to install Win10</h2><ul>
<li><p><strong>Step 1.</strong> Launch Bootcamp Assistant from th Utilities folder in Applications.<br>Then, load your WIN10 ISO and allocate appropriate disk size.<br><img src="bootcamp_1.png" alt=""></p>
</li>
<li><p><strong>Step 2.</strong> Wait for some time, the processing will download WIN10 support software.<br><img src="bootcamp_2.png" alt=""></p>
</li>
<li><p><strong>Step 3.</strong> Finally, you will see the WIN10 setup screen.<br><img src="bootcamp_3.png" alt=""></p>
</li>
<li><p><strong>Step 4.</strong> Enter “Explorer”, you wil see <code>WININSTALL (D:)</code> and click <code>BootCamp folder</code> to execute setup program. (Don’t choose anything else)<br><img src="bootcamp_4.png" alt=""></p>
</li>
</ul>
<h2 id="Partition-NTFS-for-file-sharing"><a href="#Partition-NTFS-for-file-sharing" class="headerlink" title="Partition NTFS for file sharing"></a>Partition NTFS for file sharing</h2><ul>
<li><p><strong>Step 1.</strong> Shut down your Mac. </p>
</li>
<li><p><strong>Step 2.</strong> Hold down the <code>Command and R keys</code> down and press the power button.</p>
</li>
<li><p><strong>Step 3.</strong> Keep holding Command and R keys until the Apple logo appears on the screen.</p>
</li>
<li><p><strong>Step 4.</strong> Then, you will see a screen saying macOS Utilities(or if your Mac is older, OS X Utilities).</p>
</li>
<li><p><strong>Step 5.</strong> Choose “Disk Utility”<br><img src="bootcamp_5.png" alt=""></p>
</li>
<li><p><strong>Step 6.</strong> Choose “APPLE SSD …” and click partition<br><img src="bootcamp_6.png" alt=""></p>
</li>
<li><p><strong>Step 7.</strong> Click ‘+’ to new partition section<br><img src="bootcamp_7.png" alt=""></p>
</li>
<li><p><strong>Step 8.</strong> Suggest selecting the NTFS option<br><img src="bootcamp_8.png" alt=""></p>
</li>
<li><p><strong>Step 9.</strong> If the partition is succes, you will see the new partition section between Mac OS X and Windows 10</p>
</li>
</ul>
<h2 id="Error-blue-screen-when-boot-Windows-10"><a href="#Error-blue-screen-when-boot-Windows-10" class="headerlink" title="Error - blue screen when boot Windows 10"></a>Error - blue screen when boot Windows 10</h2><p>You finish above procedures, <font color=#FF0000>if WIN10 can’t boot anymore and show blue screen with error message: 0xd000000e</font></p>
<ul>
<li><strong>Reason:</strong>  The installation creates a hybrid MBR which is completely unnecessary. Windows will not boot in EFI mode but in BIOS mode instead and crash.</li>
<li><strong>Solution:</strong> Enter Mac OS X to open terminal<p style="background-color:#F0F0F0">$ sudo apt-get install gdisk</p>
<p style="background-color:#F0F0F0">$ sudo gdisk /dev/sda0 ("sda0" depands on your primary partition)</p>
<p style="background-color:#F0F0F0">Type <b>p</b> to view the partition table to verify you're working on the correct disk</p>
<p style="background-color:#F0F0F0">Type <b>x</b> to enter the experts' menu</p>
<p style="background-color:#F0F0F0">Type <b>n</b> to create an empty protective MBR</p>
<p style="background-color:#F0F0F0">Type <b>w</b> to save your changes, You'll be asked to confirm this action</p>
Finally, reboot you Mac and enter WIN10 OS successfully.

</li>
</ul>
<h2 id="Necessary-third-party-softwares"><a href="#Necessary-third-party-softwares" class="headerlink" title="Necessary third party softwares"></a>Necessary third party softwares</h2><p>To enable  Mac OS X can write data at shared partition, I provide some software infomations as below:<br>&#49; <a href="https://osxfuse.github.io">OSXFUSE</a><br>&#50; <a href="https://www.tuxera.com/company/open-source/">ntfs-3g</a></p>
<p>Reference:<br><a href="https://www.innoq.com/en/blog/triple-booting-a-mac/">https://www.innoq.com/en/blog/triple-booting-a-mac/</a></p>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>MacOS_X</tag>
        <tag>Windows10</tag>
        <tag>Bootcamp</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Maximum Depth of Binary Tree</title>
    <url>/posts/57b52472/</url>
    <content><![CDATA[<h1 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a><center>104. Maximum Depth of Binary Tree</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given the <span style="background-color:#F0F0F0"><font color=#808080>root</font></span> of a binary tree, return <em>its maximum depth</em>.</p>
<p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p><img src="MaximumDepthofBinaryTree_example1.png" alt=""></p>
<p style="background-color:#F0F0F0"><b>Input:</b> root = [3,9,20,null,null,15,7]<br>
<b>Output:</b> 3<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> root = [1,null,2]<br>
<b>Output:</b> 2<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> root = []<br>
<b>Output:</b> 0<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> root = [0]<br>
<b>Output:</b> 1<br></p>

<p><strong>Constraints:</strong><br><strong><li>The number of nodes in the tree is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 10^4]</font></span>.</li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-100 &lt;= Node.val &lt;= 100</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>Basically, I konw the search must be throughout all link of the whole tree, then if the left/right node of root are NULL, the depth is the deepest, so depth is start from 1 (depth + 1). But, I can’t find out any regular action by using the recursion.<br>There is a quit clear demonstration as below[1]:<br><img src="MaximumDepthofBinaryTree_example2.png" alt=""><br>It’s very helpful and let me understand the recursion processing.<br>So, let me explain the code:<br>(&#49;) <code>maxDepth(root-&gt;left)</code>: use recursion to find deepest depth of left node<br>(&#50;) <code>maxDepth(root-&gt;right</code>: use recursion to find deepest depth of right node<br>(&#51;) <code>max((1), (2))</code>: compare the deepest depth of both of left/right nodes, get the maximum value. Then, <code>+ 1</code> means adding this layer.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Reference:<br>[1] <a href="https://algorithms.tutorialhorizon.com/find-the-maximum-depth-or-height-of-a-binary-tree/">https://algorithms.tutorialhorizon.com/find-the-maximum-depth-or-height-of-a-binary-tree/</a></p>
]]></content>
      <tags>
        <tag>Recursion</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Maximum Subarray</title>
    <url>/posts/90ac56be/</url>
    <content><![CDATA[<h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><center>53. Maximum Subarray</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given an integer array <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Follow up:</strong> If you have figured out the <span style="background-color:#F0F0F0"><font color=#808080>O(n)</font></span> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><b>Output:</b> 6<br><b>Explanation:</b> [4,-1,2,1] has the largest sum = 6.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [1]<br><b>Output:</b> 1<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [0]<br><b>Output:</b> 0<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [-1]<br><b>Output:</b> -1<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [-2147483647]<br><b>Output:</b> -2147483647<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums.length &lt;= 2 * 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>It is a brute force approach. Use 2 loop to calculate the sum for each elements.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxValue = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                maxValue = max(maxValue, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h2><p>Idea:<br>This is an efficient method, use only one loop.<br><code>sum += nums[i]</code> means the cumulative sum.<br><code>sum = max(sum, nums[i])</code> means the maximum of sum between the cumulative sum or current index of value.<br><code>maxValue = max(maxValue, sum)</code> means recording the maximal value.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = INT_MIN, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            sum = max(sum, nums[i]);</span><br><span class="line">            maxValue = max(maxValue, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Merge Sorted Array</title>
    <url>/posts/1cc4a24a/</url>
    <content><![CDATA[<h1 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a><center>88. Merge Sorted Array</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.<br><strong>Note:</strong></p>
<ul>
<li>The number of elements initialized in nums1 and nums2 are m and n respectively.</li>
<li>You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p style="background-color:#F0F0F0"><b>Input:</b><br>
nums1 = [1,2,3,0,0,0], m = 3<br>
nums2 = [2,5,6],       n = 3<br>
<br>
<b>Output:</b> [1,2,2,3,5,6]<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-10^9 &lt;= nums1[i], nums2[i] &lt;= 10^9</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>nums1.length == m + n</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>nums2.length == n</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>My initial approach is to use queue to store element. The processing of merging is in order, I compare witch each elements, if the element is smaller, it will be assign to nums1[i] after the original value of index i will push to queue at nums vector. But, I faced many if statement in my code, it’s too complicated.<br>Finally, I refered to <a href="https://medium.com/@ChYuan/leetcode-no-88-merge-sorted-array-%E5%BF%83%E5%BE%97-easy-9d2b3141ded3">ChingYuanYang</a>, I gained an impressive solution after realizing his explanation.<br>I can assign the element from the last position in reverse order at nums1 vector that is the largest value. It’s an easy way to merge vectors.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s_1 = m <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> s_2 = n <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> max_size = m + n <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max_size; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s_1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[i] = nums2[s_2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s_2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[i] = nums1[s_1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[s_1] &gt; nums2[s_2])&#123;</span><br><span class="line">                nums1[i] = nums1[s_1--];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[i] = nums2[s_2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h3><p>Idea:<br>It’s a perfert code from <a href="https://zxi.mytechroad.com/blog/algorithms/array/leetcode-88-merge-sorted-array/">Huahua’s Tech Road</a>.<br>According to the question, it says “merge nums2 into nums1”, so we can use the size (=m) of nums2 as while statement rather than the size (=m+n) of nums1. Then, use only one statement to implement clean code with no if statement.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tail = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[tail--] = (i &gt;= <span class="number">0</span> &amp;&amp; nums1[i] &gt; nums2[j]) ? nums1[i--] : nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Merge Two Sorted Lists</title>
    <url>/posts/61be1b10/</url>
    <content><![CDATA[<h1 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><center>21. Merge Two Sorted Lists</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Merge two sorted linked lists and return it as a new <strong>sorted</strong> list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p><img src="Merge_ListNode_example.png" alt=""></p>
<p style="background-color:#F0F0F0"><b>Input:</b> l1 = [1,2,4], l2 = [1,3,4]<br><b>Output:</b> [1,1,2,3,4,4]</p>
<p style="background-color:#F0F0F0"><b>Input:</b> l1 = [], l2 = []<br><b>Output:</b> []</p>
<p style="background-color:#F0F0F0"><b>Input:</b> l1 = [], l2 = [0]<br><b>Output:</b> [0]

<p><strong>Constraints:</strong><br><strong><li>The number of nodes in both lists is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 50]</font></span> .</li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-100 &lt;= Node.val &lt;= 100</font></span></li></strong><br><strong><li>Both <span style="background-color:#F0F0F0"><font color=#808080>l1</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>l2</font></span> are sorted in non-decreasing order.</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>I haven’t written a program with ListNode before. So, ListNode’s constructor is very strange to me. I directly refered to <a href="https://zxi.mytechroad.com/blog/leetcode/leetcode-21-merge-two-sorted-lists/">Huahua’s Tech Road</a>. The method used a temporary node as the start of the result list, named <em>dummy</em>. The ListNode pointer’s tail always points to the last node in the result list, so you can use <code>tail-&gt;next=l1</code> to append new Nodes easily. <u>Notice: Must to do <code>tail=tail-&gt;next</code></u> to get next node’ memory address. The while() proceeds, it means two of ListNode aren’t empty. It one of ListNodes is empty, non-empty ListNode is added value to tail. When the processing is done, the result is in <code>dummy.next</code> (because the first value is 0, initial value).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* tail = &amp;dummy;</span><br><span class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &gt; l2-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next=l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail-&gt;next=l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1) tail-&gt;next = l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) tail-&gt;next = l2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Palindrome Number</title>
    <url>/posts/d37a286f/</url>
    <content><![CDATA[<h1 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a><center>9. Palindrome Number</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>
<p><strong>Follow up:</strong> Could you solve it without converting the integer to a string?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input</b>: x = 121<br><b>Output</b>: true<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = -121<br><b>Output</b>: false<br><b>Explanation</b>: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = 10<br><b>Output</b>: false<br><b>Explanation</b>: Reads 01 from right to left. Therefore it is not a palindrome.<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = -101<br><b>Output</b>: false<br></p>

<p><strong>Constraints:</strong><br><strong><li>-2^31 &lt;=x &lt;= 2^31 -1</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>idea:<br>My solution is the same as “Reverse Integer”. Use the reverse integer to compare with the original value, so you can get the result.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>, temp = x;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(x)&#123;</span><br><span class="line">                ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">                x = x / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp == ans)&#123;</span><br><span class="line">                <span class="keyword">return</span> (ans &gt; INT_MAX)?<span class="number">0</span>:<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h3><p>idea:<br>The solution is refered from online. At if statement, it filters negative numbers and multiples of 10. <code>while(x &gt;sum)</code> means cutting x in half. If x is even digits, use <code>sum == x</code> to get answer, on the contrary, use <code>sume / 10 == x</code>. This method of computing time is fater than Version 1 if x is a large number.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; sum)&#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> (sum == x)||(sum / <span class="number">10</span> == x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Remainder</tag>
        <tag>Quotient</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Plus One</title>
    <url>/posts/acf6f11e/</url>
    <content><![CDATA[<h1 id="66-Plus-One"><a href="#66-Plus-One" class="headerlink" title="66. Plus One"></a><center>66. Plus One</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a <strong>non-empty</strong> array of decimal digits representing a non-negative integer, increment one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> digits = [1,2,3]<br><b>Output:</b> [1,2,4]<br><b>Explanation:</b> The array represents the integer 123.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> digits = [4,3,2,1]<br><b>Output:</b> [4,3,2,2]<br><b>Explanation:</b> The array represents the integer 4321.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> digits = [0]<br><b>Output:</b> [1]<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= digits.length &lt;= 100</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= digits[i] &lt;= 9</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a><u>Version</u></h2><p>Idea:<br>At first, add 1 and the last index of element. Check each digits in reverse to get the value of carry. Finally, must be check the final the vale of carry, if carry isn’t equal to 0, insert it into begining at vector. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = digits.size();</span><br><span class="line">        <span class="keyword">int</span> i = len - <span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">        digits[i]++;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            digits[i] += carry;</span><br><span class="line">            <span class="keyword">int</span> quotient = digits[i] / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(quotient &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                digits[i] = digits[i] % <span class="number">10</span>;</span><br><span class="line">                carry = quotient;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry != <span class="number">0</span>) digits.insert(digits.begin(), carry);</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted Array</title>
    <url>/posts/7241c2c1/</url>
    <content><![CDATA[<h1 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a><center>26. Remove Duplicates from Sorted Array</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <font color=#808080>in-place</font> with O(1) extra memory.</p>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<p style="background-color:#F0F0F0">// <b>nums</b> is passed in by reference. (i.e., without making a copy)<br>int len = removeDuplicates(nums);<br><br>// any modification to <b>nums</b> in your function would be known by the caller.<br>// using the length returned by your function, it prints the first <b>len</b> elements.<br>for (int i = 0; i < len; i++) {<br>&emsp;&emsp;print(nums[i]);<br>}</p>

<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> nums = [1,1,2]<br><b>Output:</b> 2, nums = [1,2]<br><b>Explanation:</b> Your function should return length = <b>2</b>, with the first two elements of nums being <b>1</b> and <b>2</b> respectively. It doesn't matter what you leave beyond the returned length.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [0,0,1,1,1,2,2,3,3,4]<br><b>Output:</b> 5, nums = [0,1,2,3,4]<br><b>Explanation:</b> Your function should return length = <b>5</b>, with the first five elements of nums being modified to <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, and <b>4</b> respectively. It doesn't matter what values are set beyond the returned length.<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 3 * 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= nums[i] &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>nums is sorted in ascending order.</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>This is a simple solution. Remain the first element, so a count index is start from 1. Use a loop to compare with each elements, if it find the result is true, store the element and shift a count index.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nums.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i - <span class="number">1</span>] != nums[i])</span><br><span class="line">                nums[count++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h3><p>Idea:<br>This better solution is refered to <a href="https://zxi.mytechroad.com/blog/algorithms/array/leetcode-26-remove-duplicates-from-sorted-array/">Huahua’s Tech Road</a>. At first, <code>nums[count++] = nums[i]</code> aims to store the first element and shift a count index. Declare a new variable j as <code>i + 1</code> to find the element which is not equal to nums[i]. Then, if it is found, use <code>i = j</code> to record index.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            nums[count++] = nums[i];</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt; n &amp;&amp; nums[j] == nums[i]) j++;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted List</title>
    <url>/posts/66cc46ab/</url>
    <content><![CDATA[<h1 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a><center>83. Remove Duplicates from Sorted List</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> 1->1->2<br>
<b>Output:</b> 1->2<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> 1->1->2->3->3<br>
<b>Output:</b> 1->2->3<br></p>

<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>We can use original List to check each elements. If the current pointer of value is equal to the next pointer of value, we use <code>tail-&gt;next = tail-&gt;next-&gt;next</code> to skip the next pointer. So, We can return head that is unduplicated List.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *tail = head;</span><br><span class="line">        <span class="keyword">while</span>(tail &amp;&amp; tail-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tail-&gt;val == tail-&gt;next-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next = tail-&gt;next-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Source-code-1"><a href="#Source-code-1" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h2><p>Idea:<br>If we don’t want to modify the List of head, we can delcare a new ListNode, as dummy. Before going into the while statement, we must assign a first value of head to <code>tail-&gt;next</code> that is a pointer of the list of dummy. Then we can compare a value of tail with a value of head.<br><em>Notice: return dummy must be <code>dummy.next</code>, because the first value is an initial value.</em><br>The solution is refered to <a href="https://zxi.mytechroad.com/blog/list/leetcode-83-remove-duplicates-from-sorted-list/">Huahua’s Tech Road</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* tail = &amp;dummy;</span><br><span class="line">        tail-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head &amp;&amp; head-&gt;val == tail-&gt;next-&gt;val) head = head-&gt;next;</span><br><span class="line">            tail-&gt;next-&gt;next = head;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Element</title>
    <url>/posts/1afffcb4/</url>
    <content><![CDATA[<h1 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><center>27. Remove Element</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given an array nums and a value val, remove all instances of that value <font color=#808080>in-place</font> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <font color=#808080>in-place</font> with O(1) extra memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<p style="background-color:#F0F0F0">// <b>nums</b> is passed in by reference. (i.e., without making a copy)<br>int len = removeElement(nums, val);<br>// any modification to <b>nums</b> in your function would be known by the caller.<br>// using the length returned by your function, it prints the first <b>len</b> elements.<br>for (int i = 0; i < len; i++) {<br>&emsp;&emsp;print(nums[i]);<br>}<br></p>

<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> nums = [3,2,2,3], val = 3<br>
<b>Output:</b> 2, nums = [2,2]<br>
<b>Explanation:</b> Your function should return length = 2, with the first two elements of nums being 2.<br>
It doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,3,0,0], your answer will be accepted.<br></p>

<p style="background-color:#F0F0F0"><b>Input:</b> nums = [0,1,2,2,3,0,4,2], val = 2<br><b>Output:</b> 5, nums = [0,1,4,0,3]<br><b>Explanation:</b> Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 100</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums[i] &lt;= 50</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= val &lt;= 100</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-１"><a href="#Version-１" class="headerlink" title="Version １"></a><u>Version １</u></h3><p>Idea:<br>The strategy is the same as <a href="https://egbert-yu-ting.github.io/posts/7241c2c1/#more">LeetCode 26</a>.<br>Declare a count index that starts from 0, aim to store the element if it isn’t equal to val.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val)&#123;</span><br><span class="line">                nums[count++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Reverse Integer</title>
    <url>/posts/236b1bbd/</url>
    <content><![CDATA[<h1 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a><center>7. Reverse Integer</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p><strong>Note:</strong><br>Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input</b>: x = 123<br><b>Output</b>: 321<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = -123<br><b>Output</b>: -321<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = 120<br><b>Output</b>: 21<br></p>
<p style="background-color:#F0F0F0"><b>Input</b>: x = 0<br><b>Output</b>: 0<br></p>

<p><strong>Constraints:</strong><br><strong><li>-2^31 &lt;= x &lt;= 2^31 -1</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>At the begining, I need to get units digit, so the modulus operator % can compute the remainder. Then, the remainder should be added to answer(return value) after answer times ten for each loop. <code>x = x / 10</code> means removing units digit for getting hundreds digit. Don’t forget the constraints, use values of INT_MIN and INT_MAX to implement it.<br>P.S. <code>return (conditional)?true:false</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ans&gt;INT_MIN &amp;&amp; ans&lt;INT_MAX)?ans:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Remainder</tag>
        <tag>Quotient</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Roman to Integer</title>
    <url>/posts/8caf8f3c/</url>
    <content><![CDATA[<h1 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a><center>13. Roman to Integer</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Roman numerals are represented by seven different symbols: <span style="background-color:#F0F0F0"><font color=#808080>$I$</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>$V$</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>$X$</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>$L$</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>$C$</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>$D$</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>M</font></span>.</p>
<p style="background-color:F0F0F0"><b>Symbol</b>&emsp;&emsp;<b>Value</b><br>
&thinsp;$I$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&thinsp;1<br>
$V$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;5<br>
$X$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10<br>
$L$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&thinsp;50<br>
$C$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;100<br>
$D$&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;500<br>
$M$&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&thinsp;&thinsp;1000</p>

<p>For example, <span style="background-color:#F0F0F0"><font color=#808080>2</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080>$II$</font></span> in Roman numeral, just two one’s added together. <span style="background-color:#F0F0F0"><font color=#808080>12</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080>$XII$</font></span>, which is simply <span style="background-color:#F0F0F0"><font color=#808080>$X + II$</font></span>. The number <span style="background-color:#F0F0F0"><font color=#808080>27</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080>$XXVII$</font></span>, which is <span style="background-color:#F0F0F0"><font color=#808080>$XX + V + II$</font></span>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <span style="background-color:#F0F0F0"><font color=#808080>$IIII$</font></span>. Instead, the number four is written as <span style="background-color:#F0F0F0"><font color=#808080>$IV$</font></span>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <span style="background-color:#F0F0F0"><font color=#808080>$IX$</font></span>. There are six instances where subtraction is used:</p>
<ul>
<li><span style="background-color:#F0F0F0"><font color=#808080>$I$</font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080>$V$</font></span> (5) and <span style="background-color:#F0F0F0"><font color=#808080>$X$</font></span> (10) to make 4 and 9. </li>
<li><span style="background-color:#F0F0F0"><font color=#808080>$X$</font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080>$L$</font></span> (50) and <span style="background-color:#F0F0F0"><font color=#808080>$C$</font></span> (100) to make 40 and 90. </li>
<li><span style="background-color:#F0F0F0"><font color=#808080>$C$</font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080>$D$</font></span> (500) and <span style="background-color:#F0F0F0"><font color=#808080>$M$</font></span> (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> s = "$III$"<br><b>Output:</b> 3<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "$IV$"<br><b>Output:</b> 4<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "$IX$"<br><b>Output:</b> 9<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "$LVIII$"<br><b>Output:</b> 58<br><b>Explanation:</b> $L$ = 50, $V$= 5, $III$ = 3.<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "$MCMXCIV$"<b>Output:</b> 1994<br><b>Explanation:</b> $M$ = 1000, $CM$ = 900, $XC$ = 90 and $IV$ = 4.<br></p>

<p><strong>Constraints:</strong><br><strong><li>1 &lt;= s.length &lt;= 15</li></strong><br><strong><li>s contains only the characters (‘$I$’, ‘$V$’, ‘$X$’, ‘$L$’, ‘$C$’, ‘$D$’, ‘$M$’).</li></strong><br><strong><li>It is guaranteed that s is a valid roman numeral in the range [1, 3999].</li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>At first, I thought these symbols can be built by using vector directly. After my careful thought, a map container is a easy way to store elements by a combination of a key value and a mapped value. Next step, I used a loop to check each characters, if <code>symbol[s[i]] &gt;= symbol[s[i + 1]]</code> is true, add symbol[s[i]] up. On the contrary, if <code>symbol[s[i]] &lt; symbol[s[i + 1]]</code> is true, subtract symbol[s[i]] from summation.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        map&lt;char, int&gt; symbol(&#123;&#123;&#x27;I&#x27;, 1&#125;, &#123;&#x27;V&#x27;, 5&#125;, &#123;&#x27;X&#x27;, 10&#125;, &#123;&#x27;L&#x27;, 50&#125;, &#123;&#x27;C&#x27;, 100,&#125;, &#123;&#x27;D&#x27;, 500&#125;, &#123;&#x27;M&#x27;, 1000&#125;&#125;);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol[s[i]] &gt;= symbol[s[i + <span class="number">1</span>]])&#123;</span><br><span class="line">                sum += symbol[s[i]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum -= symbol[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h3><p>Idea:<br>This is a way to reduce a computing time. Add symbol[s[i]] value first, then check a value of s[i - 1] element whether it is less than a value of s[i] or not. If it is true, the summation need to subtract twice value of symbol[s[i - 1]]. So, it implements the less conditional operator. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        map&lt;char, int&gt; symbol(&#123;&#123;&#x27;I&#x27;, 1&#125;, &#123;&#x27;V&#x27;, 5&#125;, &#123;&#x27;X&#x27;, 10&#125;, &#123;&#x27;L&#x27;, 50&#125;, &#123;&#x27;C&#x27;, 100,&#125;, &#123;&#x27;D&#x27;, 500&#125;, &#123;&#x27;M&#x27;, 1000&#125;&#125;);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            sum += symbol[s[i]];</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; symbol[s[i - <span class="number">1</span>]] &lt; symbol[s[i]])&#123;</span><br><span class="line">                sum -= <span class="number">2</span>*symbol[s[i <span class="number">-1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[One-time success] How to install Ryu on Ubuntu - Tutorial</title>
    <url>/posts/9e0f4e5/</url>
    <content><![CDATA[<h1 id="Tutorial-Install-ryu-in-Ubuntu-16-04-with-no-failure"><a href="#Tutorial-Install-ryu-in-Ubuntu-16-04-with-no-failure" class="headerlink" title="Tutorial - Install ryu in Ubuntu 16.04 with no failure"></a><center>Tutorial - Install ryu in Ubuntu 16.04 with no failure</center></h1><p><a href="https://ryu.readthedocs.io/en/latest/index.html">Ryu</a> is a component-based software defined networking framework. It’s very easy to develop your own SDN controller. And, if you have any questions, there are rich source on the internet.</p>
<h2 id="Start-to-configure-and-install"><a href="#Start-to-configure-and-install" class="headerlink" title="Start to configure and install"></a>Start to configure and install</h2><ul>
<li><p><strong>Step 1.</strong> Download package information from all configured sources. (The sources often defined in /etc/apt/sources)</p>
<p style="background-color:#F0F0F0">$ sudo apt-get update</p>
</li>
<li><p><strong>Step 2.</strong> Install dependencies for building the required Python packages on your system</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install python-pip python-dev</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install python-eventlet python-routes python-webob python-paramiko python-dev</p></li>
<li><p><strong>Step 3.</strong> We will download Ryu source code from github, so git is necessary.</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install git</p>
</li>
<li><p><strong>Step 4.</strong> Download Ryu source code from github</p>
<p style="background-color:#F0F0F0">$ git clone git://github.com/osrg/ryu.git</p>
</li>
<li><p><strong>Step 5.</strong> <a href="https://networkx.org/documentation/stable/index.html">NetworkX</a> is very important software to support your development of SDN controller.</p>
<p style="background-color:#F0F0F0">$ pip install networkx</p>
</li>
<li><p><strong>Step 6.</strong> Install Ryu</p>
<p style="background-color:#F0F0F0">$ cd ryu/</p>
<p style="background-color:#F0F0F0">$ sudo python ./setup.py install</p>
</li>
<li><p><strong>Step 7.</strong> Execution and testing</p>
<p style="background-color:#F0F0F0">$ ryu-manager</p>
// If your installation is successful, the terminal will show some info. and stop to listening:
<p style="background-color:#F0F0F0">
loading app ryu.controller.ofp_handler<br>
instantiating app ryu.controller.ofp_handler of OFPHandler</p>
</li>
</ul>
<hr>
<p style="margin-left:40px"><font color=#FF0000>Warning: if you execute “ryu-manager” and get an error!</font></p>
<p style="margin-left:40px"><b>Solution:</b></p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ cd ryu/</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo pip install -r tools/pip-requires</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo pip install six --upgrade</p>

<p style="margin-left:40px"><font color=#FF0000>Warning: if you execute “ryu-manager” and get an error as below:</font></p>
<p style="margin-left:40px"><font color=#FF0000><b>class ConfigurationSourceDriver(object, metaclass=abc.ABCMeta):</b><br>&emsp;&emsp;&emsp;<b>SyntaxError: ivalid syntax</b></font></p>
<p style="margin-left:40px"><b>Solution:</b></p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ cd /usr/local/lib/python2.7/dist-packages/</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo rm –rf oslo_config/</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo git clone https://github.com/openstack/oslo.config -b stable/ocata</p>
<p style="margin-left:40px"><u>From the above, the command is refered to http://gogosatellite.blogspot.com/2016/05/openstack-oslo-config-tutorial.html</u></p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ cd oslo.config</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo python setup.py install</p>

]]></content>
      <categories>
        <category>Simulator</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SDN</tag>
        <tag>Controller</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Same Tree</title>
    <url>/posts/2ef96137/</url>
    <content><![CDATA[<h1 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a><center>100. Same Tree</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given the roots of two binary trees <span style="background-color:#F0F0F0"><font color=#808080>p</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>q</font></span>, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p><img src="SameTree_example1.png" alt=""></p>
<p style="background-color:#F0F0F0"><b>Input:</b> p = [1,2,3], q = [1,2,3]<br>
<b>Output:</b> true<br></p>

<p><img src="SameTree_example2.png" alt=""></p>
<p style="background-color:#F0F0F0"><b>Input:</b> p = [1,2], q = [1,null,2]<br>
<b>Output</b>: false<br></p>

<p><img src="SameTree_example3.png" alt=""></p>
<p style="background-color:#F0F0F0"><b>Input:</b> p = [1,2,1], q = [1,1,2]<br>
<b>Output:</b> false<br></p>

<p><strong>Constraints:</strong><br><strong><li>TThe number of nodes in both trees is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 100]</font></span>.</li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= Node.val &lt;= 10^4</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>This is my first time to process binary tree. After realizing question and example, it lets me recollect the solution of <a href="https://egbert-yu-ting.github.io/posts/61be1b10/">LeetCode 21</a>. I can use a similar if statement to code. But, I still don’t know how to compare two binary trees of their child. So, I refered to <a href="https://www.programcreek.com/2012/12/check-if-two-trees-are-same-or-not/">programcreek</a> finally, I saw source code and understood the solution immediately. We can use recursion to bind the child checking (left &amp; right).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span> &amp;&amp; q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="literal">NULL</span> || q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val==q-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Search Insert Position</title>
    <url>/posts/41fdcb04/</url>
    <content><![CDATA[<h1 id="35-Search-Insert-Position"><a href="#35-Search-Insert-Position" class="headerlink" title="35. Search Insert Position"></a><center>35. Search Insert Position</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> nums = [1,3,5,6], target = 5<br><b>Output:</b> 2<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [1,3,5,6], target = 2<br><b>Output:</b> 1<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [1,3,5,6], target = 7<br><b>Output:</b> 4<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [1,3,5,6], target = 0<br><b>Output:</b> 0<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> nums = [1], target = 0<br><b>Output:</b> 0<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums.length &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= nums[i] &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>nums contains <b>distinct</b> values sorted in <b>ascending</b> order.</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= target &lt;= 10^4</font></span></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>It is an intuitive method, use a loop to match each elements.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h2><p>Idea:<br>The solution is refered to <a href="https://zxi.mytechroad.com/blog/algorithms/binary-search/leetcode-35-search-insert-position/">Huahua’s Tech Road</a>. It is an efficient approach to process large size of vector. <code>m = l + (r - 1) / 2</code> is a key to divide into two parts. Then, get one of parts that consists target (Reduce computing time), repeats it until we find the accurate position.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.size();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;      </span><br><span class="line">      <span class="keyword">if</span> (nums[m] == target)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (nums[m] &gt; target)</span><br><span class="line">        r = m;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        l = m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Sqrt(x)</title>
    <url>/posts/72b31d68/</url>
    <content><![CDATA[<h1 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><center>69. Sqrt(x)</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a non-negative integer <span style="background-color:#F0F0F0"><font color=#808080>x</font></span>, compute and return <em>the square root of</em> <span style="background-color:#F0F0F0"><font color=#808080>x</font></span>.</p>
<p>Since the return type is an integer, the decimal digits are <b>truncated</b>, and only <b>the integer part</b> of the result is returned.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> x = 4<br><b>Output:</b> 2<br></p>
<p style="background-color:#F0F0F0"><b>Input:</b> x = 8<br>
<b>Output:</b> 2<br>
<b>Explanation:</b> The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.<br></p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= x &lt;= 2^31 - 1</font></span></li></strong></p>
<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>My intuition is divided divisor that is start from 1, we can get remainder, if remainder is equal to divisor, return the divisor; if divisor is bigger than remainder, retrurn the (divisor - 1).<br>This method can work, but it wastes much time.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> divisor = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(divisor &lt;= x)&#123;</span><br><span class="line">            <span class="keyword">int</span> remainder = x / divisor;</span><br><span class="line">            <span class="keyword">if</span>(divisor == remainder) <span class="keyword">return</span> divisor;</span><br><span class="line">            <span class="keyword">if</span>(divisor &gt; remainder) <span class="keyword">return</span> divisor - <span class="number">1</span>;</span><br><span class="line">            divisor ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> divisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h2><p>Idea:<br>We can use binary search to improve time complexity. A variable of l means left index, a variable of r means right index and a variable of m means middle index. l must be set 1, because <code>while(l &lt;= r)</code> can filter <code>x = 0</code> test case. We use <code>m * m</code> to find which value can match x.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> r = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(x) ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">long</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ( m * m == x) <span class="keyword">return</span> m;</span><br><span class="line">            <span class="keyword">if</span>( m * m &gt; x)&#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Binary_search</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Symmetric Tree</title>
    <url>/posts/d1f23ab6/</url>
    <content><![CDATA[<h1 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a><center>101. Symmetric Tree</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>For example, this binary tree <span style="background-color:#F0F0F0"><font color=#808080>[1,2,2,3,4,4,3]</font></span> is symmetric:</p>
<p style="background-color:#F0F0F0">
&emsp;&emsp;&emsp;&emsp;1<br>
&emsp;&emsp;&ensp;&ensp;&ensp;/&ensp;\<br>
&emsp;&emsp;&ensp;&ensp;2&ensp;&ensp;&ensp;2<br>
&emsp;&emsp;&ensp;/&ensp;\&ensp;/&ensp;\<br>
&emsp;&emsp;3&emsp;4 4&emsp;3</p>
But the following <span style="background-color:#F0F0F0"><font color=#808080>[1,2,2,null,3,null,3]</font></span> is not:
<p style="background-color:#F0F0F0">
&emsp;&emsp;&emsp;&emsp;1<br>
&emsp;&emsp;&ensp;&ensp;&ensp;/&ensp;\<br>
&emsp;&emsp;&ensp;&ensp;2&ensp;&ensp;&ensp;2<br>
&emsp;&emsp;&ensp;&ensp;&ensp;\&ensp;&ensp;&ensp;\<br>
&emsp;&emsp;&ensp;&emsp;3 &ensp;&emsp;3</p>

<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code:"></a>Source code:</h2><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h2><p>Idea:<br>The strategic is similar to <a href="https://egbert-yu-ting.github.io/posts/2ef96137/#more">Same-Tree</a>. First, we must check the root node whether it’s null or not. Then, we use root-&gt;left and root-&gt;right as arguments to call private function.<br>There are some rules we must to know:<br>&#49;. the value of the left node must be equal to the value of the right node.<br>&#50;. the value of the left node as the left child node must be equal to the value of the right node as the right child node.<br>&#51;. the vlaue of the left node as the right child node must be equal to the value of the right node as the left child node.<br>So, we can write to codes based on these ruls at 22~23 line.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSymmetric(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* l, TreeNode* r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l &amp;&amp; !r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!l || !r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (l-&gt;val == r-&gt;val) &amp;&amp; isSymmetric(l-&gt;left, r-&gt;right) </span><br><span class="line">            &amp;&amp; isSymmetric(l-&gt;right, r-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>How to understand recursive function - Tower of Hanoi</title>
    <url>/posts/d521850b/</url>
    <content><![CDATA[<p>Let’s realize how does tower of hanoi works and how to use recursive function to implement it!!!</p>
<p>The <strong>Tower of Hanoi</strong> is a mathematical game or puzzle, it’s a classical problem during your CSIE studies.</p>
<p><strong>First</strong>, the demonstration of process(3 disks and 3 rods) as below[1]:<br><img src="https://upload.wikimedia.org/wikipedia/commons/4/4f/Tower_of_Hanoi.gif" alt="animation"></p>
<p><strong>Second</strong>, moving the entire stack to another rod need to comply with the following rules:</p>
<ol>
<li>Only one disk can be moved at a time.</li>
<li>Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.</li>
<li>No larger disk may be placed on top of a smaller disk.</li>
</ol>
<p><strong>Third</strong>, the solutions between 1 disks and 4 disks are shown as following:</p>
<table>
<thead>
<tr>
<th align="center">1 disks</th>
<th align="center">2 disks</th>
<th align="center">3 disks</th>
<th align="center">4 disks</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 A-&gt;B</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">2 A-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 B-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">3 A-&gt;B</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 A-&gt;C</td>
<td align="center">1 C-&gt;A</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">2 A-&gt;B</td>
<td align="center">2 C-&gt;B</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">1 A-&gt;B</td>
<td align="center">1 C-&gt;B</td>
<td align="center">1 A-&gt;B</td>
</tr>
<tr>
<td align="center">1 A-&gt;C</td>
<td align="center">2 A-&gt;C</td>
<td align="center">3 A-&gt;C</td>
<td align="center">4 A-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">1 B-&gt;C</td>
<td align="center">1 B-&gt;A</td>
<td align="center">1 B-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">2 B-&gt;C</td>
<td align="center">2 B-&gt;A</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 A-&gt;C</td>
<td align="center">1 C-&gt;A</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">3 B-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 A-&gt;B</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">2 A-&gt;C</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">1 B-&gt;C</td>
</tr>
</tbody></table>
<p>we can find regular movement!<br>In short, the pattern can be proposed:</p>
<ul>
<li>Shift ‘n-1’ disks from ‘A’ to ‘B’.</li>
<li>Shift last disk from ‘A’ to ‘C’.</li>
<li>Shift ‘n-1’ disks from ‘B’ to ‘C’.</li>
</ul>
<p><strong>Finally</strong>, we can get complicated solution by computing:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> start, <span class="keyword">char</span> temp, <span class="keyword">char</span> target, <span class="keyword">int</span> &amp;moved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Move &quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; target &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        moved++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hanoi(n - <span class="number">1</span>, start, target, temp, moved);</span><br><span class="line">        hanoi(<span class="number">1</span>, start, temp, target, moved);</span><br><span class="line">        hanoi(n - <span class="number">1</span>, temp, start, target, moved);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">3</span>, moved = <span class="number">0</span>;</span><br><span class="line">   hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span> , moved);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Total moved &quot;</span> &lt;&lt; moved &lt;&lt; <span class="string">&quot; steps&quot;</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Explanation:<br>In the main(), I declare “n” is represented the number of dists and “moved” is a counter. At 19 line, call hanoi() function which consists 5 argument (‘A’, ‘B’ and ‘C’ are represented each rods).<br>At hanoi() function, it checks n whether it’s equal to 1 at 6 line, but it’s invalid at the first time. So, the program runs else part.<br><font color=#FF0000>n = 3 - 1, A C B</font> (<em>recursive call at 10 line</em>)<br>&nbsp;&nbsp;<font color=#0000FF> n = 2, A C B<br>&nbsp;&nbsp;=&gt; if statement is invalid, so do else part</font><br>&nbsp;&nbsp;<font color=#FF0000>n= 2 - 1 , A B C</font> (<em>recursive call</em>)<br>&nbsp;&nbsp;&nbsp;&nbsp;n = 1, A B C<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; if statement is valid<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; print “Move A &rarr; C”, moved ++<br>&nbsp;&nbsp;<font color=#0000FF>n = 1, A C B</font> (<em>recursive call at 11 line</em>)<br>&nbsp;&nbsp;<font color=#0000FF>=&gt; print “Move A &rarr; B”, moved ++</font><br>&nbsp;&nbsp;<font color=#FF0000>n = 2 - 1, C A B</font> (<em>recursive call at 12 line</em>)<br>&nbsp;&nbsp;&nbsp;&nbsp;n = 1, C A B<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; if statement is valid<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; print “Move C &rarr; B”, moved ++<br><font color=#FF0000>n = 1, A B C (<em>recursive call at 11 line</em>)<br>=&gt; if statement is valid<br>=&gt; print “Move A &rarr; C”, moved ++</font><br><font color=#FF0000>n = 3 - 1, B A C</font> (<em>recursive call at 12 line</em>)<br>&nbsp;&nbsp;<font color=#0000FF>n = 2, B A C<br>&nbsp;&nbsp;=&gt; if statement is invalid, so do else part</font><br>&nbsp;&nbsp;<font color=#FF0000>n = 2 - 1, B C A</font> (<em>recursive call at 10 line</em>)<br>&nbsp;&nbsp;&nbsp;&nbsp;n = 1, B C A<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; if statement is valid<br>&nbsp;&nbsp;&nbsp;&nbsp;=&gt; print “Move B &rarr; C”, moved ++<br>&nbsp;&nbsp;<font color=#0000FF>n = 1, B A C</font> (<em>recursive call at 11 line</em>)<br>&nbsp;&nbsp;<font color=#0000FF>=&gt; print “Move B &rarr; C”, moved ++</font><br><font color=#FF0000>n = 2 - 1, A B C (<em>recursive call at 12 line</em>)<br>=&gt; if statement is valid<br>=&gt; print “Move A &rarr; C”, moved ++</font></p>
<p>Reference:<br>[1] André Karwath aka Aka, CC BY-SA 2.5 <a href="https://creativecommons.org/licenses/by-sa/2.5">https://creativecommons.org/licenses/by-sa/2.5</a>, via Wikimedia Commons</p>
]]></content>
      <categories>
        <category>Recursion</category>
      </categories>
      <tags>
        <tag>Recursive_function</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Two Sum</title>
    <url>/posts/b98c8b25/</url>
    <content><![CDATA[<h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><center>1. Two Sum</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given an array of integers <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> and an integer <span style="background-color:#F0F0F0"><font color=#808080>target</font></span>, return <em>indices of the two numbers such that they add up to target</em>.</p>
<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>You can return the answer in any order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input</b>: nums = [2,7,11,15], target = 9<br><b>Output</b>: [0,1]<br><b>Output</b>: Because nums[0] + nums[1] == 9, we return [0, 1].</p>

<p style="background-color:#F0F0F0"><b>Input</b>: nums = [3,2,4], target = 6<br><b>Output</b>: [1,2].</p>

<p style="background-color:#F0F0F0"><b>Input</b>: nums = [3,3], target = 6<br><b>Output</b>: [0,1]</p>

<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h4 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h4><p>Idea:<br>This is my first coding on the LeetCode platform. After reading the problem, my mind’s gone blank, I only thought a simple way to solve it. Use two loop to check all numbers, but the time complexity is O(n^2). I knew this method is not efficient!</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; returnArray;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                sum = nums[i]+nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                    returnArray.push_back(i);</span><br><span class="line">                    returnArray.push_back(j);</span><br><span class="line">                    <span class="keyword">return</span> returnArray;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a><u>Version 2</u></h4><p>Idea:<br>So, the source code is refered from online and I added some comments after programming. I heard the Hash Table mechanism at first time. It is a very simple principle, I must remember it!<br>If you want to learn Hash Table, you can see <a href="https://aozturk.medium.com/simple-hash-map-hash-table-implementation-in-c-931965904250">Simple Hash Map</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; returnArray; <span class="comment">// return the ans</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapIndex; <span class="comment">// hash table(key:nums[i], value:index)</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            it = mapIndex.find(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != mapIndex.end())&#123;</span><br><span class="line">                <span class="comment">// found it, it means target - nums[i] = it-&gt;first</span></span><br><span class="line">                returnArray.push_back(it-&gt;second); <span class="comment">// get the value(index) by iterator</span></span><br><span class="line">                returnArray.push_back(i); <span class="comment">// get the current index</span></span><br><span class="line">                <span class="keyword">return</span> returnArray;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// add new element</span></span><br><span class="line">                mapIndex.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(nums[i], i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Map(STL)</tag>
        <tag>Hash_table</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Valid Parentheses</title>
    <url>/posts/5ddd3578/</url>
    <content><![CDATA[<h1 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a><center>20. Valid Parentheses</center></h1><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><p>Given a string <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> containing just the characters <span style="background-color:#F0F0F0"><font color=#808080>‘(‘</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>‘)’</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>‘{‘</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>‘}’</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>‘[‘</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>‘]’</font></span>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p style="background-color:#F0F0F0"><b>Input:</b> s = "()"<br><b>Output:</b> true</p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "()[]{}"<br><b>Output:</b> true</p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "(]"<br><b>Output:</b> false</p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "([)]"<br><b>Output:</b> false</p>
<p style="background-color:#F0F0F0"><b>Input:</b> s = "{[]}"<br><b>Output:</b> true</p>

<p><strong>Constraints:</strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 10^4</font></span></li></strong><br><strong><li><span style="background-color:#F0F0F0"><font color=#808080>s</span></font> consists of parentheses only <span style="background-color:#F0F0F0"><font color=#808080>‘()[]{}’.</span></font></li></strong></p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a><u>Version 1</u></h3><p>Idea:<br>Use map&lt;key, value&gt; to declare the characters. Notice: a string will be process is left parenthese, so these can be used as a value. Then, I can use key-value to do match when right parenthese is processed.<br>I get each characters to check whether it is unrecorded or equal <code>st.top()</code> or not. If it is true, this character be added at the top of the stack. On the contrary, delete the top most element of the stack. Finally, ues <code>st.empty()</code> to return whether the stack is empty.<br>P.S. Stack is LIFO(Last In First Out).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;  match&#123;&#123;<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;, &#123;<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>&#125;,&#123;<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty() || c != st.top())&#123;</span><br><span class="line">                st.push(match[c]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Map(STL)</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Run Visual Studio Code on macOS Tutorial</title>
    <url>/posts/a7083339/</url>
    <content><![CDATA[<h1 id="Visual-Studio-Code-installation-and-run-it-from-Terminal-on-macOS"><a href="#Visual-Studio-Code-installation-and-run-it-from-Terminal-on-macOS" class="headerlink" title="Visual Studio Code installation and run it from Terminal on macOS"></a><center>Visual Studio Code installation and run it from Terminal on macOS</center></h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p><strong>Visual Studio Code</strong> is a free source-code editor made by Microsoft for Windows, Linux and macOS.<br>Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol>
<li><a href="https://code.visualstudio.com/docs?dv=osx">Download Visual Studio Code</a> for macOS directly.</li>
<li>Go to your browser’s lownloaded archive.</li>
<li>Extract <em>VSCode-darwin-stable.zip</em> file</li>
<li>Drag <span style="background:#F0F0F0">Visual Studio Code.cpp</span> to the <span style="background:#F0F0F0">Applications</span> folder, making it available in the macOS Launchpad.</li>
</ol>
<h2 id="Launching-from-the-command-line"><a href="#Launching-from-the-command-line" class="headerlink" title="Launching from the command line"></a>Launching from the command line</h2><p>You can type ‘code .’ in any folder to start editing files in that folder.<br><font color=#FF0000>Notice: you will meet an error message: <b>“code .” command is not working</b></font></p>
<p><strong>Solution:</strong><br>You must add Visual Studio Code to the path first:</p>
<p style="background-color:#F0F0F0">
1. Create bash_profile file if it doesn't exist in your system.<br>
&ensp;&ensp;&ensp;<b>touch ~/.bash_profile</b><br>
2. Open this file, click 'i' to edit.<br>
&ensp;&ensp;&ensp;<b>vi ~/.bash_profile</b><br>
3. Paste it as below, and type ':' + 'wq' to write & quit.<br>
&ensp;&ensp;&ensp;<b>export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"</b><br>
4. Preserve your current shell, if you miss it, you will repeat step2-step3 again when you reopen the terminal.<br>
&ensp;&ensp;&ensp;<b>source ~/.bash_profile</b><br>

]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>[Quick and Easy] Installation of ns-3 Simulator with OpenFlow 1.3 - Tutorial</title>
    <url>/posts/8ece0fb0/</url>
    <content><![CDATA[<h1 id="ns-3-configuration-and-ofswitch13-module-Tutorial"><a href="#ns-3-configuration-and-ofswitch13-module-Tutorial" class="headerlink" title="ns-3 configuration and ofswitch13 module - Tutorial"></a><center>ns-3 configuration and ofswitch13 module - Tutorial</center></h1><p>I had deployed the ns-3 simulation with ofswitch13 successfully. I’ve been struggling to solve the simulation platform a lot of time. So, my experience is quite valuable and self-giving sharing for the ns-3 beginners.<br>The following procedure can be deployed on VMware/Virtual machine or cloud instance.<br>If your want to know how to deploy ns-3 on remote cloud instance easily, I will post an article to demonstrate full steps.</p>
<h2 id="What-is-ns-3-Network-Simulator"><a href="#What-is-ns-3-Network-Simulator" class="headerlink" title="What is ns-3 Network Simulator?"></a>What is <a href="https://www.nsnam.org/">ns-3</a> Network Simulator?</h2><ul>
<li>A discrete-event network simulator for internet systems</li>
<li>Free software and open source</li>
<li>Packet level</li>
<li>C++ for core/ Python for bindings</li>
<li>Support under Linux, FreeBSD and Cygwin</li>
</ul>
<h3 id="ns-3-simulation-workflow"><a href="#ns-3-simulation-workflow" class="headerlink" title="ns-3 simulation workflow:"></a>ns-3 simulation workflow:</h3><ol>
<li>Topology definition</li>
<li>Model development</li>
<li>Node and link configuration</li>
<li>Execution</li>
<li>Performance analysis</li>
<li>Graphical Visualization</li>
</ol>
<h3 id="Key-terms-adn-abstractions"><a href="#Key-terms-adn-abstractions" class="headerlink" title="Key terms adn abstractions:"></a>Key terms adn abstractions:</h3><ul>
<li>Node: the virtual hardward (e.g. PC, server, router, smart phone, etc.)</li>
<li>Network device: transimts and receives over the channel with network layer</li>
<li>Channel: transmission medium between Network device (e.g. WiFi, p2p, csma)</li>
<li>Application: creates or receives data packet that send between Nodes with transport layer</li>
<li>Helper: ns-3 construct used to quickly configure and create the above</li>
</ul>
<h2 id="OpenFlow-1-3-module-for-ns-3"><a href="#OpenFlow-1-3-module-for-ns-3" class="headerlink" title="OpenFlow 1.3 module for ns-3"></a>OpenFlow 1.3 module for ns-3</h2><ul>
<li>The <a href="https://github.com/ljerezchaves/ofswitch13">OFSwitch13 module</a>, which enhances the ns-3 Network Simulator with <a href="https://opennetworking.org/wp-content/uploads/2014/10/openflow-spec-v1.3.0.pdf">OpenFlow 1.3</a> capabilities</li>
<li>Allow ns-3 users to simulate Software-Defined Networks (SDN)</li>
<li>Support internal/external SDN controller<br><img src="OFSwitch13Device_structure.png" alt="The OFSwitch13 module overview"></li>
</ul>
<h3 id="Main-class-function"><a href="#Main-class-function" class="headerlink" title="Main class function"></a><a href="http://www.lrc.ic.unicamp.br/~luciano/publications/wns316.pdf">Main class function</a></h3><ul>
<li>OpenFlow 1.3 switch network device<br>It can be used to interconnect ns-3 nodes using the existing CSMA network devices and channels.</li>
<li>OpenFlow 1.3 controller interface<br>It provides the basic functionalities for controller implementation.</li>
<li>OpenFlow channel<br>It is the interface that connects each switch to an OpenFlow controller.</li>
<li>ofsoftswitch13 library<br>It provides the complete OpenFlow switch datapath implementation, including input and output ports, the flow-table pipeline for packet matching, the group table, and the meter table.<br>It also provides the OFLib library that is used for converting internal messages to and from OpenFlow 1.3 wire format, and the dpctl utility for converting text commands into internal messages.<br><img src="ofsoftswitch13_library_architecture.png" alt="The ofsoftwitch13 library architecture"></li>
</ul>
<h2 id="Start-to-configure-and-build"><a href="#Start-to-configure-and-build" class="headerlink" title="Start to configure and build"></a>Start to configure and build</h2><ul>
<li><p><strong>Step 1.</strong> You have the following packages installed on your system</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install build-essential gcc g++ python git mercurial unzip cmake</p>
<p style="background-color:#F0F0F0">$ sudo apt-get install pkg-config autoconf libtool libboost-dev</p>
</li>
<li><p><strong>Step 2.</strong> Download a recent stable ns-3 code (using the mercurial repository for ns-3.29)</p>
<p style="background-color:#F0F0F0">$ hg clone http://code.nsnam.org/ns-3.29</p>
</li>
<li><p><strong>Step 3.</strong> Download the OFSwitch13 code into the src/ folder</p>
<p style="background-color:#F0F0F0">$ cd ns-3.29/src</p>
<p style="background-color:#F0F0F0">$ git clone --recurse-submodules https://github.com/ljerezchaves/ofswitch13.git</p>
</li>
<li><p><strong>Step 4.</strong> Update the code to the desired release version (using 4.0.0, which is compatible with ns-3.29 or later)</p>
<p style="background-color:#F0F0F0">$ cd ofswitch13</p>
<p style="background-color:#F0F0F0">$ git checkout 4.0.0 && git submodule update –recursive</p>
</li>
<li><p><strong>Step 5.</strong> It is time to compile the ofsoftswitch13 as a static library (Configure and build the library)</p>
<p style="background-color:#F0F0F0">$ cd lib/ofsoftswitch13</p>
<p style="background-color:#F0F0F0">$ ./boot.sh</p>
<p style="background-color:#F0F0F0">$ ./configure --enable-ns3-lib</p>
<p style="background-color:#F0F0F0">$ make</p>
<font color=#FF0000>Warning: if you meet an error as “perl: warning: Setting locale failed”:</font>

</li>
</ul>
<p style="margin-left:40px"><b>Solution:</b></p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo vim .bashrc</p>
<p style="background-color:#F0F0F0; margin-left:40px;">export LC_ALL=“en_US.UTF-8”</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo locale-gen zh_TW.UTF-8</p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo dpkg-reconfigure locales</p>

<ul>
<li><p><strong>Step 6.</strong> Go back to the ns-3 root directory and patch the ns-3 code with the appropriated patches available under the ofswitch13/utils directory</p>
<p style="background-color:#F0F0F0">$ cd ../../../../</p>
<p style="background-color:#F0F0F0">$ patch -p1 < src/ofswitch13/utils/ofswitch13-src-3_29.patch</p>
<p style="background-color:#F0F0F0">$ patch -p1 < src/ofswitch13/utils/ofswitch13-doc-3_29.patch</p>
</li>
<li><p><strong>Step 7.</strong> Now, configure the ns-3 (Need to check –witch-ofswitch13=your path)</p>
<p style="background-color:#F0F0F0">$ ./waf configure --enable-tests --enable-examples --enable-sudo --with-ofswitch13=<br>/home/ubuntu/ns-3.29/src/ofswitch13/lib/ofsoftswitch13/</p>
</li>
<li><p><strong>Step 8.</strong> Check for the enabled NS-3 OpenFlow 1.3 integration feature after the configuration<br><img src="ns3_configuration.png" alt=""></p>
</li>
<li><p><strong>Step 9.</strong> Finally, build the ns-3 simulation</p>
<p style="background-color:#F0F0F0">$ sudo ./waf</p>
<font color=#FF0000>Warning: if you meet an error as below:</font>
<p><img src="./buildError.png"></p>

</li>
</ul>
<p style="margin-left:40px"><b>Solution: Modify: “SuidBuild” → “SuidBuild_task”</b></p>
<p style="background-color:#F0F0F0; margin-left:40px;">$ sudo vim wscript</p>
<p style="margin-left:40px"><img src="./buildError_solution.png"></p>

<p>Now, you can run your first example script, enjoy it!</p>
<p style="background-color:#F0F0F0">$ ./waf --run scratch/ofswitch13.first</p>

<p><strong>Notice:</strong><br>&#49;. <u>Suggest moving your script to scratch folder before executing.</u><br>&#50;. <u>Don’t add filename extension (e.g. .cc) at your execution’s command line</u></p>
]]></content>
      <categories>
        <category>Simulator</category>
      </categories>
      <tags>
        <tag>SDN</tag>
        <tag>Simulation</tag>
        <tag>ns-3</tag>
        <tag>ofswitch</tag>
        <tag>OpenFlow1.3</tag>
      </tags>
  </entry>
</search>
