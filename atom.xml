<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Egbert Lin&#39;s Blog</title>
  
  <subtitle>“Life is not a race, but a journey to be savoured each step of the way” by Brian Dyson</subtitle>
  <link href="https://egbert-yu-ting.github.io/atom.xml" rel="self"/>
  
  <link href="https://egbert-yu-ting.github.io/"/>
  <updated>2021-04-22T08:45:33.268Z</updated>
  <id>https://egbert-yu-ting.github.io/</id>
  
  <author>
    <name>EgbertLin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data Structures - HeapSort</title>
    <link href="https://egbert-yu-ting.github.io/posts/73b8e6ad/"/>
    <id>https://egbert-yu-ting.github.io/posts/73b8e6ad/</id>
    <published>2021-04-22T08:43:47.000Z</published>
    <updated>2021-04-22T08:45:33.268Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Heap Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Merge Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/ef61bad1/"/>
    <id>https://egbert-yu-ting.github.io/posts/ef61bad1/</id>
    <published>2021-04-22T03:08:58.000Z</published>
    <updated>2021-04-22T03:39:59.985Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Merge Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;It is a Divide and Conquer problem. Divide the vector into small group to sort, and merge each small groups to the vector.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;In the merge() function, we need two new vectors to store those element that is divided into two parts from the vector.&lt;br&gt; And, &lt;code&gt;INT_MAX&lt;/code&gt; must be added at the end of &lt;code&gt;leftvec&lt;/code&gt; and &lt;code&gt;rightvec&lt;/code&gt;. It&#39;s a comparision use. E.g., all of elements in &lt;code&gt;leftvec&lt;/code&gt; are smaller than &lt;code&gt;rightvec&lt;/code&gt;, so do &lt;code&gt;vec[i] = leftvec[left++]&lt;/code&gt; until &lt;code&gt;leftvec[left] = INT_MAX&lt;/code&gt;, and afterwards do &lt;code&gt;vec[i] = rightvec[right++]&lt;/code&gt;. Finally, those elements are sorted.</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Quick Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/91a7f1d8/"/>
    <id>https://egbert-yu-ting.github.io/posts/91a7f1d8/</id>
    <published>2021-04-21T08:40:53.000Z</published>
    <updated>2021-04-22T03:11:07.311Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Quick Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Bubble Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/2b353b50/"/>
    <id>https://egbert-yu-ting.github.io/posts/2b353b50/</id>
    <published>2021-04-21T06:13:46.000Z</published>
    <updated>2021-04-22T03:14:51.774Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Bubble Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Compare with each elements in the range &lt;code&gt;[0: n]&lt;/code&gt; and if &lt;code&gt;vector[i]&lt;/code&gt; is bigger than &lt;code&gt;vector[i + 1]&lt;/code&gt;, call swap().&lt;br&gt; &lt;code&gt;n&lt;/code&gt; is the number of elements in vector and it will descending every loop. It means the biggest element moves to the right side.&lt;br&gt; And, there are one suitation that break the loop earily than expected. If no any elements call swap(), it represented all of the elements in vector are sorted.</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Insertion Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/918ef68a/"/>
    <id>https://egbert-yu-ting.github.io/posts/918ef68a/</id>
    <published>2021-04-21T01:08:35.000Z</published>
    <updated>2021-04-21T06:47:05.689Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Insertion Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Need to use two for-loop. One is unsorted data in the range &lt;code&gt;[i:n]&lt;/code&gt; and the other is sorted data in the range &lt;code&gt;[0:i]&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Take one element from unsorted data to compare with sorted data.&lt;br&gt; &lt;b&gt;Step 1:&lt;/b&gt; use &lt;code&gt;temp&lt;/code&gt; variable to store this element&lt;br&gt; &lt;b&gt;Step 2:&lt;/b&gt; search value from sorted data which is bigger than &lt;code&gt;temp&lt;/code&gt; , if true, move the bigger value to current position &lt;code&gt;vector[j] = vector[j - 1]&lt;/code&gt;&lt;br&gt; &lt;b&gt;Step 3:&lt;/b&gt; Until if-statement returns false, it means the value of &lt;code&gt;j - 1&lt;/code&gt; is smaller than &lt;code&gt;temp&lt;/code&gt;, so insert &lt;code&gt;temp&lt;/code&gt; to current position &lt;code&gt;vector[j] = temp&lt;/code&gt;.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Merge k Sorted Lists - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/23a6e02/"/>
    <id>https://egbert-yu-ting.github.io/posts/23a6e02/</id>
    <published>2021-04-13T03:39:31.000Z</published>
    <updated>2021-04-20T06:06:25.830Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;23. Merge k Sorted Lists&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;You are given an array of &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;k&lt;/font&gt;&lt;/span&gt; linked-lists &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;lists&lt;/font&gt;&lt;/span&gt;, each linked-list is sorted in ascending order.&lt;br&gt; Merge all the linked-lists into one sorted linked-list and return it.</summary>
    
    
    
    <category term="LeetCode-Hard" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Hard/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>How arrays are passed to functions in C/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/47c634b1/"/>
    <id>https://egbert-yu-ting.github.io/posts/47c634b1/</id>
    <published>2021-04-11T09:55:01.000Z</published>
    <updated>2021-04-21T01:03:51.095Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;How arrays are passed to function | Basic and Important&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;</summary>
    
    
    
    <category term="C/C++_Concept" scheme="https://egbert-yu-ting.github.io/categories/C-C-Concept/"/>
    
    
  </entry>
  
  <entry>
    <title>Let&#39;s understand the Backtracking algorithm</title>
    <link href="https://egbert-yu-ting.github.io/posts/eabab51c/"/>
    <id>https://egbert-yu-ting.github.io/posts/eabab51c/</id>
    <published>2021-04-11T09:30:10.000Z</published>
    <updated>2021-04-21T01:05:26.284Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Backtracking algorithm&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;</summary>
    
    
    
    <category term="Tree_SearchAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/Tree-SearchAlgorithm/"/>
    
    
    <category term="Backtracking" scheme="https://egbert-yu-ting.github.io/tags/Backtracking/"/>
    
    <category term="Algorithm" scheme="https://egbert-yu-ting.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Find the Duplicate Number - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/36325234/"/>
    <id>https://egbert-yu-ting.github.io/posts/36325234/</id>
    <published>2021-03-25T02:03:36.000Z</published>
    <updated>2021-04-20T06:25:57.838Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;287. Find the Duplicate Number&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an array of integers &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt; containing &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n + 1&lt;/font&gt;&lt;/span&gt; integers where each integer is in the range &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;[1, n]&lt;/font&gt;&lt;/span&gt; inclusive.&lt;/p&gt;
&lt;p&gt;There is only &lt;b&gt;one repeated number&lt;/b&gt; in &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt;, return &lt;/u&gt;this repeated number&lt;/u&gt;.</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>Data Structures - Selection Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/74223785/"/>
    <id>https://egbert-yu-ting.github.io/posts/74223785/</id>
    <published>2021-03-24T02:57:42.000Z</published>
    <updated>2021-04-21T06:15:48.106Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Selection Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Declare two variables, &lt;code&gt;i&lt;/code&gt; likes the end pointer of sorted vector and &lt;code&gt;j&lt;/code&gt; likes the scanning pointer.&lt;br&gt; Aims to find the &lt;b&gt;smallest value&lt;/b&gt; (or &lt;b&gt;biggest value&lt;/b&gt;), therefore, &lt;code&gt;j&lt;/code&gt; starts from &lt;code&gt;i&lt;/code&gt; to scan until the end of &lt;code&gt;nums&lt;/code&gt;. Then, the smallest value is changed with the value of index &lt;code&gt;i&lt;/code&gt; by calling swap(). It means adding the smallest value to the sorted vector. Next step, i moves to the next index and go back to the previous action until all values are sorted.</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Remove Nth Node From End of List - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/d7f73c78/"/>
    <id>https://egbert-yu-ting.github.io/posts/d7f73c78/</id>
    <published>2021-03-22T07:17:29.000Z</published>
    <updated>2021-03-22T08:30:51.831Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;19. Remove Nth Node From End of List&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;head&lt;/font&gt;&lt;/span&gt; of a linked list, remove the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;sup&gt;th&lt;/sup&gt;&lt;/font&gt;&lt;/span&gt; node from the end of the list and return its head.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Follow up:&lt;/b&gt; Could you do this in one pass?</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] 3Sum - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/b32b0461/"/>
    <id>https://egbert-yu-ting.github.io/posts/b32b0461/</id>
    <published>2021-03-16T16:10:24.000Z</published>
    <updated>2021-03-29T07:42:42.563Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;15. 3Sum&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an array &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt; of &lt;I&gt;n&lt;/I&gt; integers, are there elements &lt;I&gt;a, b, c&lt;/I&gt; in &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt; such that &lt;I&gt;a&lt;/I&gt; + &lt;I&gt;b&lt;/I&gt; + &lt;I&gt;c&lt;/I&gt; = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Notice that the solution set must not contain duplicate triplets.</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Container With Most Water - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/fa15b897/"/>
    <id>https://egbert-yu-ting.github.io/posts/fa15b897/</id>
    <published>2021-03-15T08:19:31.000Z</published>
    <updated>2021-04-02T18:26:27.637Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;11. Container With Most Water&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;/font&gt;&lt;/span&gt; non-negative integers &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;a1, a2, ..., an&lt;/font&gt;&lt;/span&gt; , where each represents a point at coordinate &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;(i, ai)&lt;/font&gt;&lt;/span&gt;. &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;/font&gt;&lt;/span&gt; vertical lines are drawn such that the two endpoints of the line &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;i&lt;/font&gt;&lt;/span&gt; is at &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;(i, ai)&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;(i, 0)&lt;/font&gt;&lt;/span&gt;. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Longest Palindromic Substring - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/d0988a37/"/>
    <id>https://egbert-yu-ting.github.io/posts/d0988a37/</id>
    <published>2021-03-10T06:54:06.000Z</published>
    <updated>2021-03-15T09:00:50.685Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;5. Longest Palindromic Substring&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given a string s, return the longest palindromic substring in s.&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;
&lt;p style=&quot;background-color:#F0F0F0&quot;&gt;
&lt;b&gt;Input:&lt;/b&gt; s = &quot;babad&quot;&lt;br&gt; &lt;b&gt;Output:&lt;/b&gt; &quot;bab&quot;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; &quot;aba&quot; is also a valid answer.
&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Longest Substring Without Repeating Characters - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/b6196ce1/"/>
    <id>https://egbert-yu-ting.github.io/posts/b6196ce1/</id>
    <published>2021-03-09T06:10:44.000Z</published>
    <updated>2021-03-29T07:45:03.652Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;3. Longest Substring Without Repeating Characters&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given a string &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;s&lt;/span&gt;&lt;/font&gt;, find the length of the &lt;b&gt;longest substring&lt;/b&gt; without repeating characters.&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;
&lt;p style=&quot;background-color:#F0F0F0&quot;&gt;
&lt;b&gt;Input:&lt;/b&gt; s = &quot;abcabcbb&quot;&lt;br&gt; &lt;b&gt;Output:&lt;/b&gt; 3&lt;br&gt; &lt;b&gt;Explanation:&lt;/b&gt; The answer is &quot;abc&quot;, with the length of 3.
&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
    <category term="Hash_table" scheme="https://egbert-yu-ting.github.io/tags/Hash-table/"/>
    
    <category term="Sliding_Window" scheme="https://egbert-yu-ting.github.io/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Implement Stack using Queues - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/1e6556c3/"/>
    <id>https://egbert-yu-ting.github.io/posts/1e6556c3/</id>
    <published>2021-02-23T06:39:41.000Z</published>
    <updated>2021-03-08T08:35:26.879Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;225. Contains Duplicate&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (&lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;push&lt;/font&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;top&lt;/font&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;pop&lt;/font&gt;&lt;/span&gt;, and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;empty&lt;/font&gt;&lt;/span&gt;).</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Stack" scheme="https://egbert-yu-ting.github.io/tags/Stack/"/>
    
    <category term="Queue" scheme="https://egbert-yu-ting.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Contains Duplicate II - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/81b7ce15/"/>
    <id>https://egbert-yu-ting.github.io/posts/81b7ce15/</id>
    <published>2021-02-23T00:54:07.000Z</published>
    <updated>2021-03-08T08:32:53.792Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;219. Contains Duplicate&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an array of integers and an integer &lt;I&gt;k&lt;/I&gt;, find out whether there are two distinct indices &lt;I&gt;i&lt;/I&gt; and &lt;I&gt;j&lt;/I&gt; in the array such that &lt;b&gt;nums[i]&lt;/b&gt; = &lt;b&gt;nums[j]&lt;/b&gt; and the &lt;b&gt;absolute&lt;/b&gt; difference between &lt;I&gt;i&lt;/I&gt; and &lt;I&gt;j&lt;/I&gt; is at most &lt;I&gt;k&lt;/I&gt;.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Unordered_map(STL)" scheme="https://egbert-yu-ting.github.io/tags/Unordered-map-STL/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Contains Duplicate - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/5d51ed7c/"/>
    <id>https://egbert-yu-ting.github.io/posts/5d51ed7c/</id>
    <published>2021-02-22T02:06:16.000Z</published>
    <updated>2021-03-08T08:36:56.428Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;217. Contains Duplicate&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an array of integers, find if the array contains any duplicates.&lt;/p&gt;
&lt;p&gt;Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Unordered_map(STL)" scheme="https://egbert-yu-ting.github.io/tags/Unordered-map-STL/"/>
    
    <category term="Unordered_set(STL)" scheme="https://egbert-yu-ting.github.io/tags/Unordered-set-STL/"/>
    
    <category term="Sort" scheme="https://egbert-yu-ting.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Reverse Linked List - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/c6ae99a5/"/>
    <id>https://egbert-yu-ting.github.io/posts/c6ae99a5/</id>
    <published>2021-02-20T09:02:17.000Z</published>
    <updated>2021-03-08T08:35:50.068Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;206. Reverse Linked List&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;head&lt;/font&gt;&lt;/span&gt; of a singly linked list, reverse the list, and return &lt;I&gt;the reversed list&lt;/I&gt;.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Isomorphic Strings - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/31bd0f13/"/>
    <id>https://egbert-yu-ting.github.io/posts/31bd0f13/</id>
    <published>2021-02-19T03:01:12.000Z</published>
    <updated>2021-03-08T08:33:48.888Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;205. Isomorphic Strings&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given two strings &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;s&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;t&lt;/font&gt;&lt;/span&gt;, determine if they are isomorphic.&lt;/p&gt;
&lt;p&gt;Two strings &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;s&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;t&lt;/font&gt;&lt;/span&gt; are isomorphic if the characters in s can be replaced to get &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;t&lt;/font&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Unordered_map(STL)" scheme="https://egbert-yu-ting.github.io/tags/Unordered-map-STL/"/>
    
  </entry>
  
</feed>
