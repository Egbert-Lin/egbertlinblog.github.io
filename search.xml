<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo NexT v8.x.x - Add recent posts</title>
    <url>/posts/68394953/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>How to add recent posts to Next theme（v8.x.x）</b></font>
</p>
<p>If you have managed your blog for a long time, maybe you want to reach high impression, you can append <strong>Recent Post</strong> to sidebar. Viewers can see it whatever the article they read. <a id="more"></a></p>
<h2 id="create-custom-file">Create Custom File:</h2>
<p>In the <code>/blog/source/</code> path, establish <code>_data/sidebar.njk</code> file under <code>source/</code> directory, and add contents into <code>sidebar.njk</code> as below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- recent posts --&gt;</span></span><br><span class="line">&#123;%- if theme.recent_posts %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll motion-element &#123;&#123; &quot;</span><span class="attr">links-of-blogroll-</span>&quot; + <span class="attr">theme.recent_posts_layout</span> &#125;&#125;&quot;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title recent-posts-title&quot;</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-history &#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list recent-posts-list&quot;</span>&gt;</span></span><br><span class="line">	    &#123;%- set posts = site.posts.sort(&#x27;-date&#x27;).toArray() %&#125;</span><br><span class="line">	    &#123;%- for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span><br><span class="line">	        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;my-links-of-blogroll-item&quot;</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		    &#123;&#123; post.title &#125;&#125;</span><br><span class="line">		    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	    &#123;%- endfor %&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="custom-file-support-1">Custom File Support [1]</h2>
<p>In <code>/blog/themes/next</code>, open theme config file (_config.yml) and use <strong>custom_file_path</strong> key word to search the section. Then, uncomment the <code>sidebar: source/_data_sidebar.njk</code> as below: <img src="sidebar.png" /></p>
<h2 id="modify-the-theme-config-file-_config.yml">Modify the theme config file (_config.yml)</h2>
<p>Let add some contents to enable this function. So open _config.yml and add three line: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">recent_posts: true</span><br><span class="line">recent_posts_title: Recently</span><br><span class="line">recent_posts_layout: block</span><br></pre></td></tr></table></figure></p>
<h2 id="redeploy-your-blog">Redeploy your blog</h2>
<p>After deploying the blog, you will see recent posts successfully. <img src="Recently.png" /></p>
<p>References:<br> [1] https://theme-next.js.org/docs/advanced-settings/custom-files.html?highlight=sideb</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Tech</tag>
        <tag>Sidebar</tag>
        <tag>Post</tag>
      </tags>
  </entry>
  <entry>
    <title>Let&#39;s understand the Backtracking algorithm</title>
    <url>/posts/eabab51c/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Backtracking algorithm</b></font>
</p>
<h2 id="introduction">Introduction:</h2>
<a id="more"></a>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="built_in">string</span>&amp; res, <span class="keyword">bool</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.length() == N)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            res.push_back(s[i]);</span><br><span class="line">            c[i] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            backtracking(s, res, c);</span><br><span class="line">            </span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">            res.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;ABC&quot;</span>, res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">bool</span> c[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    backtracking(s, res, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tree_SearchAlgorithm</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Balanced Binary Tree - Solution/C++</title>
    <url>/posts/b3e1ca12/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>110. Balanced Binary Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a binary tree, determine if it is height-balanced.</p>
For this problem, a height-balanced binary tree is defined as:
<p style="background-color:#F0F0F0">
<span style="background-color:#F0F0F0"><font color=#808080>a binary tree in which the left and right subtrees of <l>every</l> node differ in height by no more than 1.</font></span>
</p>
<a id="more"></a>
<h2 id="example">Example:</h2>
<img src="example_1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [3,9,20,null,null,15,7]<br> <b>Output:</b> true
</p>
<img src="example_2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [1,2,2,3,3,null,null,4,4]<br> <b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> root = []<br> <b>Output:</b> true
</p>
<strong>Constraints:</strong> <strong>
<li>
TThe number of nodes in the tree is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 5000]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= Node.val &lt;= 10^4</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> We can calculate the depth of subnodes and use it to compare. How to get calculate the depth for binary tree? You can refer to <a href="https://egbert-yu-ting.github.io/posts/57b52472/?highlight=depth">Maximum Depth of Binary Tree</a>.<br></p>
<p>So, declare a <strong>getDepth()</strong> function to implement the depth of binary tree. At 18 line, <code>abs(left_depth - right_depth) &gt; 1</code> is based on a rule of height-balanced binary tree.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left_depth = getDepth(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> right_depth = getDepth(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(left_depth - right_depth) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> max(getDepth(root-&gt;left), getDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Best Time to Buy and Sell Stock II - Solution/C++</title>
    <url>/posts/65a8fd8a/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>122. Best Time to Buy and Sell Stock II</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Say you have an array <span style="background-color:#F0F0F0"><font color=#808080>prices</font></span> for which the ith element is the price of a given stock on day i.<br> <a id="more"></a></p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).<br></p>
<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> [7,1,5,3,6,4]<br> <b>Output:</b> 7<br> <b>Explanation:</b> Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>       Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> [1,2,3,4,5]<br> <b>Output:</b> 4<br> <b>Explanation:</b> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> [7,6,4,3,1]<br> <b>Output:</b> 0<br> <b>Explanation:</b> In this case, no transaction is done, i.e. max profit = 0.
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= prices[i] &lt;= 10 ^ 4</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Here is the same as <a href="https://egbert-yu-ting.github.io/posts/a026a3d3/">Best Time to Buy and Sell Stock</a>. <br></p>
<p>At 8 line, it always gets lowest price to i-th day.<br> At 9 - 10 line, we know the value of profit (<code>prices[i] - minPrice</code>), it must be checked whether it's bigger than 0. Because it avoids buying day and selling day on the same day, and guarantee the positive profit we get.<br> At 11 - 14 lin, we should not sell stock immediately even the profit is prositive at i-th day, maybe it will higher tomorrow (i-th + 1 day). So, we can know the selling day that is the best.<br> At 17 line, reinitialize minPrice variable for the next best buying day.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minPrice = INT_MAX, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            minPrice = min(minPrice, prices[i]);</span><br><span class="line">            <span class="keyword">int</span> profit = prices[i] - minPrice, j = i;</span><br><span class="line">            <span class="keyword">if</span>(profit &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; n &amp;&amp; prices[j] &gt;= prices[i])&#123;</span><br><span class="line">                    i = j;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                sum += prices[i] - minPrice;</span><br><span class="line">                minPrice= INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This strategy is very simple, if the buying day subtracted from the selling day is positive (profit), we directly add profit into maxProfit variable.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; prices[i<span class="number">-1</span>])&#123;</span><br><span class="line">                maxProfit += prices[i]- prices[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stock</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Best Time to Buy and Sell Stock - Solution/C++</title>
    <url>/posts/a026a3d3/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>121. Best Time to Buy and Sell Stock</b></font>
</p>
<h2 id="question">Question:</h2>
<p>You are given an array <span style="background-color:#F0F0F0"><font color=#808080>prices</font></span> where <span style="background-color:#F0F0F0"><font color=#808080>prices[i]</font></span> is the price of a given stock on the <span style="background-color:#F0F0F0"><font color=#808080>i^th</font></span> day.</p>
<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock. <a id="more"></a></p>
<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <span style="background-color:#F0F0F0"><font color=#808080>0</font></span>.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> prices = [7,1,5,3,6,4]<br> <b>Output:</b> 5<br> <b>Explanation:</b> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.<br> Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> prices = [7,6,4,3,1]<br> <b>Output:</b> 0<br> <b>Explanation:</b> In this case, no transactions are done and the max profit = 0.
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= prices.length &lt;= 10^5</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= prices[i] &lt;= 10^4</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is a brute force algorithm. Each elements as buying day (<code>prices[i]</code>)compare the profit with other selling day (<code>prices[j]</code>, i &lt; j), so we can get the maximum profit, however, the strategy is very inefficient. (Time Limit Exceeded)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty() || prices.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cost = prices[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; prices.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> reward = prices[j];</span><br><span class="line">                <span class="keyword">int</span> temp = reward - cost;</span><br><span class="line">                <span class="keyword">if</span>(temp &gt; <span class="number">0</span> &amp;&amp; temp &gt; profit)&#123;</span><br><span class="line">                    profit = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It can use only one loop to implement the algorithm.<br> <code>minPrice</code>: It want to get the lowest price up to i-th day.<br> <code>maxProfit</code>: It want to get the max profit up to i-th day.<br> <code>max(maxProfit, prices[i] - minPrice)</code>: It means that the minimum price subtracted from the price of selling day(<code>prices[i]</code>) and choose the large profit.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minPrice = INT_MAX, maxProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            minPrice = min(minPrice, prices[i]);</span><br><span class="line">            maxProfit = max(maxProfit, prices[i] - minPrice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stock</tag>
        <tag>BruteForce</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Binary Search Algorithm</title>
    <url>/posts/dad48e10/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Binary Search</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a sorted array arr[] of n elements, write a function to search a given element x in arr[]. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> arr[] = {1, 4, 6, 7, 9, 11, 12, 15, 17}<br>    x = 12;<br> <b>Output:</b> 6<br> <b>Explanation:</b> Element x is represented at index 6, and the program only runs 2 times. First, middle value is 9. Second, middle value is 12.
</p>
<p>The idea of binary search is to use the information that the array is sorted and reduce the time complexity to <strong>O(Log n)</strong>.</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version"><u>Version</u></h3>
<p>Idea:<br> You should know the length of array first, repeatedly dividing the search interval in half is at the core of binary search.<br> The demonstration is shown as below: <img src="binarySearch_example.png" /></p>
<p>Hence, you can declare <code>head</code> variable that is index 0, and <code>tail</code> varialbe that is index n - 1 (n is the length of array). Therefore, the middle of the interval is <b>(head + tail) / 2</b><br></p>
<p>At 14 line, if the value of middle is bigger than the target, narrow the interval to the lower half. Otherwise, narrow it to the upeer half.<br></p>
<p>Repeat 10 - 18 line to find the position of target until head's index is bigger than tail's index, it means the target isn't exist in array, so return -1.<br></p>
<p><b>Time complexity: O(log n)</b><br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> input)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = arr.size();</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = n - <span class="number">1</span>, middle = - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(head &lt;= tail)&#123;</span><br><span class="line">        middle = (head + tail) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[middle] == input) <span class="keyword">return</span> middle;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(arr[middle] &gt;input)&#123;</span><br><span class="line">            tail = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">int</span> res = binarySearch(arr, x);</span><br><span class="line">    (res == <span class="number">-1</span>)?<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Input is not exist in array&quot;</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; arr[res];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SearchAlgorithm</category>
      </categories>
      <tags>
        <tag>Searching</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Binary Tree Level Order Traversal II - Solution/C++</title>
    <url>/posts/cac8b982/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>107. Binary Tree Level Order Traversal II</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root). <a id="more"></a></p>
<h2 id="example">Example:</h2>
For example: Given binary tree <span style="background-color:#F0F0F0"><font color=#808080>[3,9,20,null,null,15,7]</span></font>,
<p style="background-color:#F0F0F0">
   3<br>    / \<br>   9 20<br>    / \<br>    15  7
</p>
return its bottom-up level order traversal as:
<p style="background-color:#F0F0F0">
[<br>   [15,7],<br>   [9,20],<br>   [3]<br>]
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I made a big mistake, I always think the solution that find the deepest depth first, the go back to the root with each layers. I realized an efficient approach until I had refered to <a href="https://zxi.mytechroad.com/blog/tree/leetcode-107-binary-tree-level-order-traversal-ii/">Huahua's Tech Road</a>.<br></p>
<p>You must understand how to implement a two dimensional vector first. Write a function as recursion, store each elements from top of tree. <code>res.size() &lt;= depth&gt;</code> is an important statement to expand 2D vector size. Then, we must go through every left &amp; right nodes and store it based on correspondingly depth. Finaly, let go back to original function, we must use reverse() to pass the answers.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</span><br><span class="line">        levelOrderBottom(root, <span class="number">0</span>, res);</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrderBottom</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(res.size() &lt;= depth) res.push_back(&#123;&#125;);</span><br><span class="line">        res[depth].push_back(root-&gt;val);</span><br><span class="line">        levelOrderBottom(root-&gt;left, depth + <span class="number">1</span>, res);</span><br><span class="line">        levelOrderBottom(root-&gt;right, depth + <span class="number">1</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>STL</tag>
        <tag>2D_Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Bubble Sort</title>
    <url>/posts/2b353b50/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Bubble Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>Compare with each elements in the range <code>[0: n]</code> and if <code>vector[i]</code> is bigger than <code>vector[i + 1]</code>, call swap().<br> <a id="more"></a></p>
<p><code>n</code> is the number of elements in vector and it will descending every loop. It means the biggest element moves to the right side.<br> And, there are one suitation that break the loop earily than expected. If no any elements call swap(), it represented all of the elements in vector are sorted.</p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(n)
</li>
<li>
Worst Case：Ο(n<sup>2</sup>)
</li>
<li>
Average Case：Ο(n<sup>2</sup>)
</li>
<p>P.S. If input is sorted, it still checks once without calling swap()</p>
<p><b>Space complexity: O(1)</b><br></p>
<p>Stable/Unstable: <b>Stable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; l, <span class="keyword">int</span>&amp; r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = l;</span><br><span class="line">  l = r;</span><br><span class="line">  r = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = v.size();</span><br><span class="line">  <span class="keyword">int</span> count = n;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span> &amp;&amp; count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">          <span class="keyword">if</span>(v[i] &gt; v[i + <span class="number">1</span>])&#123;</span><br><span class="line">              swap(v[i], v[i + <span class="number">1</span>]);</span><br><span class="line">              count ++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      --n;</span><br><span class="line">      print(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input = &#123;<span class="number">84</span>,<span class="number">17</span>,<span class="number">32</span>,<span class="number">53</span>,<span class="number">91</span>,<span class="number">13</span>,<span class="number">33</span>,<span class="number">61</span>,<span class="number">44</span>,<span class="number">43</span>&#125;;</span><br><span class="line">    bubbleSort(input);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Final answer:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(input);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Climbing Stairs - Solution/C++</title>
    <url>/posts/111b86b7/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>70. Climbing Stairs</b></font>
</p>
<h2 id="question">Question:</h2>
<p>You are climbing a staircase. It takes <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> steps to reach the top.</p>
<p>Each time you can either climb <span style="background-color:#F0F0F0"><font color=#808080>1</font></span> or <span style="background-color:#F0F0F0"><font color=#808080>2</font></span> steps. In how many distinct ways can you climb to the top? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 2<br> <b>Output:</b> 2<br> <b>Explanation:</b> There are two ways to climb to the top.<br> 1. 1 step + 1 step<br> 2. 2 steps<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 3<br> <b>Output:</b> 3<br> <b>Explanation:</b> There are three ways to climb to the top.<br> 1. 1 step + 1 step + 1 step<br> 2. 1 step + 2 steps<br> 3. 2 steps + 1 step<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 45</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> We must find the reqular pattern. As example mentioned, n = 2 -&gt; output: 2, n = 3 -&gt; output: 3.<br></p>
<p>You can derive n = 4, n = 5, ...ect. My answer is as below and you can get the reqular result:<br> n = 4 -&gt; Output: 5 // 2 + 3<br> n = 5 -&gt; Output: 8 // 3 + 5<br> n = 6 -&gt; Output: 13 // 5 + 8<br> n = 7 -&gt; Output: 21 // 8 + 13<br> (Results: 1 2 3 5 8 13 21 ...)<br></p>
<p>Isn't it like classical problem of <strong>Fibonacci Sequence</strong>? So, I directly think recursion can solve it. The approach is as below, but the recursion can't pass the submission, because it will show <u>Time Limit Exceeded</u> when n = 44.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> The strategy of second approach is an iterator. We can use for loop instead of recursion. Very simple coding as below and it can pass the submission.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> next = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">            result = prev + next;</span><br><span class="line">            prev = next;</span><br><span class="line">            next = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Fibonacci_Sequence</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Container With Most Water - Solution/C++</title>
    <url>/posts/fa15b897/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>11. Container With Most Water</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> non-negative integers <span style="background-color:#F0F0F0"><font color=#808080>a1, a2, ..., an</font></span> , where each represents a point at coordinate <span style="background-color:#F0F0F0"><font color=#808080>(i, ai)</font></span>. <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> vertical lines are drawn such that the two endpoints of the line <span style="background-color:#F0F0F0"><font color=#808080>i</font></span> is at <span style="background-color:#F0F0F0"><font color=#808080>(i, ai)</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>(i, 0)</font></span>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.<br> <a id="more"></a></p>
<p><b>Notice</b> that you may not slant the container.</p>
<h2 id="example">Example:</h2>
<img src="example.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> height = [1,8,6,2,5,4,8,3,7]<br> <b>Output:</b> 49<br> <b>Explanation:</b> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> height = [1,1]<br> <b>Output:</b> 1
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> height = [4,3,2,1,4]<br> <b>Output:</b> 16
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> height = [1,2,1]<br> <b>Output:</b> 2
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>n == height.length</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>2 &lt;= n &lt;= 10<sup>5</sup></font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= height[i] &lt;= 10<sup>4</sup></font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="verion-1"><u>Verion 1</u></h3>
<p>Idea:<br> Declare two variables, one is the leftmost of vertical lines and the other is the rightmost of vertical lines.<br> First, we can get the container with largest length of x-axis. Then, compare the leftmost line with the rightmost line for finding the smallest one. It will be moved close to the other. (It means moving to the next line and try to find the larger container)<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = height.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxContain = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> area = min(height[l], height[r]) * (r - l);</span><br><span class="line">            maxContain = max(maxContain, area);</span><br><span class="line">            <span class="keyword">if</span>(height[l] &lt; height[r])&#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxContain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Contains Duplicate II - Solution/C++</title>
    <url>/posts/81b7ce15/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>219. Contains Duplicate II</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array of integers and an integer <I>k</I>, find out whether there are two distinct indices <I>i</I> and <I>j</I> in the array such that <b>nums[i]</b> = <b>nums[j]</b> and the <b>absolute</b> difference between <I>i</I> and <I>j</I> is at most <I>k</I>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,2,3,1], k = 3<br> <b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,0,1,1], k = 1<br> <b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,2,3,1,2,3], k = 2<br> <b>Output:</b> false
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I use <b>unordered_map</b> to implement the approach.<br> Use find() to check nums[n] whether it's exist in container or not. If it cannot find the element, insert <code>nums[i]</code>as a key and <code>i</code> index as a value in container. If the element is found, check the distance between current index <code>i</code> and <code>it-&gt;second</code> (previous index), it should less than or equal to <code>k</code>.<br> Notice, if <code>i - it-&gt;second</code> is bigger than <code>k</code>, you must update <code>it-&gt;second</code> to current index <code>i</code> at 12 line.</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; record;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line">            it = record.find(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != record.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(i - it-&gt;second &lt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                it-&gt;second = i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                record.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(nums[i], i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This method is <b>unordered_set</b>. I have introduced <b>unordered_set</b> function at <a href="https://egbert-yu-ting.github.io/posts/a3617bc9/">Contains Duplicate</a>.<br> Hence, use <b>unordered_set</b> is more efficient than <code>unordered_map</code> of memory usage.<br> At 6 line, it always maintains latest <code>k</code> elements of nums, to ensure the distance isn't exceed <code>k</code> between i and j. If <code>i &gt; k</code>, use <code>erase(elements)</code> to remove the specific element in the container.<br></p>
<p>Also, if the element of index i has exist in the container already, it will return <b>false</b> at 8 line, then retun <b>true</b>.</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(min(n, k))</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; record;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; k) record.erase(nums[i - k - <span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!record.insert(nums[i]).second) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Contains Duplicate - Solution/C++</title>
    <url>/posts/5d51ed7c/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>217. Contains Duplicate</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array of integers, find if the array contains any duplicates.</p>
<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> [1,2,3,1]<br> <b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> [1,2,3,4]<br> <b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> [1,1,1,3,3,4,3,2,4,2]<br> <b>Output:</b> true
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> You can use <code>unordered_map</code> to store elements in container. At 7 line, use count() to return 1 or 0. If return 0, it means the nums[i] cannot find, so you can insert it. Otherwise, it means the nums[i] has exist already, return true.</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; record;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!record.count(nums[i]))&#123;</span><br><span class="line">                record.insert(<span class="built_in">make_pair</span>(nums[i], <span class="number">0</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> Each element is inserted only if it is not equivalent to any other element already in the container (elements in an unordered_set have unique values) by using <b>unordered_set</b>.<br> As mentioned above, an <b>unordered_set</b> can effectively increases the container size by the number of elements inserted.[1]<br></p>
At 6 line, it can refered to <code>pair&lt;iterator,bool&gt; insert ( const value_type&amp; val );</code>, the function returns a pair object:<br>
<ul>
<li>
First element: an iterator pointing either to the newly inserted element in the container or to the element whose key is equivalent.
</li>
<li>
Second element: a bool value indicating whether the element was successfully inserted or not.
</li>
</ul>
<p>So, if <code>record.insert(nums[i]).second</code> returns 0, it represented nums[i] has been inserted in container, return true.</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; record;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">            <span class="keyword">if</span>(!record.insert(nums[i]).second) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-3"><u>Version 3</u></h3>
<p>Idea:<br> An optiaml and efficient approach by using sorting.<br> At first, use std::sort() to get an array in order. Then, check current element <code>i</code> and next element <code>i+1</code> whether they are the same or not. If they are the same, return true, otherwise, return false until for loop is end.<br></p>
<p>What is std::sort()?<br> The algorithm used by sort() is <b>IntroSort</b>. Introsort being a <b>hybrid sorting algorithm</b> uses three sorting algorithm to minimise the running time, <u>Quicksort</u>, <u>Heapsort</u> and <u>Insertion Sort</u>.[2]<br></p>
<p><b>Time complexity: O(nlogn)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Reference:<br> [1] https://www.cplusplus.com/reference/unordered_set/unordered_set/insert/<br> [2] https://www.geeksforgeeks.org/internal-details-of-stdsort-in-c/</p>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
        <tag>Unordered_set(STL)</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Convert Sorted Array to Binary Search Tree - Solution/C++</title>
    <url>/posts/17bf1818/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>108. Convert Sorted Array to Binary Search Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
Given the sorted array: [-10,-3,0,5,9],<br> <br> One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:<br>     0<br>    / \<br>   -3  9<br>   /  /<br>  -10 5
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> At first, let we understand "What is Height Balanced Binary Search Tree(BST)". You inquire/insert/delete a node of the tree, the time of these actions is proportional to height of the tree. It must keeps its height in the face of arbitrary item (actions), it's call a height balane (or self balancing) BST.<br></p>
<p>Back to this problem, the strategy is "Binary Search". At 22 line, the recursive function always satisfy the establishment of the left nodes. On the contrary, it always satisfy the establishment of hte right nodes at 23 line. Using the binary search will through every nodes and get a sequential array.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sortedArrayToBST(nums, <span class="number">0</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">        TreeNode* res = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        res-&gt;left = sortedArrayToBST(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        res-&gt;right = sortedArrayToBST(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
Each steps info.:
<p style="background-color:#F0F0F0">
left:0, right:4, mid's value:0<br> left:0, right:1, mid's value:-10<br> left:0, right:-1, return NULL<br> left:1, right:1, mid's value:-3<br> left:1, right:0, return NULL<br> left:2, right:1, return NULL<br> left:3, right:4, mid's value:5<br> left:3, right:2, return NULL<br> left:4, right:4, mid's value:9<br> left:4, right:3, return NULL<br> left:5, right:4, return NULL<br>
<p style="background-color:#F0F0F0">
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>TreeNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Count Primes - Solution/C++</title>
    <url>/posts/bcde18a6/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>204. Count Primes</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Count the number of prime numbers less than a non-negative number, <span style="background-color:#F0F0F0"><font color=#808080>n</span></font>.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 10<br> <b>Output:</b> 4<br> <b>Explanation:</b> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
</p>
<a id="more"></a>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 0<br> <b>Output:</b> 0
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 1<br> <b>Output:</b> 0
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= n &lt;= 5 * 10<sup>6</sup></font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> If you looked at source code, you must feel so easy.<br> At first, give a statement if n is smaller than 2, return 0.<br></p>
<p>Declare a vector that the size is <code>n</code>, variable of <code>count</code> as output and variable of <code>i</code> as vector's index.<br></p>
<p><code>i</code> starts at 2, if <b>vector[i]</b> is 0, <code>count</code> will add 1. Then, get all multiples of the value of <b>vector[i]</b> but smaller than <code>n</code>, assign 1 to those position at vector.<br></p>
<p><I>Notice: Assign 1 to <b>vector[multiples of i]</b> that means the value is not prime number</I><br> So, if the value of <code>vector[i]</code> is 0, it's must prime number.</p>
<p>The demonstration is shown as below:<br> <img src="prime%20number.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">number</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j*i &lt; n; j++)</span><br><span class="line">                    number[j*i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Count and Say - Solution/C++</title>
    <url>/posts/e0d9ee0a/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>38. Count and Say</b></font>
</p>
<h2 id="question">Question:</h2>
The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula: <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>countAndSay(1) = "1"</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>countAndSay(n)</font></span> is the way you would "say" the digit string from <span style="background-color:#F0F0F0"><font color=#808080>countAndSay(n-1)</font></span>, which is then converted into a different digit string.
</li>
<p></strong> To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying. <a id="more"></a> For example, the saying and conversion for digit string "3322251": <img src="38_example.png" />Given a positive integer <span style="background-color:#F0F0F0"><font color=#808080>n</font></span>, return <em>the</em> <span style="background-color:#F0F0F0"><font color=#808080>n^th</font></span> <em>term of the count-and-say sequence</em>.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 1<br><b>Output:</b> "1"<br><b>Explanation:</b> This is the base case.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 4<br> <b>Output:</b> "1211"<br><b>Explanation:</b><br>countAndSay(1) = "1"<br>countAndSay(2) = say "1" = one 1 = "11"<br>countAndSay(3) = say "11" = two 1's = "21"<br>countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 30</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is a sticky problem for me, my methods always got Time Limit Exceeded. I had no choice but to refer to <a href="https://zxi.mytechroad.com/blog/simulation/leetcode-38-count-and-say/">Huahua's Tech Road</a>.<br></p>
<p>Declare a string consists 1 character, if n = 1, return a string. <code>record</code> as a index, it starts from 0. We must check <code>res[record] != res[j]</code>, use <code>j - count</code> we can get number of the same characters. Finally, use temporary string to store the results.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> record = <span class="number">0</span>, len = res.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res[record] != res[j] || j == len)&#123;</span><br><span class="line">                    <span class="keyword">int</span> count = j - record;</span><br><span class="line">                    temp += <span class="string">&#x27;0&#x27;</span> + count;</span><br><span class="line">                    temp += res[record];</span><br><span class="line">                    record = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Error message: Please tell me who you are. Run git config --global...</title>
    <url>/posts/278f103a/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Command line: "hexo d" and you got error message: Please tell me who you are.</b></font>
</p>
<h3 id="full-error-message-info">Full error message info:</h3>
<p><font color=#FF0000>Please tell me who you are.</p>
<p>Run</p>
<p>git config --global user.email “you@example.com”<br> git config --global user.name “Your Name”<br></p>
<p>to set your account’s default identity.<br> Omit --global to set the identity only in this repository.<br></p>
fatal: unable to auto-detect email address (got ...)<br> error: src refspec HEAD does not match any.<br> error: failed to push some refs to(your ...github.io)</font><br> <a id="more"></a>
<hr style="border-top: dotted 1px;" />
<p>When I ran "hexo d" command, the deployment was stuck! The reason was I updated my mac OS a few days age. Now, the system can't distinguish your indentity.<br> So, the solution can solve it:</p>
<h3 id="solution">Solution:</h3>
<p>Input commands:<br></p>
<ol type="1">
<li><p>git config --global user.email "email"<br> //Your github email address(https://username.github.io)<br></p></li>
<li><p>git config --global user.name "username"<br> //(your nickname、github's username or anyone you name it) only English!</p></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Excel Sheet Column Number - Solution/C++</title>
    <url>/posts/10e6d46c/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>171. Excel Sheet Column Number</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
For example:
<p style="background-color:#F0F0F0">
  A -&gt; 1<br>   B -&gt; 2<br>   C -&gt; 3<br>   ...<br>   Z -&gt; 26<br>   AA -&gt; 27<br>   AB -&gt; 28<br>   ...
</p>
<a id="more"></a>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> "A"<br> <b>Output:</b> 1
</p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> "AB"<br> <b>Output:</b> 28<br></p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> "ZY"<br> <b>Output:</b> 701<br></p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 7</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists only of uppercase English letters.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> is between "A" and "FXSHRXW".
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The type of input is string, so we need to split it into characters, and convert character to demical by using ASCII talbe.<br></p>
<p>Each digit will times 26 to the power of <code>(len - i - 1)</code>.<br> Why is <code>(len - i - 1)</code> means? If input is "AB" (len=2), we get "A" character first, and "A" is tens digit, so use the fourmula (2 - 0 - 1) the power is 1,then you can get 26. <I>pow(26, 1) * (65 - 64)</I><br> Furthermore, the next character is "B", the power is 0, so you get 2. <I>pow(26, 0) * (66-64)</I><br> Hence, the results is 28 (26+2).</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            res += <span class="built_in">pow</span>(<span class="number">26</span>, len - i - <span class="number">1</span>) * ((<span class="keyword">int</span>)s[i] - <span class="number">64</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> The runtime of Version 2 will get more faster than Version 1. Because it's not use pow() function.<br></p>
<p>A logic likes : (previous_sum * 26 + current_sum), so the sum times 26 for each loop (= each digit)</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ln = s.length();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;ln;i++)&#123;</span><br><span class="line">            sum = sum * <span class="number">26</span> + (<span class="keyword">int</span>(s[i])<span class="number">-64</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Excel Sheet column Title - Solution/C++</title>
    <url>/posts/961e4f43/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>168. Excel Sheet Column Title</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
For example:
<p style="background-color:#F0F0F0">
  1 -&gt; A<br>   2 -&gt; B<br>   3 -&gt; C<br>   ...<br>   26 -&gt; Z<br>   27 -&gt; AA<br>   28 -&gt; AB <br>   ...
</p>
<a id="more"></a>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> 1<br> <b>Output:</b> "A"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> 28<br> <b>Output:</b> "AB"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> 701<br> <b>Output:</b> "ZY"
</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> According to the ASCII talbe, if you want to get A~Z character, you need 65-90 demical number to convert it.<br></p>
<p>If the input is <code>n = 26</code>, you use <code>%26</code> to get the remainder is zero, then it is converted to character you will attain <code>'A'</code>, but a correct answer is <code>'Z'</code>. So, <strong>n minus 1</strong> is important before you get the remainder at 6 line.<br></p>
<p>Next step, you can convert int to character directly. <strong>Notice:</strong> <code>+65</code> is same as <code>'A'</code>. <br> At 8 line, <code>(n - 1)/26</code> as a carry condition every time until n will be 0.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> remainder = (n - <span class="number">1</span>) % <span class="number">26</span>;</span><br><span class="line">            res = (<span class="keyword">char</span>)(remainder + <span class="number">65</span>) + res;</span><br><span class="line">            n = (n - <span class="number">1</span>)/<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Exponential Search Algorithm</title>
    <url>/posts/85970ec4/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Exponential Search</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a sorted array, and an element x to be searched, find position of x in the array. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> arr[] = {10, 20, 40, 45, 55}<br>    x = 45<br> <b>Output:</b> Element found at index 3
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> arr[] = {10, 15, 25, 45, 55}<br>    x = 15<br> <b>Output:</b> Element found at index 1
</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Based on the iterative approach of binary search, we can use recursive function to implement it easily at 7 - 19 line.<br></p>
<p>Exponential search is similar with binary search, use the exponential of 2 as the search range is only different part at first.<br> The detailed demonstration is shown as below: <img src="exponentialSearch_example.png" /></p>
<p>Let explain how to implement exponential search, it involves two steps:<br> 1. Find the range where element is possible exist. 2. Do binary search in above found range.</p>
<p>At 22 line, index 0 of array should be checked if value is equal to target.<br> At 24 line, delcare integer variable as searchIndex (range), it initialized to 1.<br> At 25 line, searchIndex variable is the exponential growth based on 2. so the index range will be 1, 2, 4, 8, 16 ... etc. If <code>arr[searchIndex] &lt; target</code>, it means the target may be exist between <b>arr[searchIndex/2] and arr[searchIndex]</b>.<br></p>
<p>There will be an expected cases that is searchIndex is bigger than the lenght of array, so the tail index is from <code>min(searchIndex, n)</code> before calling binarySearch(). <I>P.S. n is index at the end of array and head index is searchIndex/2</I>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> target, <span class="keyword">int</span> head, <span class="keyword">int</span> tail)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head &lt;= tail)&#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (head + tail) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[middle]== target) <span class="keyword">return</span> middle;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(arr[middle] &gt; target)&#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, target, head, middle - <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, target, middle + <span class="number">1</span>, tail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exponentialSearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>] == target) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = arr.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> searchIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(searchIndex &lt; n &amp;&amp; arr[searchIndex] &lt; target) searchIndex*= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr, target, searchIndex/<span class="number">2</span>, min(searchIndex, n));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">int</span> res = exponentialSearch(arr, x);</span><br><span class="line">    (res == <span class="number">-1</span>)?<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Input is not exist in array&quot;</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; arr[res];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SearchAlgorithm</category>
      </categories>
      <tags>
        <tag>Searching</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Factorial Trailing Zeroes - Solution/C++</title>
    <url>/posts/b0d56b8b/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>172. Factorial Trailing Zeroes</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an integer <span style="background-color:#F0F0F0"><font color=#808080>n</font></span>, <I>return the number of trailing zeroes in <span style="background-color:#F0F0F0"><font color=#808080>n!</font></span></I>.</p>
<p><b>Follow up:</b> Could you write a solution that works in logarithmic time complexity? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> n = 3<br> <b>Output:</b> 0<br> <b>Explanation:</b> 3! = 6, no trailing zero.<br></p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> n = 5<br> <b>Output:</b> 1<br> <b>Explanation:</b> 5! = 120, one trailing zero.<br></p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> n = 0<br> <b>Output:</b> 0<br></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I give some examples of different n:<br> if n = 5, 5! = 12<b>0</b><br> if n = 9, 9! = 36288<b>0</b><br> if n = 10, 10! = 36288<b>00</b><br> if n = 15, 15! = 1307674368<b>000</b><br> if n = 20, 20! = 243290200817664<b>0000</b><br> if n = 25, 25! = 15511210043330985984<b>000000</b><br></p>
<p>Above the examples, we can get some rules:<br></p>
<ol type="1">
<li>tailling zeros means factor of 10 in the factorial</li>
<li>finding tailling zeros means counting the number of factor of 5 for the factorial of n</li>
<li>dividing n to get the additional number of factor of 5s</li>
</ol>
<p>Notice: At n = 25 case, 5 times 5 is 25 (two of 5s),so it has 5 + 1 of 5s.<br> Finally, we need to divide n to count the number of additional factors of 5. <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            n /= <span class="number">5</span>;</span><br><span class="line">            res += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
  </entry>
  <entry>
    <title>[Interview question] Find second largest element - Solution/C++</title>
    <url>/posts/16153cc7/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Let coding interview become easy - Find second largest element</b></font>
</p>
<p>Maybe you will face it problem when you have an interview for a job with Tech. company.<br> The problem is "How to find second largest element?", it seems very easy to get result, but you must propose an efficient approach. <a id="more"></a></p>
<p>If there is a vector that consists <code>&#123;2, 3, 4, 1, 7, 6, 5&#125;</code>, I delcare two variables as first largest element and second largest element. I initialize variables to INT_MIN. At 13 line, <code>if(input[i]&gt;first)</code> is true, <code>input[i]</code> is largest element and pass it to <code>first</code> after storing a value of <code>first</code> by <code>second</code>. Otherwise, compare <code>input[i]</code> with <code>second</code>, it checks a current value whether it bigger than <code>second</code> or not.</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt; findLargest(vector&lt;int&gt; input)&#123;</span><br><span class="line">    <span class="keyword">int</span> first = INT_MIN;</span><br><span class="line">    <span class="keyword">int</span> second = INT_MIN;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(input[i]&gt;first)&#123;</span><br><span class="line">            second = first;</span><br><span class="line">            first = input[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(input[i] &gt; second)&#123;</span><br><span class="line">            second = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(first, second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = findLargest(arr);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The first largest element=&quot;</span> &lt;&lt; ans.first &lt;&lt; <span class="string">&quot;, the second largest element=&quot;</span> &lt;&lt; ans.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CodeInterview</category>
      </categories>
      <tags>
        <tag>Pair</tag>
        <tag>INT_MIN</tag>
      </tags>
  </entry>
  <entry>
    <title>[Step by Step] How to install Google Chrome on Ubuntu 16.04</title>
    <url>/posts/65af7d45/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Tutorial - Google Chrome Web Browser in Ubuntu</b></font>
</p>
<p>If you are working on the Ubuntu environment and not used to using FireFox browser, Google Chrome maybe is your first choice.<br> Here, I shared my experience of installing Google Chrome on Ubuntu 16.04. You can implement it rapidly and easily. <a id="more"></a></p>
<ul>
<li><strong>Step 1.</strong> Download the Google Chrome to your Ubuntu system <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 2.</strong> Install the Google Chrome <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 3.</strong> Update the Google Chrome and you can run it. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cat /etc/apt/sources.list.d/google-chrome.list</span><br></pre></td></tr></table></figure> <img src="GoogleChromeInstallation_1.png" />
<hr style="border-top: dotted 1px;" /></li>
</ul>
<p>When open the application, if you meet <font color=#FF0000>"Your connection is not secure"</font> message or result as below: <img src="GoogleChromeInstallation_2.png" /></p>
<p><strong>Solution.</strong> Installation of Network Security Service libraries package: <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libnss3-1d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Google_Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Add Binary - Solution/C++</title>
    <url>/posts/e6133085/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>67. Add Binary</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given two binary strings <span style="background-color:#F0F0F0"><font color=#808080>a</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>b</font></span>, return <em>their sum as a binary string</em>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> a = "11", b = "1"<br><b>Output:</b> "100"<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> a = "1010", b = "1011"<br><b>Output:</b> "10101"<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= a.length, b.length &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>a</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>b</font></span> consist only of <span style="background-color:#F0F0F0"><font color=#808080>'0'</font></span> or <span style="background-color:#F0F0F0"><font color=#808080>'1'</font></span> characters.
</li>
</strong> <strong>
<li>
Each string does not contain leading zeros except for the zero itself.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I want to post my method originally, but the method is very inefficient (add two elements of string as <a href="https://egbert-yu-ting.github.io/posts/acf6f11e/">Plus One</a>, do the same thing for each bits.)<br></p>
<p>So, I refered to <a href="https://zxi.mytechroad.com/blog/math/leetcode-67-add-binary/">Huahua's Tech Road</a>. Wow, it's a concise approach and coding, use only 1 while() to process.<br></p>
<p>This part, we can learn how to convert char to integer、how to convert integer to char、calculate a value of carry and output in reverse.<br></p>
At 9 line, use <code>conditional ? Ture:False</code> to implement one line of if-else statement.<br> At 12 line, it is a right shift operator.
<p style="background-color:#F0F0F0">
int a[i] = 1; // binary: 00000001<br> int b[j] = 1; // binary: 00000001<br> int sum = a[i] + b[j] = 2 // binary: 00000010<br> int carry = sum &gt;&gt; 1; // binary: 00000001 (right shifts the bits of the number accordingly)
</p>
<p>Then, ues <span style="background-color:#F0F0F0">- '0'</span> to convert char to int as <span style="background-color:#F0F0F0">a[i--] - '0'</span>, because character <span style="background-color:#F0F0F0">'0'</span> means 48.<br></p>
At 13 line, we use logical AND <span style="background-color:#F0F0F0"><font color=#808080>&amp;</font></span> to get the result of 0 or 1.<br> Because there are three different value of sum, we need to convert integer to bit, it's shown as the following:<br>
<p style="background-color:#F0F0F0">
if sum = 0 // binary: 00000000<br>  (sum &amp; 1) = 0<br> if sum = 2 // binary: 00000010<br>  (sum &amp; 1) = 1<br> if sum = 3 // binary: 00000011<br>  (sum &amp; 1) = 1
</p>
<p>Then, we can use <span style="background-color:#F0F0F0">+ '0'</span> to convert int to char.<br> Finally, the variable of res is our answer, but the content is in reverse, so we need to output the last as head, <b>rbegin()</b> and <b>rend()</b> are built-in functions in C++ STL. rbegin() can return a reverse iterator pointing to the last char. rend() can return a reverse iterator pointing to the theoretical element preceding the first char of the string.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = b.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = (i &gt;= <span class="number">0</span> ? a[i--] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>) +</span><br><span class="line">                      (j &gt;= <span class="number">0</span> ? b[j--] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>) +</span><br><span class="line">                      carry;</span><br><span class="line">            carry = sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            res += <span class="string">&#x27;0&#x27;</span> + (sum &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry) res += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;(res.rbegin()), (res.rend())&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
        <tag>Logical_Operators</tag>
        <tag>Shift_Operators</tag>
        <tag>Reverse_iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - HeapSort</title>
    <url>/posts/73b8e6ad/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Heap Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>Heap is a complete binary tree. And, heap feature is that parent node must bigger than its child nodes. It also calls max-heap.<br> <a id="more"></a></p>
<p>So, heapify() function ensures the max-heap principle. Get the index of left/right child easily by using the argument <code>i</code> (parent node). Then, find the child nodes which is bigger than their parent node and call swap().<br></p>
<p>If all of the elements are no heap priciple, heapify() function is not enough handling, so we need to write buildheap() function at the begining.<br> Buildheap() function scans all of the elements between parent node and child nodes and forms a max-heap.<br></p>
<p>Finally, we need to implement heap sort. We can always pop the root node because it is a largest element. Hence, use <code>swap(arr, 0, i)</code> to put root node to the tail of array. <code>i</code> is the the size of arrary - 1 and it will descending. Then, call heapify() function to make larger element moved to root and call swap() again until <code>i</code> is equal to zero.</p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(nlogn)
</li>
<li>
Worst Case：Ο(nlogn)
</li>
<li>
Average Case：Ο(nlogn)
</li>
<p><b>Space complexity: O(1)</b><br></p>
<p>Stable/Unstable: <b>Stable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> c1 = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c2 = i * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max = i;</span><br><span class="line">    <span class="keyword">if</span>(c1 &lt; n &amp;&amp; arr[c1] &gt; arr[max])&#123;</span><br><span class="line">        max = c1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c2 &lt; n &amp;&amp; arr[c2] &gt; arr[max])&#123;</span><br><span class="line">        max = c2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max != i)&#123;</span><br><span class="line">        swap(arr, max, i);</span><br><span class="line">        heapify(arr, n, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildheap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> parent = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = parent; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">        heapify(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    buildheap(arr, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Size of array:&quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    heapsort(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>How arrays are passed to functions in C/C++</title>
    <url>/posts/47c634b1/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>How arrays are passed to function | Basic and Important</b></font>
</p>
<h2 id="introduction">Introduction:</h2>
<a id="more"></a>
<h2 id="source-code">Source code</h2>
<p>Idea:<br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Note that arr[] for fun is just a pointer even if square</span></span><br><span class="line"><span class="comment">// brackets are used</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> arr[])</span>  <span class="comment">// SAME AS void fun(int *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">   <span class="comment">//printf(&quot;\nArray size inside fun() is %d&quot;, n);</span></span><br><span class="line">   <span class="comment">//printf(&quot;\n - The first value is %d&quot;, sizeof(arr));</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;nArray size inside fun() is &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Driver program</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">   <span class="comment">//printf(&quot;Array size inside main() is %d&quot;, n);</span></span><br><span class="line">   <span class="comment">//printf(&quot;\n - The first value is %d&quot;, sizeof(arr));</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;nArray size inside main() is &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   fun(arr);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++_Concept</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Find the Duplicate Number - Solution/C++</title>
    <url>/posts/36325234/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>287. Find the Duplicate Number</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array of integers <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> containing <span style="background-color:#F0F0F0"><font color=#808080>n + 1</font></span> integers where each integer is in the range <span style="background-color:#F0F0F0"><font color=#808080>[1, n]</font></span> inclusive.</p>
<p>There is only <b>one repeated number</b> in <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span>, return </u>this repeated number</u>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,3,4,2,2]<br> <b>Output:</b> 2
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [3,1,3,4,2]<br> <b>Output:</b> 3
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,1]<br> <b>Output:</b> 1
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,1]<br> <b>Output:</b> 1
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>2 &lt;= n &lt;= 3 * 10<sup>4</sup></font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums.length == n + 1</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums[i] &lt;= n</font></span>
</li>
</strong> <strong>
<li>
All the integers in <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> appear only once except for precisely one integer which appears two or more times.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> My intuition told me that using <code>unordered_map</code> is a very simple method, however, I knew it's not the question focus.<br></p>
<p>But, I still offer the <code>unordered_map</code> solution as below.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; record;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(record.count(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                record[nums[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It's also a very simple method, you sort the all elements before processing. Then, compare <code>nums[i]</code> with <code>nums[i - 1]</code> you will get the answer easily.<br></p>
<p><b>Time complexity: O(nlogn)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() <span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[j])&#123;</span><br><span class="line">                res = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-3"><u>Version 3</u></h3>
<p>Idea:<br> The input of vector has duplicate numbers that means those elements can be formed a cycle. And, how to find a duplicate number in a cycle? You can review <a href="https://egbert-yu-ting.github.io/posts/44e8eae/?highlight=slow">141. Linked List Cycle</a>. The answer is <b>Fast &amp; Slow Pointers</b><br></p>
<p>At first, delcare two variable as slow and fast. Fast pointer moves 2 steps once and Slow pointer moves 1 steps until these pointers are on the same value.<br></p>
<p>Then, initial one of pointers to zero, it means starting at the begining.<br></p>
<p>Finally, two of pointers move 1 step equally and they will stop at the duplicate number.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            <span class="keyword">if</span>(slow == fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fast = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-4"><u>Version 4</u></h3>
<p>Idea:<br> As mentioned in question, we know each elements is in the range <code>[1:n]</code> and the vector is containing <code>n + 1</code>. So, we can use <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle">Pigeonhole principle</a>.<br></p>
<p>Using binary search in the range <code>[1:n]</code>. Declare two variable for getting the <code>mid</code>. One is the left index that starts at 1, the other is right index that starts at n - 1.<br></p>
<p>For each while() processing, use a counter to count how many elements is less than or equal to <code>mid</code>.<br></p>
<p>If a counter is less than or equal to <code>mid</code>, it's represented a duplicate number on the right side, so move <code>low</code> index to <code>mid + 1</code>.<br></p>
<p>On the contrary, if a counter is bigger than <code>mid</code>, move <code>high</code> index to <code>mid</code>.<br></p>
<p>Hence, the search space will be narrowed down.</p>
<p><b>Time complexity: O(nlogn)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">1</span>, high = n - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> &amp;element:nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(element &lt;= mid)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(count &lt;= mid)&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road]Implement Queue using Stacks - Solution/C++</title>
    <url>/posts/fb82e5ef/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>225. Implement Queue using Stacks</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<span style="background-color:#F0F0F0"><font color=#808080>push</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>peek</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span>, and <span style="background-color:#F0F0F0"><font color=#808080>empty</font><span>). <a id="more"></a></p>
Implement the <span style="background-color:#F0F0F0"><font color=#808080>MyQueue</font></span> class:
<li>
<span style="background-color:#F0F0F0"><font color=#808080>void push(int x)</font></span> Pushes element x to the back of the queue.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>int pop()</font></span> Removes the element from the front of the queue and returns it.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>int peek()</font></span> Returns the element at the front of the queue.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>boolean empty()</font></span> Returns true if the queue is empty, <span style="background-color:#F0F0F0"><font color=#808080>false</font></span> otherwise.
</li>
<b>Notes:</b><br>
<li>
You must use <b>only</b> standard operations of a stack, which means only <span style="background-color:#F0F0F0"><font color=#808080>push to top</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>peek/pop from top</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>size,</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>is empty</font></sapn> operations are valid.
</li>
<li>
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
</li>
<p><br> <b>Follow-up:</b> Can you implement the queue such that each operation is <span style="background-color:#F0F0F0"><font color=#808080><b>amortized O(1)</b></font></span> time complexity? In other words, performing <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> operations will take overall <span style="background-color:#F0F0F0"><font color=#808080>O(n)</font></span> time even if one of those operations may take longer.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b><br> ["MyQueue", "push", "push", "peek", "pop", "empty"]<br> [[], [1], [2], [], [], []]<br> <b>Output</b><br> [null, null, null, 1, 1, false]<br> <br> <b>Explanation</b><br> MyQueue myQueue = new MyQueue();<br> myQueue.push(1); // queue is: [1]<br> myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)<br> myQueue.peek(); // return 1<br> myQueue.pop(); // return 1, queue is [2]<br> myQueue.empty(); // return false
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= x &lt;= 9</font></span>
</li>
</strong> <strong>
<li>
At most <span style="background-color:#F0F0F0"><font color=#808080>100</font></span> calls will be made to <span style="background-color:#F0F0F0"><font color=#808080>push</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>peek</font></span>, and <span style="background-color:#F0F0F0"><font color=#808080>empty</font></span>.
</li>
</strong> <strong>
<li>
All the calls to <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>peek</font></span> are valid.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The frist method uses push() function to implement Queue.<br> Use two Stacks, if <code>s1</code> is emtpy, push <code>x</code> directly. If <code>s1</code> is not empty, move all of elements in <code>s1</code> to <code>s2</code>, and push <code>x</code> into the emtpy <code>s1</code>, finally, move all of elements in <code>s2</code> back to <code>s1</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    MyQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.empty())&#123;</span><br><span class="line">            s1.push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.empty())&#123;</span><br><span class="line">                s2.push(s1.top());</span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            s1.push(x);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!s2.empty())&#123;</span><br><span class="line">                s1.push(s2.top());</span><br><span class="line">                s2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = s1.top();</span><br><span class="line">        s1.pop();</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.empty();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> The second method uses pop() function to implement Queue.<br> In <code>pop()</code> and <code>peek()</code>, always returns the element from <code>s2</code>. So, In the functions, it need to check whether <code>s2</code> is empty or not. If <code>s2</code> is empty, move all of elements in <code>s1</code> to <code>s2</code>.<br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    MyQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.empty()) moved();</span><br><span class="line">        <span class="keyword">int</span> temp = s2.top();</span><br><span class="line">        s2.pop();</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.empty()) moved();</span><br><span class="line">        <span class="keyword">return</span> s2.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.empty() &amp;&amp; s2.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moved</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s1.empty())&#123;</span><br><span class="line">            s2.push(s1.top());</span><br><span class="line">            s1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Implement Stack using Queues - Solution/C++</title>
    <url>/posts/1e6556c3/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>225. Implement Stack using Queues</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (<span style="background-color:#F0F0F0"><font color=#808080>push</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>top</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span>, and <span style="background-color:#F0F0F0"><font color=#808080>empty</font></span>). <a id="more"></a></p>
Implement the <span style="background-color:#F0F0F0"><font color=#808080>MyStack</font></span> class:<br>
<ul>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>void push(int x)</font></span> Pushes element x to the top of the stack.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>int pop()</font></span> Removes the element on the top of the stack and returns it.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>int top()</font></span> Returns the element on the top of the stack.
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>boolean empty()</font></span> Returns <span style="background-color:#F0F0F0"><font color=#808080>true</font></span> if the stack is empty, <span style="background-color:#F0F0F0"><font color=#808080>false</font></span> otherwise.
</li>
</ul>
Notes:
<ul>
<li>
You must use <b>only</b> standard operations of a queue, which means only <span style="background-color:#F0F0F0"><font color=#808080>push to back</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>peek/pop from front</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>size</font></span>, and <span style="background-color:#F0F0F0"><font color=#808080>is empty</font></span> operations are valid.
</li>
<li>
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.
</li>
</ul>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b><br> ["MyStack", "push", "push", "top", "pop", "empty"]<br> [[], [1], [2], [], [], []]<br> <b>Output</b> [null, null, null, 2, 2, false]<br> <br> <b>Explanation</b><br> MyStack myStack = new MyStack();<br> myStack.push(1);<br> myStack.push(2);<br> myStack.top(); // return 2<br> myStack.pop(); // return 2<br> myStack.empty(); // return False
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= x &lt;= 9</font></span>
</li>
</strong> <strong>
<li>
At most <span style="background-color:#F0F0F0"><font color=#808080>100</font></span> calls will be made to <span style="background-color:#F0F0F0"><font color=#808080>push</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>top</font></span>, and <span style="background-color:#F0F0F0"><font color=#808080>empty</font></span>.
</li>
</strong> <strong>
<li>
All the calls to <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span> and top are valid.
</li>
<p></strong></p>
<p><b>Follow-up:</b> Can you implement the stack such that each operation is <span style="background-color:#F0F0F0"><font color=#808080><a href="https://en.wikipedia.org/wiki/Amortized_analysis">amortized</a></font></span> <span style="background-color:#F0F0F0"><font color=#808080>O(1)</font></span> time complexity? In other words, performing <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> operations will take overall <span style="background-color:#F0F0F0"><font color=#808080>O(n)</font></span> time even if one of those operations may take longer. You can use more than two queues.</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea: It's use one queue method.<be> At first, you must understand queue principle, it follows a particular order to do Enqueue() and Dequeue(), it calls "First in First out", an illustration is shown in below:<br> <img src="queue_structure.png" /></p>
<p>Hence, let's back to push() implementation at this question. Call <code>push()</code> to insert element in queue. Then, use loop to get the front's element and reinsert it into queue, and remove the front's element until the new element is at the front. So, the range of loop is from <code>i = 1</code> to <code>queue size</code>.<br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    MyStack() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.push(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; q.size(); i++)&#123;</span><br><span class="line">            q.push(q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.front();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.empty();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It is use two queues and avoid using size()<br> q2 always stores a new elements. The elements in q1 are given by swap().<br> Before doing swap(), it should check wheather q1 is empty or not. If not, you should get the front's element at q1 and insert it into q2, and remove the front's element from q1.<br> The demonstration is shown as below:<br> <img src="two_queues.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    MyStack() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q2.push(x);</span><br><span class="line">        <span class="keyword">while</span>(!q1.empty())&#123;</span><br><span class="line">            q2.push(q1.front());</span><br><span class="line">            q1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        q1.swap(q2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = q1.front();</span><br><span class="line">        q1.pop();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.front();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.empty();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Implement strStr() - Solution/C++</title>
    <url>/posts/9bc77297/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>28. Implement strStr()</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Implement <font color=#808080>strStr()</font>.</p>
<p>Return the index of the first occurrence of needle in haystack, or <font color=#808080>-1</font> if <font color=#808080>needle</font> is not part of <font color=#808080>haystack</font>.<br> <strong>Clarification:</strong> What should we return when <font color=#808080>needle</font> is an empty string? This is a great question to ask during an interview.</p>
<p>For the purpose of this problem, we will return 0 when <font color=#808080>needle</font> is an empty string. This is consistent to C's <font color=#808080>strstr()</font> and Java's <font color=#808080>indexOf()</font>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> haystack = "hello", needle = "ll"<br><b>Output:</b> 2<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> haystack = "aaaaa", needle = "bba"<br><b>Output:</b> -1<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> haystack = "", needle = ""<br><b>Output:</b> 0<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= haystack.length, needle.length &lt;= 5 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>haystack</font><span> and <span style="background-color:#F0F0F0"><font color=#808080>needle</font></span> consist of only lower-case English characters.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> My bad method got Time Limit Exceeded. Because I used two loop to check each characters of string, record the index by 2 variables if both of characters are equal.<br></p>
<p>I racked my brains for good solution without using substr(). Finally, I got up and went to online to find answer. I refered to <a href="https://zxi.mytechroad.com/blog/string/leetcode-28-implement-strstr/">Huahua's Tech Road</a>. The loop repeats <code>haystack.length() - needle.length()</code> times, it can reduce computing time. Use the length of needle to match haystack, if index of j is equal to needle.length(), return index of i.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack == needle || !needle.length()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> h = haystack.length();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = needle.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= h - n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; haystack[i+j] == needle[j]) j++;</span><br><span class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Intersection of Two Linked Lists - Solution/C++</title>
    <url>/posts/a44c9fee/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>160. Intersection of Two Linked Lists</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.<br></p>
<p>For example, the following two linked lists: <a id="more"></a> <img src="example_1.png" /> begin to intersect at node c1.</p>
<h2 id="example">Example:</h2>
<img src="example_2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3<br> <b>Output:</b> Reference of the node with value = 8<br> <b>Input Explanation:</b> The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
</p>
<img src="example_3.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br> <b>Output:</b> Reference of the node with value = 2<br> <b>Input Explanation:</b> The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
</p>
<img src="example_4.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br> <b>Output:</b> null<br> <b>Input Explanation:</b> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.<br> <b>Explanation:</b> The two lists do not intersect, so return null.
</p>
<strong>Notes:</strong> <strong>
<li>
If the two linked lists have no intersection at all, return <span style="background-color:#F0F0F0"><font color=#808080>null</font></span>.
</li>
</strong> <strong>
<li>
The linked lists must retain their original structure after the function returns.
</li>
</strong> <strong>
<li>
You may assume there are no cycles anywhere in the entire linked structure.
</li>
</strong> <strong>
<li>
Each value on each linked list is in the range <span style="background-color:#F0F0F0"><font color=#808080>[1, 10^9]</font></span>.
</li>
</strong> <strong>
<li>
Your code should preferably run in O(n) time and use only O(1) memory.
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The length of two List may be different, so you should count the length of <code>headA</code> and <code>headB</code> at 17-25 line.<br> <strong>Notice:</strong> You must declare the pointer of ListNode as <code>headA</code> &amp; <code>headB</code>.<br></p>
After counting, you should make those Lists moved to the same position, as below: <img src="AbiggerB.png" />
<p align="center">
(a.) The count of headA is bigger than headB
</p>
<img src="AsmallerB.png" />
<p align="center">
(b.) The count of headA is smaller than headB
</p>
<p>At 39-42 line, it starts comparing each value of List, if find the same reference(address), return headA(or headB).<br> However, if there is no intersection(can not find the same Listnode), the List of headA or headB points to <code>NULL</code>, hence also return headA(or headB).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!headA &amp;&amp; !headB) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">        ListNode *tempA = headA;</span><br><span class="line">        ListNode *tempB = headB;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(tempA)&#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            tempA = tempA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(tempB)&#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            tempB = tempB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tempA!=tempB) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lenA &gt; lenB)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenA - lenB; i++)</span><br><span class="line">                headA = headA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lenB &gt; lenA)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenB - lenA; i++)</span><br><span class="line">                headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(headA != headB)&#123;</span><br><span class="line">            headA = headA-&gt;next;</span><br><span class="line">            headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> headA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> Let takes Example 2 to explain how efficient method it is: <img src="explain.png" /></p>
<p>Go through each node with headA and headB at the same time, meanwhile, check the reference of nodes whether those are the same or not. If one of the List points to <code>NULL</code>(means at the end), restart to go through the other, the illustration is shown in the following, <img src="intersectval.png" /></p>
<p>So, if there is the intersection between two singly linked lists, the method will find. On the contrary, those will point to NULL.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *tempA = headA;</span><br><span class="line">        ListNode *tempB = headB;</span><br><span class="line">        <span class="keyword">while</span>(tempA != tempB)&#123;</span><br><span class="line">            tempA = tempA?tempA-&gt;next:headB;</span><br><span class="line">            tempB = tempB?tempB-&gt;next:headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tempA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Invert Binary Tree - Solution/C++</title>
    <url>/posts/9c6c52ab/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>226. Invert Binary Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the <span style="background-color:#F0F0F0"><font color=#808080>root</font></span> of a binary tree, invert the tree, and return <I>its root</I>.</p>
<h2 id="example">Example:</h2>
<img src="example1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [4,2,7,1,3,6,9]<br> <b>Output:</b> [4,7,2,9,6,3,1]
</p>
<a id="more"></a>
<img src="example2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [2,1,3]<br> <b>Output:</b> [2,3,1]
</p>
<p style="background-color:#F0F0F0">
<b>Input:
</p>
root = []<br> <b>Output:</b> []
</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in the tree is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 100]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-100 &lt;= Node.val &lt;= 100</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is a recursive method and likes DFS traversal of the tree. Implement swap() method between left node and right node.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(h)</b> P.S. h is the height of the tree for the call stack</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            TreeNode* temp = root-&gt;left;</span><br><span class="line">            root-&gt;left = invertTree(root-&gt;right);</span><br><span class="line">            root-&gt;right = invertTree(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="versio-2"><u>Versio 2</u></h3>
<p>Idea:<br> The other way is Stack and similars to BFS traversal of the tree.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            TreeNode* node = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(node)&#123;</span><br><span class="line">                st.push(node-&gt;left);</span><br><span class="line">                st.push(node-&gt;right);</span><br><span class="line">                swap(node-&gt;left, node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Isomorphic Strings - Solution/C++</title>
    <url>/posts/31bd0f13/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>205. Isomorphic Strings</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given two strings <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>t</font></span>, determine if they are isomorphic.</p>
<p>Two strings <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>t</font></span> are isomorphic if the characters in s can be replaced to get <span style="background-color:#F0F0F0"><font color=#808080>t</font></span>.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "egg", t = "add"<br> <b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "foo", t = "bar"<br> <b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "paper", t = "title"<br> <b>Output:</b> true
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>t.length == s.length</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>t</font></span> consist of any valid ascii character.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> "Isomorphic" means that no more than one character of string can map to the same character. E.g., <code>s1="apple"</code> <code>s2="paper"</code>, you can see two <span style="background-color:#F0F0F0"><font color=#808080>p</font></span> alphabets of s1 map to <span style="background-color:#F0F0F0"><font color=#808080>a</font></span> alphabet and <span style="background-color:#F0F0F0"><font color=#808080>p</font></span> alphabet at s2, the result is false.<br></p>
<p>Hence, you need to record each character relationship (two strings) to unordered map container.<br> At 8-16 line, you should through all characters. If this character isn't exist in <code>unmap_s</code> and <code>unmap_t</code>, store a character of the other side. At 10 line, if a character isn't exist in <code>unmap_s</code> but it has already exist in <code>numap_t</code>, it means <b>more than one character map to the same character</b>, so return false.<br></p>
<p>At 13 line, if this character has already exist in <code>unmap_s</code>, you can get the value (=previous t[i]) then you find the value isn't equal to current t[i], return false.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span>(s == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; unmap_s, <span class="keyword">unmap_t</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(unmap_s.find(s[i]) == unmap_s.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">unmap_t</span>.find(t[i]) != <span class="keyword">unmap_t</span>.end()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                unmap_s[s[i]] = t[i];</span><br><span class="line">                <span class="keyword">unmap_t</span>[t[i]] = s[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(unmap_s[s[i]] != t[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This strategy uses only one unordered map container. But I implemented a <code>matchbyValue</code> function to check value existence in container.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; record;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;::iterator it;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            it = record.find(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(it == record.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(matchbyValue(record, t[i]))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    record.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(s[i],t[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(it-&gt;second == t[i])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">matchbyValue</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; record, <span class="keyword">char</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = record.begin();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(it != record.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-3"><u>Version 3</u></h3>
<p>Idea:<br> It is an optimal approach that refered to online.<br> Initial two array to zero at first. At 10-11 line, store the position of character, <code>i + 1</code> means the range of value is 1 to n, because inital value of array is zero.<br> So, if the values are not equal between map_s and map_t, return false. It represented characters are shown in different position. (characters are the same alphabet.)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> map_s[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">map_t</span>[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map_s[s[i]] != <span class="keyword">map_t</span>[t[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            map_s[s[i]] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">map_t</span>[t[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Length of Last Word - Solution/C++</title>
    <url>/posts/b04b682/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>8. Length of Last Word</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a string <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists of some words separated by spaces, return the <em>length of the last word in the string</em>. <em>If the last word does not exist, return</em> <span style="background-color:#F0F0F0"><font color=#808080>0</font></span>.</p>
<p>A <strong>word</strong> is a maximal substring consisting of non-space characters only. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "Hello World"<br><b>Output:</b> 5<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = " "<br><b>Output:</b> 0</br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists of only English letters and spaces <span style="background-color:#F0F0F0"><font color=#808080>' '</font></span>
</li>
<p></strong>.</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This problem took me a lot of time thinking how to solve, because I tried many methods based on scanning string in order. As a result, I ingorned tailing spaces situation, e.g., "a " or "a bc ".<br> Obviously, my logic was error! Finally, I refered to <a href="https://zxi.mytechroad.com/blog/string/leetcode-58-length-of-last-word/">Huahua's Tech Road</a>, the solution is very understandable, it scan the string in <strong>reverse order</strong> <u>until a space or reach the beginning of the string</u>.<br> So, the first <code>while(i &gt;= 0 &amp;&amp; s[i] == ' ')</code> means trimming off space at tail; the second <code>while(i &gt;= 0 &amp;&amp; s[i] != ' ')</code> means calculating length of a last word.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> characters = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            i--;</span><br><span class="line">            characters ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> characters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Reverse_order</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Linear Search Algorithm diagram</title>
    <url>/posts/65334f02/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Linear Search</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array arr[] of n elements, write a function to search a given element x in arr[]. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> arr[] = {10, 20, 80, 30, 60, 50, 100, 110, 130, 170}<br>     x = 110;<br> <b>Output:</b> 6<br> <b>Explanation:</b> Element x is presented at index 6
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> arr[] = {10, 20, 80, 30, 60, 50, 100, 110, 130, 170}<br>    x = 175;<br> <b>Output:</b> -1<br> <b>Explanation:</b> Element x is not presented in arr[].
</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea<br> It is a very simple approach to find the target.<br> <img src="linear_example.png" /></p>
<p>Go through each element which is equal to the target (Start from the index 0 of array). If the target doesn't exist in arry, return -1.<br> However, it is rarely used practically because other search algorithms are more efficient.<br></p>
<p><b>Time complexity: O(n)</b><br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linearSearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == target) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">170</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">110</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = linearSearch(arr, x);</span><br><span class="line">    (res == <span class="number">-1</span>)? <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;The value isn&#x27;t exist in array&quot;</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The value&#x27;s index is &quot;</span> &lt;&lt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SearchAlgorithm</category>
      </categories>
      <tags>
        <tag>Searching</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Linked List Cycle - Solution/C++ - Solution/C++</title>
    <url>/posts/44e8eae/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>141. Linked List Cycle</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given <span style="background-color:#F0F0F0"><font color=#808080>head</font></span>, the head of a linked list, determine if the linked list has a cycle in it.</p>
<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <span style="background-color:#F0F0F0"><font color=#808080>next</font></soab> pointer. Internally, <span style="background-color:#F0F0F0"><font color=#808080>pos</font></span> is used to denote the index of the node that tail's <span style="background-color:#F0F0F0"><font color=#808080>next</font></span> pointer is connected to. <strong>Note</strong> that <span style="background-color:#F0F0F0"><font color=#808080>pos</font></span> <strong>is not passed as a parameter</strong>.</p>
<p>Return <span style="background-color:#F0F0F0"><font color=#808080>true</font></span> <em>if there is a cycle in the linked list</em>. Otherwise, return <span style="background-color:#F0F0F0"><font color=#808080>false</font></span>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="example_1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [3,2,0,-4], pos = 1<br> <b>Output:</b> true<br> <b>Explanation:</b> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
</p>
<img src="example_2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1,2], pos = 0<br> <b>Output:</b> true<br> <b>Explanation:</b> There is a cycle in the linked list, where the tail connects to the 0th node.
</p>
<img src="example_3.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1], pos = -1<br> <b>Output:</b> false<br> <b>Explanation:</b> There is no cycle in the linked list.
</p>
<strong>Constraints:</strong> <strong>
<li>
The number of the nodes in the list is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 10^4]</font></span></strong>
</li>
. <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^5 &lt;= Node.val &lt;= 10^5</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>pos</font></sapn> is <span style="background-color:#F0F0F0"><font color=#808080>-1</font></span> or a <b>valid index</b> in the linked-list.
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> We can use <strong>unordered_set</strong> to detect if a list is cyclical.<br></p>
<p>When we go through each node one by one, we should records the reference of node (or memory address) in a <strong>unordered_set container</strong>. Every reference is unique, so if current node's reference is in the container, it means that a node had been visited in a list before, <code>return true</code>. If the current node is <code>NULL</code>, it's represented the end of the list and a cyclical list is invalid, <code>return false</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;ListNode*&gt; visited;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.count(head)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            visited.insert(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> In order to reduce the space complexity to <code>O(1)</code>, we can't declare any container to record the reference of node. <strong>Floyd's Cycle Finding Algorithm</strong> is quite efficient and simple.<br></p>
<p><strong>Ｗhat is Floyd's Cycle Finding Algorithm?</strong> <em>wikipedia</em><br> When you want to solve the detection of multi-connected elements whether it's exist cyclical state, you can try to convert these questions to List structure, and List can be summerized into two parts:<br></p>
<ol type="1">
<li><p>Cyclical List structure <img src="cyclical_list.png" /></p></li>
<li><p>Non cyclical List structure <img src="non_cyclical_list.png" /></p></li>
</ol>
<p>The algorithm is named after Robert W. Floyd, who was credited with its invention by Donald Knuth.<br> It is a pointer algorithm that uses only two pointers, which move through the sequence at different speeds. It is also called the "tortoise and the hare algorithm".<br></p>
<p><strong>How does it work?</strong><br> Declare two variable as a slow pointer and a fast pointer. **The slow pointer moves one step at a time while the fast pointer moves two steps at a time.<br></p>
<p>If there is a non cyclical List, the fast pointer will reach the end first and the last node points a NULL, you can return false in this case.</p>
<p>If there is a cyclical List, <strong>the fast pointer will eventually meet the slow pointer</strong>, so you can return true at 18 line.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> fast = head;</span><br><span class="line">        <span class="keyword">auto</span> slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!fast-&gt;next) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Unordered_set(STL)</tag>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Longest Common Prefix - Solution/C++</title>
    <url>/posts/2768cb2c/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>14. Longest Common Prefix</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <span style="background-color:#F0F0F0"><font color=#808080>""</font></span>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> strs = ["flower","flow","flight"]<br><b>Output:</b> "fl"<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> strs = ["dog","racecar","car"]<br><b>Output:</b> ""<br><b>Explanation:</b> There is no common prefix among the input strings.<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= strs.length &lt;= 200</font>
</li>
</strong><br><strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= strs[i].length &lt;= 200</font>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>strs[i]</font></span> consists of only lower-case English letters.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> First, declared a variable of string that stored strs[0]. Then, I compared it with each elements of vector. At 8 line, <code>min(res.length(), strs[i].length())</code> means finding a smallest length for matching between strings.<br></p>
<p>At 10 line, if a statement is true, I stored a current lenght of string and prepared to compare next element; if a statement is false, it means these strings aren't the same, so the length must be subtract 1 and compare each others again. At 17 line, if length is 0, there is no reason to execute althought maybe there are many elements that have not been compared.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.size(); i++)&#123;</span><br><span class="line">            length = min(res.length(), strs[i].length());</span><br><span class="line">            <span class="keyword">while</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.substr(<span class="number">0</span>, length) == strs[i].substr(<span class="number">0</span>, length))&#123;</span><br><span class="line">                    res = strs[i].substr(<span class="number">0</span>, length);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    length --;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> A method is refered from online. Aims to compare every characters, if each characters is the same at the same position, store it!<br></p>
<p>The first loop is the length of strs[0] (1th string), the second loop is number of elements of vector. At 8 line, take each characters <code>s[i]</code> from every strings to match a character of <code>strs[0][i]</code>, meanwhile, check the length of string whether it exceeds i index(position) or not. If a condtion is true, store this character <code>strs[0][i]</code>. On the contrary, return a record.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.empty()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">string</span> &amp;s : strs)</span><br><span class="line">                <span class="keyword">if</span> (s.length() &lt;= i || s[i] != strs[<span class="number">0</span>][i]) <span class="keyword">return</span> res;</span><br><span class="line">            res += strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Happy Number - Solution/C++</title>
    <url>/posts/e73e301/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>202. Happy Number</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Write an algorithm to determine if a number <span style="background-color:#F0F0F0"><font color=#808080>n</span></font> is happy.</p>
<p>A <b>happy number</b> is a number defined by the following process:</p>
<ul>
<li>
Starting with any positive integer, replace the number by the sum of the squares of its digits.
</li>
<li>
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
</li>
<li>
Those numbers for which this process ends in 1 are happy.
</li>
</ul>
<p>Return <span style="background-color:#F0F0F0"><font color=#808080>true</font></span> <I>if</I> <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> <I>is a happy number, and</I> <span style="background-color:#F0F0F0"><font color=#808080>false</font></span> <I>if not</I>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 19<br> <b>Output:</b> true<br> <b>Explanation:</b><br> 1<sup>2</sup> + 9<sup>2</sup> = 82<br> 8<sup>2</sup> + 2<sup>2</sup> = 68<br> 6<sup>2</sup> + 8<sup>2</sup> = 100<br> 1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 2<br> <b>Output:</b> false
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 2^31 - 1</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> At first, I suggest you realizing what is unhappy number? You will find out the rule. E.g., n = 48<br> 4<sup>2</sup> + 8<sup>2</sup> = 80<br> 8<sup>2</sup> + 0<sup>2</sup> = 64<br> 6<sup>2</sup> + 4<sup>2</sup> = 52<br> 5<sup>2</sup> + 2<sup>2</sup> = 29<br> 2<sup>2</sup> + 9<sup>2</sup> = 85<br> 8<sup>2</sup> + 5<sup>2</sup> = 89<br> 8<sup>2</sup> + 9<sup>2</sup> = 145<br> 1<sup>2</sup> + 4<sup>2</sup> + 5<sup>2</sup> = 42<br> 4<sup>2</sup> + 2<sup>2</sup> = 20<br> 2<sup>2</sup> + 0<sup>2</sup> = 4<br> 4<sup>2</sup> = 16<br> 1<sup>2</sup> + 6<sup>2</sup> = 37<br> 3<sup>2</sup> + 7<sup>2</sup> = 58<br> 5<sup>2</sup> + 8<sup>2</sup> = 89<br></p>
<p>From the above example, you can find the regular process. If a number is unhappy number, the output will repeat. (In this case, <b>89</b> is repeated number)<br></p>
<p>Hence, you can take the <b>unordered_map container</b> to store each output.<br> Then, use <code>count()</code> to check whether the output exists in container or not, if it has already existed, <code>count()</code> will return <b>false</b>, and it means a number is unhappy number. On the contrary, if the ouput is 1, break the while() and return <b>true</b>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; umap;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">                sum += <span class="built_in">pow</span>(n%<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">                n /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(umap.count(sum)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            umap.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(sum, sum));</span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Longest Palindromic Substring - Solution/C++</title>
    <url>/posts/d0988a37/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>5. Longest Palindromic Substring</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a string s, return the longest palindromic substring in s.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "babad"<br> <b>Output:</b> "bab"<br> <b>Note:</b> "aba" is also a valid answer.
</p>
<a id="more"></a>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "cbbd"<br> <b>Output:</b> "bb"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "a"<br> <b>Output:</b> "a"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "ac"<br> <b>Output:</b> "a"
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 1000</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consist of only digits and English letters (lower-case and/or upper-case)
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br></p>
<p>There are two situations of the palindromic that are shown as below:<br> <img src="situation.png" /></p>
<p>Therefore, you should calculate the maximum length of the valid string for two situation at 11 line.<br></p>
<p>Let's look at getLen() function. you need to delcare two variables, <code>l</code> is represented the left index and <code>r</code> is represented the right index, use two indexes as the margins of string to find the longest substring. If <code>l</code> is smaller than 0 or <code>r</code> is equal to n or a character of <code>s[l]</code> and <code>s[r]</code> are not the same, the while loop will be stop, and return <code>r - l - 1</code> length.<br></p>
<p>Why is <code>r - l - 1</code>? Because the value of <code>r</code> and <code>l</code> are added 1 when break the while loop, as below:<br> <img src="calculateMargin.png" /></p>
<p>Hence, must be additionally substract 1.<br></p>
<p>After getting the result from getLen(), if the result is bigger than <code>len</code> at 13 line, store the result and calculate the start index of the substring by using the <code>i</code> and <code>len</code>.<br></p>
<p>Finally, you can use substr() to return the exact substring!<br></p>
<p><b>Time complexity: O(n<sup>2</sup>)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> validLen = max(getLen(i, i, n, s), getLen(i, i+<span class="number">1</span>, n, s));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(validLen &gt; len)&#123;</span><br><span class="line">                len = validLen;</span><br><span class="line">                startIndex = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(startIndex, len);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> n, <span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; r &lt; n &amp;&amp; s[l]==s[r])&#123;</span><br><span class="line">            l--;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r - l - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Longest Substring Without Repeating Characters - Solution/C++</title>
    <url>/posts/b6196ce1/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>3. Longest Substring Without Repeating Characters</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a string <span style="background-color:#F0F0F0"><font color=#808080>s</span></font>, find the length of the <b>longest substring</b> without repeating characters.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "abcabcbb"<br> <b>Output:</b> 3<br> <b>Explanation:</b> The answer is "abc", with the length of 3.
</p>
<a id="more"></a>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "bbbbb"<br> <b>Output:</b> 1<br> <b>Explanation:</b> The answer is "b", with the length of 1.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "pwwkew"<br> <b>Output:</b> 3<br> <b>Explanation:</b> The answer is "wke", with the length of 3.<br> Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = ""<br> <b>Output:</b> 0
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></font></span>
</li>
</strong> <strong>
<li>
span style="background-color:#F0F0F0"&gt;<font color=#808080>s</font></span> consists of English letters, digits, symbols and spaces.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is a brute force to check every character for finding a valid longest string.<br> At 9 line, a declaration of the vector is 128 sizes with all NULL. Then, let <code>j = i</code> and find the end of character whish has a longest string. So, at 11-12 line, use a while to consist two constraints: 1) <code>j</code> must be smaller than <code>n</code> and 2) <code>arr[s[i]]</code> must be NULL, <b>if true</b>, it should add 1 and j++. <b>If false</b>, it means a character has shonw already, therefore, go to 14 line and calculate the length of string.<br></p>
<p><b>Time complexity: O(n*128)</b><br> <b>Space complexity: O(128)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">128</span>)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; !arr[s[j]])&#123;</span><br><span class="line">                arr[s[j++]] ++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = max(maxLen, j - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It is a hash table's concept with sliding window principle. This method is refered to <a href="https://zxi.mytechroad.com/blog/string/leetcode-3-longest-substring-without-repeating-characters/">Huahua’s Tech Road</a>.<br> There are two necessary indexes, <code>i</code> and <code>j</code>.<br></p>
<p><code>i</code> represents the start index of valid string.<br> <code>j</code> represents the moving index to increasing window size.<br> // Window size: through the string</p>
<p>The demonstration is shown as below:<br> <img src="demonstration.png" /></p>
<p>At 11 line, it means getting a start index and ensure a valid string. E.g., at the begining, vector's values are -1. So, <code>i</code> always is 0 (-1 + 1). If a charactor has exist in vector already when <code>j</code> increases, avoid the same chararcors in string, therefore, <code>i</code> will be 1 (0 + 1). // move one position<br></p>
<p>At 12 line, use current <code>j</code> index to calculate the length of string between <code>j</code> and <code>i</code>. Notice, plus 1 at <code>j - i + 1</code> is very important, it should counts the element of <code>i</code> index.<br></p>
<p>At 13 line, record the element's position to know where it is last position in string.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(128)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.length();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">128</span>, <span class="number">-1</span>)</span></span>; <span class="comment">// All characters of ASCII table</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            i = max(i, arr[s[j]] + <span class="number">1</span>); <span class="comment">// Get the position of i index</span></span><br><span class="line">            res = max(res, j - i + <span class="number">1</span>); <span class="comment">// Get the valid maximum length</span></span><br><span class="line">            arr[s[j]] = j; <span class="comment">// Recode the current position of s[j] character</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
      <tags>
        <tag>Hash_table</tag>
        <tag>Sliding_Window</tag>
      </tags>
  </entry>
  <entry>
    <title>[Save time] Shared partition between Mac OS X and Windows 10</title>
    <url>/posts/4755908e/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Bootcamp: File sharing between Mac OS X and Windows 10 on MacBook Pro</b></font>
</p>
<p>Here are some reason you should consider deploying Windows on your Mac device. 1. More games with better performance in Windows OS. 2. Some Applications don't work in macOS or not support all functions. 3. Developers need to test projects in Windows OS.</p>
<p>So, I shared my experience to save your time of installing Windows on MacBook Pro. <a id="more"></a> ## Hardward &amp; Software preparation + Hardware Product model: Macbook Pro 2017 + Software - Win10 ISO You can go to this url to downlaod ISO: https://www.microsoft.com/zh-tw/software-download/windows10 Choose version:Windows 10, Choose language: English and choose 64-bit version</p>
<h2 id="use-bootcamp-to-install-win10">Use Bootcamp to install Win10</h2>
<ul>
<li><p><strong>Step 1.</strong> Launch Bootcamp Assistant from th Utilities folder in Applications. Then, load your WIN10 ISO and allocate appropriate disk size. <img src="bootcamp_1.png" /></p></li>
<li><p><strong>Step 2.</strong> Wait for some time, the processing will download WIN10 support software. <img src="bootcamp_2.png" /></p></li>
<li><p><strong>Step 3.</strong> Finally, you will see the WIN10 setup screen. <img src="bootcamp_3.png" /></p></li>
<li><p><strong>Step 4.</strong> Enter "Explorer", you wil see <code>WININSTALL (D:)</code> and click <code>BootCamp folder</code> to execute setup program. (Don't choose anything else) <img src="bootcamp_4.png" /></p></li>
</ul>
<h2 id="partition-ntfs-for-file-sharing">Partition NTFS for file sharing</h2>
<ul>
<li><p><strong>Step 1.</strong> Shut down your Mac.</p></li>
<li><p><strong>Step 2.</strong> Hold down the <code>Command and R keys</code> down and press the power button.</p></li>
<li><p><strong>Step 3.</strong> Keep holding Command and R keys until the Apple logo appears on the screen.</p></li>
<li><p><strong>Step 4.</strong> Then, you will see a screen saying macOS Utilities(or if your Mac is older, OS X Utilities).</p></li>
<li><p><strong>Step 5.</strong> Choose "Disk Utility" <img src="bootcamp_5.png" /></p></li>
<li><p><strong>Step 6.</strong> Choose "APPLE SSD ..." and click partition <img src="bootcamp_6.png" /></p></li>
<li><p><strong>Step 7.</strong> Click '+' to new partition section <img src="bootcamp_7.png" /></p></li>
<li><p><strong>Step 8.</strong> Suggest selecting the NTFS option <img src="bootcamp_8.png" /></p></li>
<li><p><strong>Step 9.</strong> If the partition is succes, you will see the new partition section between Mac OS X and Windows 10</p></li>
</ul>
<h2 id="error---blue-screen-when-boot-windows-10">Error - blue screen when boot Windows 10</h2>
<p>You finish above procedures, <font color=#FF0000>if WIN10 can't boot anymore and show blue screen with error message: 0xd000000e</font></p>
<ul>
<li><strong>Reason:</strong> The installation creates a hybrid MBR which is completely unnecessary. Windows will not boot in EFI mode but in BIOS mode instead and crash.</li>
<li><strong>Solution:</strong> Enter Mac OS X to open terminal <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install gdisk</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo gdisk /dev/sda0 (&quot;sda0&quot; depands on your primary partition)</span><br></pre></td></tr></table></figure>
<p style="background-color:#F0F0F0">
Type <b>p</b> to view the partition table to verify you're working on the correct disk
</p>
<p style="background-color:#F0F0F0">
Type <b>x</b> to enter the experts' menu
</p>
<p style="background-color:#F0F0F0">
Type <b>n</b> to create an empty protective MBR
</p>
<p style="background-color:#F0F0F0">
Type <b>w</b> to save your changes, You'll be asked to confirm this action
</p>
Finally, reboot you Mac and enter WIN10 OS successfully.</li>
</ul>
<h2 id="necessary-third-party-softwares">Necessary third party softwares</h2>
<p>To enable Mac OS X can write data at shared partition, I provide some software infomations as below:<br> 1. <a href="https://osxfuse.github.io">OSXFUSE</a><br> 2. <a href="https://www.tuxera.com/company/open-source/">ntfs-3g</a></p>
<p>Reference:<br> https://www.innoq.com/en/blog/triple-booting-a-mac/</p>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>MacOS_X</tag>
        <tag>Windows10</tag>
        <tag>Bootcamp</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] Majority Element - Solution/C++</title>
    <url>/posts/ef374e86/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>169. Majority Element</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> of size <span style="background-color:#F0F0F0"><font color=#808080>n</font></span>, return <em>the majority element</em>.</p>
<p>The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.</p>
<p><strong>Follow-up:</strong> Could you solve the problem in linear time and in <span style="background-color:#F0F0F0"><font color=#808080>Ｏ(1)</font></span> space? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [3,2,3]<br> <b>Output:</b> 3
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [2,2,1,1,1,2,2]<br> <b>Output:</b> 2
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>n == nums.length</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= n &lt;= 5 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<p>Idea:<br> The strategy is similar wtih <a href="https://www.dcard.tw/f/boutique/p/235251138">Linked List Cycle's version 1</a>. Use <strong>unordered_map container</strong> to store a count of element. Notice: the majority element appears more than ⌊n / 2⌋ times and therefore you should add if statment for checking.</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            count[nums[i]]++;</span><br><span class="line">            <span class="keyword">if</span> (count[nums[i]] &gt; n/<span class="number">2</span>) <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It is a vary specail approach. It supposes the first element as the majority, and declare a counter.<br></p>
<p>Use a loop to go through every element, if current element is equal to the majority, count will plus 1, otherwise, count will minus 1.<br> If count is equal to 0, the majority will be updated to current element, and count is set 1.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> majority = nums.front();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(majority == nums[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(--count == <span class="number">0</span>)&#123;</span><br><span class="line">                majority = nums[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> majority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-3"><u>Version 3</u></h3>
<p>Idea:<br> You have more than fifty opporunity to get the answer, because the majority element appears more than n / 2 times.<br> Therefore, the strategy is a random approach that a random value is exist in array, then it compares with all element, if it appears more than n /2 times, it is the answer.<br></p>
<p>Note:<br> The formular of random is:<br> rand%(max - min + 1) + min<br> E.g., you want to get a random number between 5 and 10<br></p>
<ul>
<li>min ← 5</li>
<li>max ← 10</li>
<li><strong>randValue ← rand()%(10 - 5 + 1) + 5</strong></li>
</ul>
<p>// if you don't plus 1 like this: <code>rand()%(10 - 5)</code>, you will attain a random value between 0 to 4. So it must plus 1!</p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        srand(time(<span class="literal">nullptr</span>));</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> majority = nums[rand()%n];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(majority == nums[i]) count++;</span><br><span class="line">                <span class="keyword">if</span>(count &gt; n/<span class="number">2</span>) <span class="keyword">return</span> majority;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Maximum Depth of Binary Tree - Solution/C++</title>
    <url>/posts/57b52472/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>104. Maximum Depth of Binary Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the <span style="background-color:#F0F0F0"><font color=#808080>root</font></span> of a binary tree, return <em>its maximum depth</em>.</p>
<p>A binary tree's <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="MaximumDepthofBinaryTree_example1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [3,9,20,null,null,15,7]<br> <b>Output:</b> 3<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [1,null,2]<br> <b>Output:</b> 2<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> root = []<br> <b>Output:</b> 0<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [0]<br> <b>Output:</b> 1<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in the tree is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 10^4]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-100 &lt;= Node.val &lt;= 100</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Basically, I konw the search must be throughout all link of the whole tree, then if the left/right node of root are NULL, the depth is the deepest, so depth is start from 1 (depth + 1). But, I can't find out any regular action by using the recursion.<br></p>
<p>There is a quit clear demonstration as below[1]: <img src="MaximumDepthofBinaryTree_example2.png" /> It's very helpful and let me understand the recursion processing. So, let me explain the code:<br> (1) <code>maxDepth(root-&gt;left)</code>: use recursion to find deepest depth of left node<br> (2) <code>maxDepth(root-&gt;right</code>: use recursion to find deepest depth of right node<br> (3) <code>max((1), (2))</code>: compare the deepest depth of both of left/right nodes, get the maximum value. Then, <code>+ 1</code> means adding this layer.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Reference:<br> [1] https://algorithms.tutorialhorizon.com/find-the-maximum-depth-or-height-of-a-binary-tree/</p>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Maximum Subarray - Solution/C++</title>
    <url>/posts/90ac56be/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>53. Maximum Subarray</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an integer array <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Follow up:</strong> If you have figured out the <span style="background-color:#F0F0F0"><font color=#808080>O(n)</font></span> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><b>Output:</b> 6<br><b>Explanation:</b> [4,-1,2,1] has the largest sum = 6.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1]<br><b>Output:</b> 1<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0]<br><b>Output:</b> 0<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [-1]<br><b>Output:</b> -1<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [-2147483647]<br><b>Output:</b> -2147483647<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums.length &lt;= 2 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is a brute force approach. Use 2 loop to calculate the sum for each elements.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxValue = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                maxValue = max(maxValue, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This is an efficient method, use only one loop.<br> <code>sum += nums[i]</code> means the cumulative sum.<br> <code>sum = max(sum, nums[i])</code> means the maximum of sum between the cumulative sum or current index of value.<br> <code>maxValue = max(maxValue, sum)</code> means recording the maximal value.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = INT_MIN, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            sum = max(sum, nums[i]);</span><br><span class="line">            maxValue = max(maxValue, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>BruteForce</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Merge Sorted Array - Solution/C++</title>
    <url>/posts/1cc4a24a/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>88. Merge Sorted Array</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array. <strong>Note:</strong></p>
<ul>
<li>The number of elements initialized in nums1 and nums2 are m and n respectively.</li>
<li>You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2. <a id="more"></a></li>
</ul>
<h2 id="example">Example</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b><br> nums1 = [1,2,3,0,0,0], m = 3<br> nums2 = [2,5,6], n = 3<br> <br> <b>Output:</b> [1,2,2,3,5,6]<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^9 &lt;= nums1[i], nums2[i] &lt;= 10^9</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums1.length == m + n</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums2.length == n</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> My initial approach is to use queue to store element. The processing of merging is in order, I compare witch each elements, if the element is smaller, it will be assign to nums1[i] after the original value of index i will push to queue at nums vector. But, I faced many if statement in my code, it's too complicated.<br></p>
<p>Finally, I refered to <a href="https://medium.com/@ChYuan/leetcode-no-88-merge-sorted-array-%E5%BF%83%E5%BE%97-easy-9d2b3141ded3">ChingYuanYang</a>, I gained an impressive solution after realizing his explanation.<br> I can assign the element from the last position in reverse order at nums1 vector that is the largest value. It's an easy way to merge vectors.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s_1 = m <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> s_2 = n <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> max_size = m + n <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max_size; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s_1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[i] = nums2[s_2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s_2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums1[i] = nums1[s_1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[s_1] &gt; nums2[s_2])&#123;</span><br><span class="line">                nums1[i] = nums1[s_1--];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[i] = nums2[s_2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> It's a perfert code from <a href="https://zxi.mytechroad.com/blog/algorithms/array/leetcode-88-merge-sorted-array/">Huahua's Tech Road</a>.<br></p>
<p>According to the question, it says "merge nums2 into nums1", so we can use the size (=m) of nums2 as while statement rather than the size (=m+n) of nums1. Then, use only one statement to implement clean code with no if statement.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tail = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[tail--] = (i &gt;= <span class="number">0</span> &amp;&amp; nums1[i] &gt; nums2[j]) ? nums1[i--] : nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Merge Two Sorted Lists - Solution/C++</title>
    <url>/posts/61be1b10/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>21. Merge Two Sorted Lists</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Merge two sorted linked lists and return it as a new <strong>sorted</strong> list. The new list should be made by splicing together the nodes of the first two lists. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="Merge_ListNode_example.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> l1 = [1,2,4], l2 = [1,3,4]<br><b>Output:</b> [1,1,2,3,4,4]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> l1 = [], l2 = []<br><b>Output:</b> []
</p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> l1 = [], l2 = [0]<br><b>Output:</b> [0]</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in both lists is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 50]</font></span> .
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-100 &lt;= Node.val &lt;= 100</font></span>
</li>
</strong> <strong>
<li>
Both <span style="background-color:#F0F0F0"><font color=#808080>l1</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>l2</font></span> are sorted in non-decreasing order.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I haven't written a program with ListNode before. So, ListNode's constructor is very strange to me. I directly refered to <a href="https://zxi.mytechroad.com/blog/leetcode/leetcode-21-merge-two-sorted-lists/">Huahua's Tech Road</a>.<br></p>
<p>The method used a temporary node as the start of the result list, named <em>dummy</em>. The ListNode pointer's tail always points to the last node in the result list, so you can use <code>tail-&gt;next=l1</code> to append new Nodes easily.<br> <u>Notice: Must to do <code>tail=tail-&gt;next</code></u> to get next node' memory address.<br> The while() proceeds, it means two of ListNode aren't empty. It one of ListNodes is empty, non-empty ListNode is added value to tail. When the processing is done, the result is in <code>dummy.next</code> (because the first value is 0, initial value).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* tail = &amp;dummy;</span><br><span class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &gt; l2-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next=l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail-&gt;next=l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1) tail-&gt;next = l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) tail-&gt;next = l2;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Merge k Sorted Lists - Solution/C++</title>
    <url>/posts/23a6e02/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>23. Merge k Sorted Lists</b></font>
</p>
<h2 id="question">Question:</h2>
<p>You are given an array of <span style="background-color:#F0F0F0"><font color=#808080>k</font></span> linked-lists <span style="background-color:#F0F0F0"><font color=#808080>lists</font></span>, each linked-list is sorted in ascending order.<br> Merge all the linked-lists into one sorted linked-list and return it. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> lists = [[1,4,5],[1,3,4],[2,6]]<br> <b>Output:</b> [1,1,2,3,4,4,5,6]<br> <b>Explanation:</b> The linked-lists are:<br> [<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br> merging them into one sorted list:<br> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> lists = []<br> <b>Output:</b> []
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> lists = [[]]<br> <b>Output:</b> []
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>k == lists.length</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= k &lt;= 10<sup>4</sup></font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= lists[i].length &lt;= 500</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>lists[i]</font></span> is sorted in ascending order.
</li>
</strong> <strong>
<li>
The sum of <span style="background-color:#F0F0F0"><font color=#808080>lists[i].length</font></span> won't exceed <span style="background-color:#F0F0F0"><font color=#808080>10^4</font></span>.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1u"><u>Version 1/u&gt;</h3>
<p>Idea:<br> The strategy combines with <a href="https://egbert-yu-ting.github.io/posts/61be1b10/?highlight=merge">Merge Two Sorted Lists</a> algorithm.<br></p>
<p>First, get the size of vector <code>n</code> because the pair of Listnodes is necessary before calling <b>mergeTwoLists</b>.<br></p>
<p>At 19 line, the range of for-loop is in half, we get the left Listnode <code>lists[i]</code> and the right Listnode <code>lists[n - 1 - i]</code>to do merger.<br></p>
<p>After calling <code>mergeTwoLists</code>, <code>n</code> reduces by half until <code>n &lt;= 1</code>.<br> Why n is equal to <code>(n + 1) / 2</code>? Because the length is odd, one remaining ListNode can not to do merger, so it must to be counted.<br></p>
<p><b>Time complexity: O(log(n)*(l1 + l2))</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lists.empty()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = lists.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">1</span>) <span class="comment">// pairs processing</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                lists[i] = mergeTwoLists(lists[i], lists[n - <span class="number">1</span> - i]);</span><br><span class="line">            &#125;</span><br><span class="line">            n = (n + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// Shorten vector&#x27;s size</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists.front();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l1)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!l2)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="verion-2"><u>Verion 2</u></h3>
<p>Idea:<br> On the another hand, it can be solved by the <u>Priority Queue</u>.<br></p>
<p>First, the default heap of priority queue is max-heap. However, we want to get the result in ascending order, so we should implement min-heap.<br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">compare</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> ListNode* l, <span class="keyword">const</span> ListNode* r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (l-&gt;val &gt; r-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* tail = &amp;dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;ListNode*, <span class="built_in">vector</span>&lt;ListNode*&gt;, compare&gt; pq;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(ListNode* l: lists)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l) pq.push(l);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            tail-&gt;next  = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(tail-&gt;next) pq.push(tail-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Hard</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Merge Sort</title>
    <url>/posts/ef61bad1/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Merge Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>It is a Divide and Conquer problem. Divide the vector into small group to sort, and merge each small groups to the vector.<br> <a id="more"></a></p>
<p>In the merge() function, we need two new vectors to store those element that is divided into two parts from the vector.<br> And, <code>INT_MAX</code> must be added at the end of <code>leftvec</code> and <code>rightvec</code>. It's a comparision use. E.g., all of elements in <code>leftvec</code> are smaller than <code>rightvec</code>, so do <code>vec[i] = leftvec[left++]</code> until <code>leftvec[left] = INT_MAX</code>, and afterwards do <code>vec[i] = rightvec[right++]</code>. Finally, those elements are sorted.</p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(nlogn)
</li>
<li>
Worst Case：Ο(nlogn)
</li>
<li>
Average Case：Ο(nlogn)
</li>
<p><b>Space complexity: O(n)</b><br></p>
<p>Stable/Unstable: <b>Stable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">leftvec</span><span class="params">(vec.begin() + l, vec.begin() + mid + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">rightvec</span><span class="params">(vec.begin() + mid + <span class="number">1</span>, vec.begin() + r + <span class="number">1</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    leftvec.insert(leftvec.end(), INT_MAX);</span><br><span class="line">    rightvec.insert(rightvec.end(), INT_MAX);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftvec[left] &lt; rightvec[right])&#123;</span><br><span class="line">            vec[i] = leftvec[left];</span><br><span class="line">            ++left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            vec[i] = rightvec[right];</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(vec);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(vec, l, mid); <span class="comment">// divide the leftside into subvector</span></span><br><span class="line">        mergeSort(vec, mid + <span class="number">1</span>, r); <span class="comment">// divdie the rightside into subvector</span></span><br><span class="line">        merge(vec, l, mid, r); <span class="comment">// conquer these elements in ascending order</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    mergeSort(vec, <span class="number">0</span>, vec.size() - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Final answer:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(vec);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Min Stack - Solution/C++</title>
    <url>/posts/cb679286/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>155. Min Stack</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br></p>
<storng>
</li>
push(x) -- Push element x onto stack.
</li>
</strong> <storng>
</li>
pop() -- Removes the element on top of the stack.
</li>
</strong> <storng>
</li>
top() -- Get the top element.
</li>
</storng> <storng>
</li>
getMin() -- Retrieve the minimum element in the stack.
</li>
<p></strong> <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b><br> ["MinStack","push","push","push","getMin","pop","top","getMin"]<br> [[],[-2],[0],[-3],[],[],[],[]]<br> <br> <b>Output</b><br> [null,null,null,null,-3,null,0,-2]<br> <br> <b>Explanation</b><br> MinStack minStack = new MinStack();<br> minStack.push(-2);<br> minStack.push(0);<br> minStack.push(-3);<br> minStack.getMin(); // return -3<br> minStack.pop();<br> minStack.top();  // return 0<br> minStack.getMin(); // return -2
</p>
<strong>Constraints:</strong> <strong>
<li>
Methods <span style="background-color:#F0F0F0"><font color=#808080>pop</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>top</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>getMin</font></font> operations will always be called on <b>non-empty</b> stacks.
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Retrieving the minimum element is a key point, only one Stack can't handle this, because Stack are a type of container adpators with Last In First Out(LIFO).<br></p>
<p>So, we need to declare two Stack variables.<br> In the push() function, <code>st</code> can be added directly. Howerver, <code>min_st</code> must be checked whether the size of <code>min_st</code> is empty or a top of value of <code>min_st</code> is bigger than input value. If the IF statement is true, added input value to <code>min_st</code>.<br></p>
<p>In the pop() function, we can't pop any value in <code>min_st</code>. We should check a value of <code>st.pop()</code> whether it's equal to <code>min_st.pop()</code>.<br></p>
<p>Finally, we can get the minimum element by using getMin() function.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_st;</span><br><span class="line">    </span><br><span class="line">    MinStack() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        st.push(x);</span><br><span class="line">        <span class="keyword">if</span>(min_st.empty() || min_st.top() &gt;= x) min_st.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(min_st.top() == st.top()) min_st.pop();</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> st.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_st.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Minimum Depth of Binary Tree - Solution/C++</title>
    <url>/posts/aedd93e0/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>111. Minimum Depth of Binary Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<p><strong>Note:</strong> A leaf is a node with no children. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="example.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [3,9,20,null,null,15,7]<br> <b>Output:</b> 2
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> root = [2,null,3,null,4,null,5,null,6]<br> <b>Output:</b> 5
</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in the tree is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 10^5]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-1000 &lt;= Node.val &lt;= 1000</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> We can sum up the rules of the binary tree.<br> <strong>First:</strong> If the left subnode and right subnode are exist of leaf node, it can be calculated each depths and use min() to get minimum depth.<br> <strong>Seconde:</strong> If there is NULL either left subnode or right subnode of leaf node, we must use max() to get the maxixmum depth, because <u>"A leaf is a node with no children"</u> based on the question. E.g., if left subnode is NULL, a leaf can't be calculated as 1 depth.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; root-&gt;right)&#123;</span><br><span class="line">            <span class="keyword">return</span> min(minDepth(root-&gt;left), minDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> max(minDepth(root-&gt;left), minDepth(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Number of 1 Bits - Solution/C++</title>
    <url>/posts/790fdd9f/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>191. Number of 1 Bits</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the <span style="background-color:#F0F0F0"><font color=#808080>Hamming weight</span></font>).</p>
<b>Note:</b>
<ul>
<li>
Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
</li>
<li>
In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement">2's complement</a> notation. Therefore, in <b>Example 3</b> above, the input represents the signed integer. <span style="background-color:#F0F0F0"><font color=#808080>-3</font>
</style>
.
</li>
</ul>
<a id="more"></a>
<p><b>Follow up:</b> If this function is called many times, how would you optimize it?</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 00000000000000000000000000001011<br> <b>Output:</b> 3<br> <b>Explanation:</b> The input binary string <b>00000000000000000000000000001011</b> has a total of three '1' bits.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 00000000000000000000000010000000<br> <b>Output:</b> 1<br> <b>Explanation:</b> The input binary string <b>00000000000000000000000010000000</b> has a total of one '1' bit.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 11111111111111111111111111111101<br> <b>Output:</b> 31<br> <b>Explanation:</b> The input binary string <b>11111111111111111111111111111101</b> has a total of thirty one '1' bits.
</p>
<strong>Constraints:</strong> <strong>
<li>
The input must be a <b>binary string</b> of length <span style="background-color:#F0F0F0"><font color=#808080>32</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The question is very simple if you have understood <a href="https://egbert-yu-ting.github.io/posts/417b9784/">190. Reverse Bits</a>.<br></p>
<p>Before shifting right 1 bit, we only need to do <code>n &amp; 1</code> to get each bit at rightmost. Use a counter variable to count how many number of 1 bits.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">            count += (n &amp; <span class="number">1</span> == <span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Shift_Operators</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Palindrome LInked List - Solution/C++</title>
    <url>/posts/6737deee/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>234. Palindrome Linked List</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the <span style="background-color:#F0F0F0"><font color=#808080>head</font></span> of a singly linked list, return <span style="background-color:#F0F0F0"><font color=#808080>true</font></span> if it is a palindrome. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p><img src="example_1.png" /> Input: head = [1,2,2,1] Output: true</p>
<p><img src="example_2.png" /> Input: head = [1,2] Output: false</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in the list is in the range <span style="background-color:#F0F0F0"><font color=#808080>[1, 10<sup>5</sup>]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= Node.val &lt;= 9</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> First, we need to find the middle node, so Fast &amp; Slow pointers can help.<br> Hence, <code>fast</code> moves two pointers and <code>slow</code> moves one pointers at one time.<br></p>
<p>And, if the number of nodes is odd in the linked list, the slow pointer will stop at the middle position and it need to shift to next <code>slow = slow-&gt;next</code> ; if it is even, the slow pointer will stop at the Null.<br></p>
<p>There is a simple figure as shown in below:<br> <img src="demonstration.png" /></p>
<p>Between the slow pointer and Null, use reverse() function to get the new linked list. And, compare the each nodes with the <code>head</code>, if it is palindrome, all the nodes's value are the same.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(fast) slow = slow-&gt;next;</span><br><span class="line">        slow = reverse(slow);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slow-&gt;val != head-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* curr= head;</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            curr= curr-&gt;next;</span><br><span class="line">            head-&gt;next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Palindrome Number - Solution/C++</title>
    <url>/posts/d37a286f/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>9. Palindrome Number</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>
<p><strong>Follow up:</strong> Could you solve it without converting the integer to a string? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = 121<br><b>Output</b>: true<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = -121<br><b>Output</b>: false<br><b>Explanation</b>: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = 10<br><b>Output</b>: false<br><b>Explanation</b>: Reads 01 from right to left. Therefore it is not a palindrome.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = -101<br><b>Output</b>: false<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
-2^31 &lt;=x &lt;= 2^31 -1
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea: <br> My solution is the same as "Reverse Integer". Use the reverse integer to compare with the original value, so you can get the result.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>, temp = x;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(x)&#123;</span><br><span class="line">                ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">                x = x / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp == ans)&#123;</span><br><span class="line">                <span class="keyword">return</span> (ans &gt; INT_MAX)?<span class="number">0</span>:<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> The solution is refered from online. At if statement, it filters negative numbers and multiples of 10. <code>while(x &gt;sum)</code> means cutting x in half. If x is even digits, use <code>sum == x</code> to get answer, on the contrary, use <code>sume / 10 == x</code>. This method of computing time is fater than Version 1 if x is a large number.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; sum)&#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> (sum == x)||(sum / <span class="number">10</span> == x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Remainder</tag>
        <tag>Quotient</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Pascal&#39;s Triangle II - Solution/C++</title>
    <url>/posts/2edb8546/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>118. Pascal's Triangle II</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an integer <span style="background-color:#F0F0F0"><font color=#808080>rowIndex</font></span>, return the <span style="background-color:#F0F0F0"><font color=#808080>rowIndex^th</font></span> row of the Pascal's triangle. Notice that the row index starts from <strong>0</strong>. <img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="animation" /> <font size="2">In Pascal's triangle, each number is the sum of the two numbers directly above it.</font> <a id="more"></a></p>
<p><strong>Follow up:</strong> Could you optimize your algorithm to use only <em>O(k)</em> extra space?</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> rowIndex = 3<br> <b>Output:</b> [1,3,3,1]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> rowIndex = 0<br> <b>Output:</b> [1]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> rowIndex = 0<br> <b>Output:</b> [1]
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= rowIndex &lt;= 33</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is familiar with <a href="https://egbert-yu-ting.github.io/posts/2b0547f6/">Pascal's Trangle</a> question, you can use similar algorithm to implement it.<br> However, the efficiency of algorithm is not optimization.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(rowIndex == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> prev = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = res[j];</span><br><span class="line">                res[j] += prev;</span><br><span class="line">                prev = temp;</span><br><span class="line">            &#125; </span><br><span class="line">            res.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> Here's the best algorithm.<br> At first, declare a vector that consists <code>rowIndex + 1</code> elements. Must be <strong>add 1</strong>, because row index starts from 0. So the size of vector is ready, we don't use <code>push_back()</code> in loop anymore.<br></p>
<p>Whatever a value of rowIndex is, the first position of vector is always 1, so we pass 1 to <code>res</code> vector.<br> At 9 line, we calculate each elements in reverse(it not includes the frist element).<br></p>
<p>E.g., <u>Input: rowIndex = 3</u><br>    i = 1, res=[1, 0, 0]<br>    i = 1, res=[1, 0 + 1, 0] = [1, 1, 0]<br>    i = 2, res=[1, 1 + 1, 0 + 1] = [1, 2, 1] (output)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(rowIndex+<span class="number">1</span>)</span></span>;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                res[j] += res[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>2D_Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Pascal&#39;s Triangle - Solution/C++</title>
    <url>/posts/2b0547f6/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>118. Pascal's Triangle</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.<br> <img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="animation" /> <font size="2">In Pascal's triangle, each number is the sum of the two numbers directly above it.</font> <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> 5<br> <b>Output:</b><br> [<br>    [1],<br>   [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br>  [1,4,6,4,1]<br>]
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The last element of vector(row) is always consistent(equals to 1), We add 1 into vector for each rows at 17-18 line.<br> The first element of vector is also the same, so the index of j is from 1 to i - 1(i is represented the number of numRows). At the range of j, we should add previous value into the current index of value.<br></p>
<p>At 11 line, prev variable means the first element of vector.<br> At 13 line, declare temp variable and store row[j] as the next prev.<br> At 14 line, add prev into row[j].<br> At 15 line, pass temp to prev.<br> Finally, we use two loops to implement Pascals's Triangle easily.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(numRows &lt; <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        res.push_back(row);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= numRows; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> prev = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = row[j];</span><br><span class="line">                row[j] += prev;</span><br><span class="line">                prev = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            row.push_back(<span class="number">1</span>);</span><br><span class="line">            res.push_back(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>2D_Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Path Sum - Solution/C++</title>
    <url>/posts/bb7f02f5/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>112. Path Sum</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p><strong>Note:</strong> A leaf is a node with no children. <a id="more"></a></p>
<h2 id="example">Example:</h2>
Given the below binary tree and <span style="background-color:#F0F0F0"><font color=#808080>sum = 22</font></span>,
<p style="background-color:#F0F0F0">
    5<br>     / \<br>    4  8<br>    /  / \<br>   11 13 4<br>   / \    \<br>  7  2    1
</p>
<p>return true, as there exist a root-to-leaf path <span style="background-color:#F0F0F0"><font color=#808080>5-&gt;4-&gt;11-&gt;2</font></span> which sum is 22.</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> As the previous questions of binary tree, you must set termination(return) condition when root node is NULL.<br> Then, you must check a current node of value wheather it is equal to sum when you are at leaf node. (The rule is: go through the left/right node for each degrees, root-&gt;val subtracted from sum)<br></p>
<p>E.g., if you arrival at 7(path: 5-&gt;4-&gt;11-&gt;7), this node is a leaf node (any node whose left and right children are null), a value of sum must be 7.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; (root-&gt;val == sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Plus One - Solution/C++</title>
    <url>/posts/acf6f11e/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>66. Plus One</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a <strong>non-empty</strong> array of decimal digits representing a non-negative integer, increment one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> digits = [1,2,3]<br><b>Output:</b> [1,2,4]<br><b>Explanation:</b> The array represents the integer 123.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> digits = [4,3,2,1]<br><b>Output:</b> [4,3,2,2]<br><b>Explanation:</b> The array represents the integer 4321.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> digits = [0]<br><b>Output:</b> [1]<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= digits.length &lt;= 100</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= digits[i] &lt;= 9</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> At first, add 1 and the last index of element. Check each digits in reverse to get the value of carry. Finally, must be check the final the vale of carry, if carry isn't equal to 0, insert it into begining at vector.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = digits.size();</span><br><span class="line">        <span class="keyword">int</span> i = len - <span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">        digits[i]++;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            digits[i] += carry;</span><br><span class="line">            <span class="keyword">int</span> quotient = digits[i] / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(quotient &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                digits[i] = digits[i] % <span class="number">10</span>;</span><br><span class="line">                carry = quotient;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry != <span class="number">0</span>) digits.insert(digits.begin(), carry);</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Power of Two - Solution/C++</title>
    <url>/posts/fb3c78ed/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>231. Power of Two</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an integer <span style="background-color:#F0F0F0"><font color=#808080>n</font></span>, return <I><span style="background-color:#F0F0F0"><font color=#808080>true</font></span> if it is a power of two. Otherwise, return <span style="background-color:#F0F0F0"><font color=#808080>false</font></span></I>.</p>
<p>An integer <span style="background-color:#F0F0F0"><font color=#808080>n</font></span> is a power of two, if there exists an integer <span style="background-color:#F0F0F0"><font color=#808080>x</font></span> such that <span style="background-color:#F0F0F0"><font color=#808080>n == 2<sup>x</sup></font></span>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 1<br> <b>Output:</b> true<br> <b>Explanation:</b> 2<sup>0</sup> = 1
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 16<br> <b>Output:</b> true<br> <b>Explanation:</b> 2<sup>4</sup> = 16
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 3<br> <b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 4<br> <b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 5<br> <b>Output:</b> false
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is an iterator method. For each loops, use <code>% 2</code> to get a remainder, if a remainder is zero, n will be <code>n / 2</code>. Until <code>n % 2</code> is not equal to zero, return <code>n == 1</code>.<br></p>
<p><b>Time complexity: O(logn)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This is a bit operation. Let me take some examples of the power of 2:<br> n = 1 -&gt; 00000001 (bit)<br> n = 2 -&gt; 00000010 (bit)<br> n = 4 -&gt; 00000100 (bit)<br> n = 8 -&gt; 00001000 (bit)<br>    .<br>    .<br>    .<br> n = 128 -&gt; 010000000 (bit)<br></p>
<p>If <code>n - 1</code>, most of bits change from 0 to 1 and there is one bit turn to 0.<br> Hence, <code>&amp;</code> operation is a easy way to check whether it is the power of 2. If n is the power of 2, <code>(n &amp; (n - 1))</code> is 0.<br></p>
<p><b>Time complexity: O(1)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n &gt; <span class="number">0</span>) &amp;&amp; ( (n &amp; (n<span class="number">-1</span>)) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Logical_Operators</tag>
      </tags>
  </entry>
  <entry>
    <title>Run PyCharm: Python development platform on Ubuntu (Ryu SDN)</title>
    <url>/posts/784045ef/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Tutorial - PyCharm Installation and build project environment for the development of Ryu controller</b></font>
</p>
<h2 id="what-is-pycharm">What is PyCharm?</h2>
<p>Are you developing python project on Ubuntu right now? When you are writing code, I guess that you edit file by <code>vi</code>, <code>vim</code> or 'gedit'. Maybe these tools are convenient to you, but those are inefficient and hard to maintain program for the development of big projet.<br> <a id="more"></a></p>
<p>PyCharm is one of the most popular Python IDEs. It provides <u>code analysis</u>, <u>a graphical debugger</u>, <u>an integrated unit tester</u>, integration with <u>version control systems</u> (VCSes), and supports <u>web development with Django</u> as well as <u>data science with Anaconda</u>.<br></p>
<p>And, it is cross-platform, compatible with Windows, macOS and Linux versions. Also, it supports both Python 2 (2.7) and Python 3 (3.5 and above) versions.</p>
<h2 id="installation">Installation</h2>
<ul>
<li><p><strong>Step 1.</strong> Download the <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> to your Ubuntu system</p></li>
<li><p><strong>Step 2.</strong> Unpack the pycharm-*.tar.gz file (The recommended installation location according to the filesystem hierarchy standard (FHS) is /opt.) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo tar xfz pycharm-*.tar.gz -C /opt/</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 3.</strong> Go to the bin subdirectory <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd /opt/pycharm-*/bin</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 4.</strong> Run pycharm.sh from the bin subdirectory <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ./pycharm.sh</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 5.</strong> Choose “Do not import settings” as below: <img src="figure1.png" /></p></li>
<li><p><strong>Step 6.</strong> Select the user interface theme</p></li>
<li><p><strong>Step 7.</strong> Download and install additional pyugins</p></li>
<li><p><strong>Step 8.</strong> Start a project in PyCharm <img src="figure2.png" /></p></li>
</ul>
<h2 id="debug-ryu-sdn-controller">Debug Ryu SDN controller</h2>
<ul>
<li><p><strong>Step 1.</strong> First, build a new project. Then, create a python file (compile file) <img src="figure_3.png" /></p></li>
<li><p><strong>Step 2.</strong> Paste the code as below: (Notice: you must set your directory of controller.py) <img src="figure_4.png" /></p></li>
<li><p><strong>Step 3.</strong> Create a controller.py (You can paste the source code of simple_switch_13.py to controller.py) <img src="figure_5.png" /></p></li>
<li><p><strong>Step 4.</strong> Change a project interpreter 3.4 to 2.7 version (File-&gt;settings-&gt;Project-&gt;Project Interpreter) <img src="figure_6.png" /></p></li>
<li><p><strong>Step 5.</strong> Finally, debugging the controller.py and get currect result <img src="figure_7.png" /></p></li>
</ul>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>Python</tag>
        <tag>Platform</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Quick Sort</title>
    <url>/posts/91a7f1d8/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Quick Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>Take one element as the pivot to separate two parts from another elements. For the convenient, we always takes the last element as the pivot.<br> <a id="more"></a></p>
<p>There is a partition function, search the elements in the range <code>[left:right - 1]</code>, if the element <code>vec[j]</code> is smaller than <code>vec[piovt]</code>, call swap() for putting the smaller element to left side. On the contrary, put the larger element to right side.<br></p>
<p>Finally, <code>++i</code> is very important, it means shifting the index to point the right side with larger elements. And, call swap() to move pivot to the middle between left side and right side.<br></p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(nlogn)
</li>
<li>
Worst Case：Ο(n<sup>2</sup>)
</li>
<li>
Average Case：Ο(nlogn)
</li>
<p><b>Space complexity: O(1)</b><br></p>
<p>Stable/Unstable: <b>Unstable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; l, <span class="keyword">int</span>&amp; r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = l;</span><br><span class="line">    l = r;</span><br><span class="line">    r = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = l - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> pivotValue = vec[r];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt; r; ++j)&#123;</span><br><span class="line">      <span class="keyword">if</span>(vec[j] &lt; pivotValue)&#123;</span><br><span class="line">          i++;</span><br><span class="line">          swap(vec[i], vec[j]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ++i;</span><br><span class="line">  swap(vec[i], vec[r]);</span><br><span class="line">  print(vec);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = partition(vec, l, r);</span><br><span class="line">        quickSort(vec, l, pivot - <span class="number">1</span>);</span><br><span class="line">        quickSort(vec, pivot + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">65</span>,<span class="number">54</span>,<span class="number">35</span>,<span class="number">93</span>,<span class="number">99</span>,<span class="number">40</span>,<span class="number">46</span>,<span class="number">64</span>,<span class="number">76</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    quickSort(vec, <span class="number">0</span>, vec.size() - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Final answer:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted Array - Solution/C++</title>
    <url>/posts/7241c2c1/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>26. Remove Duplicates from Sorted Array</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <font color=#808080>in-place</font> with O(1) extra memory. <a id="more"></a> <br> <strong>Clarification:</strong> Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>
Internally you can think of this:
<p style="background-color:#F0F0F0">
// <b>nums</b> is passed in by reference. (i.e., without making a copy)<br>int len = removeDuplicates(nums);<br><br>// any modification to <b>nums</b> in your function would be known by the caller.<br>// using the length returned by your function, it prints the first <b>len</b> elements.<br>for (int i = 0; i &lt; len; i++) {<br>  print(nums[i]);<br>}
</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,1,2]<br><b>Output:</b> 2, nums = [1,2]<br><b>Explanation:</b> Your function should return length = <b>2</b>, with the first two elements of nums being <b>1</b> and <b>2</b> respectively. It doesn't matter what you leave beyond the returned length.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0,0,1,1,1,2,2,3,3,4]<br><b>Output:</b> 5, nums = [0,1,2,3,4]<br><b>Explanation:</b> Your function should return length = <b>5</b>, with the first five elements of nums being modified to <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, and <b>4</b> respectively. It doesn't matter what values are set beyond the returned length.<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 3 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= nums[i] &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums is sorted in ascending order.</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This is a simple solution. Remain the first element, so a count index is start from 1. Use a loop to compare with each elements, if it find the result is true, store the element and shift a count index.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nums.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i - <span class="number">1</span>] != nums[i])</span><br><span class="line">                nums[count++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This better solution is refered to <a href="https://zxi.mytechroad.com/blog/algorithms/array/leetcode-26-remove-duplicates-from-sorted-array/">Huahua's Tech Road</a>.<br> At first, <code>nums[count++] = nums[i]</code> aims to store the first element and shift a count index. Declare a new variable j as <code>i + 1</code> to find the element which is not equal to nums[i]. Then, if it is found, use <code>i = j</code> to record index.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            nums[count++] = nums[i];</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt; n &amp;&amp; nums[j] == nums[i]) j++;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Element - Solution/C++</title>
    <url>/posts/1afffcb4/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>27. Remove Element</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array nums and a value val, remove all instances of that value <font color=#808080>in-place</font> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> <font color=#808080>in-place</font> with O(1) extra memory.</p>
<p>The order of elements can be changed. It doesn't matter what you leave beyond the new length. <a id="more"></a> <strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>
Internally you can think of this:
<p style="background-color:#F0F0F0">
// <b>nums</b> is passed in by reference. (i.e., without making a copy)<br>int len = removeElement(nums, val);<br>// any modification to <b>nums</b> in your function would be known by the caller.<br>// using the length returned by your function, it prints the first <b>len</b> elements.<br>for (int i = 0; i &lt; len; i++) {<br>  print(nums[i]);<br>}<br>
</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [3,2,2,3], val = 3<br> <b>Output:</b> 2, nums = [2,2]<br> <b>Explanation:</b> Your function should return length = 2, with the first two elements of nums being 2.<br> It doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,3,0,0], your answer will be accepted.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0,1,2,2,3,0,4,2], val = 2<br><b>Output:</b> 5, nums = [0,1,4,0,3]<br><b>Explanation:</b> Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 100</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums[i] &lt;= 50</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= val &lt;= 100</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-１"><u>Version １</u></h3>
<p>Idea:<br> The strategy is the same as <a href="https://egbert-yu-ting.github.io/posts/7241c2c1/">LeetCode 26</a>.<br> Declare a count index that starts from 0, aim to store the element if it isn't equal to val.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val)&#123;</span><br><span class="line">                nums[count++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Vector</tag>
        <tag>Call_by_reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Linked List Elements - Solution/C++</title>
    <url>/posts/2ded864c/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>203. Remove Linked List Elements</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Remove all elements from a linked list of integers that have value <I><b>val</b></I>.</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <I><b>val</b></I> = 6<br> <b>Output:</b> 1-&gt;2-&gt;3-&gt;4-&gt;5
</p>
<a id="more"></a>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Some inputs maybe like 1-&gt;1-&gt;2-&gt;3-&gt;null (val=1) or 1-&gt;1-&gt;1 (val=1), you have to do check to filer these elements at 16-18.<br></p>
<p>At 20-22 line, I declare a new ListNode, and link to <b>head</b>.<br> At 23-30 line, you should check the next value of head's element whether it'e equal to <b>val</b>, if it is true at 24 line, it will link to after the next element.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head &amp;&amp; head-&gt;val == val)&#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* next = &amp;dummy;</span><br><span class="line">        next-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(head &amp;&amp; head-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                head-&gt;next = head-&gt;next-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                next-&gt;next = head;</span><br><span class="line">                next = next-&gt;next;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> Declaring a new ListNode to recode the elements won't be necessary, you only delcare a pointer to point <b>head</b>, and return <b>head</b> at last.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head &amp;&amp; head-&gt;val == val)&#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr &amp;&amp; curr-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Nth Node From End of List - Solution/C++</title>
    <url>/posts/d7f73c78/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>19. Remove Nth Node From End of List</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the <span style="background-color:#F0F0F0"><font color=#808080>head</font></span> of a linked list, remove the <span style="background-color:#F0F0F0"><font color=#808080>n<sup>th</sup></font></span> node from the end of the list and return its head.</p>
<p><b>Follow up:</b> Could you do this in one pass? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="example.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1,2,3,4,5], n = 2<br> <b>Output:</b> [1,2,3,5]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1], n = 1<br> <b>Output:</b> []
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1,2], n = 1<br> <b>Output:</b> [1]
</p>
<strong>Constaints:</strong> <strong>
<li>
The number of nodes in the list is <span style="background-color:#F0F0F0"><font color=#808080>sz</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>01 &lt;= sz &lt;= 30</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>00 &lt;= Node.val &lt;= 100</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>01 &lt;= n &lt;= sz</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This method uses fast &amp; slow pointers. It is similar with <a href="https://egbert-yu-ting.github.io/posts/44e8eae/?highlight=fast">141. Linked List Cycle</a>.<br></p>
<p>Fast pointer moves <code>n</code> steps first. It means the distance is <code>n</code> between fast pointer and slow pointer.<br></p>
<p>What the concept of the method?<br> When the fast pointer reaches to the end of the list, the slow points will stop at n<sup>th</sup> from the end of the list. At the monent, the next node of slow pointer is the answer to remove it.<br></p>
<p>The demonstration is shown as below:<br> <img src="demonstration.png" /></p>
<p><b>Time complexity: O(L)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* ptr = &amp;dummy;</span><br><span class="line">        ptr-&gt;next = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> fast = ptr;</span><br><span class="line">        <span class="keyword">auto</span> slow = ptr;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(n-- &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                slow = slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted List - Solution/C++</title>
    <url>/posts/66cc46ab/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>83. Remove Duplicates from Sorted List</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a sorted linked list, delete all duplicates such that each element appear only once. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> 1-&gt;1-&gt;2<br> <b>Output:</b> 1-&gt;2<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> 1-&gt;1-&gt;2-&gt;3-&gt;3<br> <b>Output:</b> 1-&gt;2-&gt;3<br>
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> We can use original List to check each elements. If the current pointer of value is equal to the next pointer of value, we use <code>tail-&gt;next = tail-&gt;next-&gt;next</code> to skip the next pointer. So, We can return head that is unduplicated List.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *tail = head;</span><br><span class="line">        <span class="keyword">while</span>(tail &amp;&amp; tail-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tail-&gt;val == tail-&gt;next-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next = tail-&gt;next-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> If we don't want to modify the List of head, we can delcare a new ListNode, as dummy. Before going into the while statement, we must assign a first value of head to <code>tail-&gt;next</code> that is a pointer of the list of dummy. Then we can compare a value of tail with a value of head.<br> <em>Notice: return dummy must be <code>dummy.next</code>, because the first value is an initial value.</em><br></p>
<p>The solution is refered to <a href="https://zxi.mytechroad.com/blog/list/leetcode-83-remove-duplicates-from-sorted-list/">Huahua's Tech Road</a>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* tail = &amp;dummy;</span><br><span class="line">        tail-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head &amp;&amp; head-&gt;val == tail-&gt;next-&gt;val) head = head-&gt;next;</span><br><span class="line">            tail-&gt;next-&gt;next = head;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Reverse Bits - Solution/C++</title>
    <url>/posts/417b9784/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>190. Reverse Bits</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Reverse bits of a given 32 bits unsigned integer.</p>
<b>Note:</b><br>
<ul>
<li>
Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
</li>
<li>
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
</li>
</ul>
<a id="more"></a>
<p><b>Follow up:</b><br> If this function is called many times, how would you optimize it?</p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 00000010100101000001111010011100<br> <b>Output:</b>  964176192 (00111001011110000010100101000000)<br> <b>Explanation:</b> The input binary string <b>00000010100101000001111010011100</b> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <b>00111001011110000010100101000000</b>.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> n = 11111111111111111111111111111101<br> <b>Output:</b>  3221225471 (10111111111111111111111111111111)<br> <b>Explanation:</b> The input binary string <b>11111111111111111111111111111101</b> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <b>10111111111111111111111111111111</b>.
</p>
<strong>Constraints:</strong> <strong>
<li>
The input must be a <b>binary string</b> of length <span style="background-color:#F0F0F0"><font color=#808080>32</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The solution is similar with <a href="https://egbert-yu-ting.github.io/posts/e6133085/">67. Add Binary</a>, those need to use shift operation.<br></p>
<p>First, you must understand <code>&gt;&gt;</code> and <code>&lt;&lt;</code> how does is work. In this question, we need to get the reverse bits, therefore the processing of the bits starts from the rightmost. When we have handled 1 bit, the input should be shifted right 1 position. Hence, the right-shifted operation is <code>&gt;&gt;</code> at 7 line.<br></p>
<p>How to handle the rightmost bits? At 6 line, we have a <code>res</code> variable to store each bit of the input, it need to shift left 1 to create a bit with zeor value at the rightmost.<br> <code>n &amp; 1</code> means taking 1 bit value of the input at the rightmost.<br> <code>|</code> is OR operation, it likes ADD action. E.g.,<br> 0 OR 0 = 0<br> 0 OR 1 = 1<br> So, after running 32 times, we can get correct reverse bits.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">            res = (res &lt;&lt; <span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">            n &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Shift_Operators</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Reverse Integer - Solution/C++</title>
    <url>/posts/236b1bbd/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>7. Reverse Integer</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p><strong>Note:</strong> Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−2^31, 2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = 123<br><b>Output</b>: 321<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = -123<br><b>Output</b>: -321<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = 120<br><b>Output</b>: 21<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: x = 0<br><b>Output</b>: 0<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
-2^31 &lt;= x &lt;= 2^31 -1
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> At the begining, I need to get units digit, so the modulus operator % can compute the remainder. Then, the remainder should be added to answer(return value) after answer times ten for each loop. <code>x = x / 10</code> means removing units digit for getting hundreds digit. Don't forget the constraints, use values of INT_MIN and INT_MAX to implement it.<br> P.S. <code>return (conditional)?true:false</code><br></p>
<p><b>Time complexity: O(floor(log(10)x) + 1)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ans&gt;INT_MIN &amp;&amp; ans&lt;INT_MAX)?ans:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Remainder</tag>
        <tag>Quotient</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Reverse Linked List - Solution/C++</title>
    <url>/posts/c6ae99a5/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>206. Reverse Linked List</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the <span style="background-color:#F0F0F0"><font color=#808080>head</font></span> of a singly linked list, reverse the list, and return <I>the reversed list</I>. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<img src="Reverse_Linked_List_example1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1,2,3,4,5]<br> <b>Output:</b> [5,4,3,2,1]
</p>
<img src="Reverse_Linked_List_example2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> head = [1,2]<br> <b>Output:</b> [2,1]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> head = []<br> <b>Output:</b> []
</p>
<strong>Constraints:</strong> <strong>
<li>
The number of nodes in the list is the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 5000]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-5000 &lt;= Node.val &lt;= 5000</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> A demonstration is shonw as below: <img src="reverse_list_demonstration.png" /></p>
<p>There are four steps to do: 1) Declare a <code>curr</code> variable that it's a pointer of ListNode to point head ListNode. Shift one position every loop. 2) Change a <code>head-&gt;next</code> to <code>prev</code> ListNode. It means proceeding the redirection or revering. Notice: <code>prev</code> ListNode is a new ListNOde with no value (only NULL). 3) Update <code>prev</code> to <code>head</code>. 4) Update <code>head</code> to <code>curr</code>. Repeat (1) - (4) steps until <code>head</code> is NULL.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        ListNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            curr = head-&gt;next;</span><br><span class="line">            head-&gt;next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>ListNode</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Roman to Integer - Solution/C++</title>
    <url>/posts/8caf8f3c/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>13. Roman to Integer</b></font>
</p>
<h2 id="question">Question:</h2>
Roman numerals are represented by seven different symbols: <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(I\)</span></font></span>, <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(V\)</span></font></span>, <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(X\)</span></font></span>, <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(L\)</span></font></span>, <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(C\)</span></font></span>, <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(D\)</span></font></span> and <span style="background-color:#F0F0F0"><font color=#808080>M</font></span>.
<p style="background-color:F0F0F0">
<b>Symbol</b>  <b>Value</b><br>  <span class="math inline">\(I\)</span>       1<br> <span class="math inline">\(V\)</span>      5<br> <span class="math inline">\(X\)</span>      10<br> <span class="math inline">\(L\)</span>       50<br> <span class="math inline">\(C\)</span>      100<br> <span class="math inline">\(D\)</span>      500<br> <span class="math inline">\(M\)</span>        1000
</p>
<a id="more"></a>
<p>For example, <span style="background-color:#F0F0F0"><font color=#808080>2</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(II\)</span></font></span> in Roman numeral, just two one's added together. <span style="background-color:#F0F0F0"><font color=#808080>12</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(XII\)</span></font></span>, which is simply <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(X + II\)</span></font></span>. The number <span style="background-color:#F0F0F0"><font color=#808080>27</font></span> is written as <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(XXVII\)</span></font></span>, which is <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(XX + V + II\)</span></font></span>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(IIII\)</span></font></span>. Instead, the number four is written as <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(IV\)</span></font></span>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(IX\)</span></font></span>. There are six instances where subtraction is used:</p>
<ul>
<li><span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(I\)</span></font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(V\)</span></font></span> (5) and <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(X\)</span></font></span> (10) to make 4 and 9.</li>
<li><span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(X\)</span></font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(L\)</span></font></span> (50) and <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(C\)</span></font></span> (100) to make 40 and 90.</li>
<li><span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(C\)</span></font></span> can be placed before <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(D\)</span></font></span> (500) and <span style="background-color:#F0F0F0"><font color=#808080><span class="math inline">\(M\)</span></font></span> (1000) to make 400 and 900. Given a roman numeral, convert it to an integer.</li>
</ul>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "<span class="math inline">\(III\)</span>"<br><b>Output:</b> 3<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "<span class="math inline">\(IV\)</span>"<br><b>Output:</b> 4<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "<span class="math inline">\(IX\)</span>"<br><b>Output:</b> 9<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "<span class="math inline">\(LVIII\)</span>"<br><b>Output:</b> 58<br><b>Explanation:</b> <span class="math inline">\(L\)</span> = 50, <span class="math inline">\(V\)</span>= 5, <span class="math inline">\(III\)</span> = 3.<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "<span class="math inline">\(MCMXCIV\)</span>"<b>Output:</b> 1994<br><b>Explanation:</b> <span class="math inline">\(M\)</span> = 1000, <span class="math inline">\(CM\)</span> = 900, <span class="math inline">\(XC\)</span> = 90 and <span class="math inline">\(IV\)</span> = 4.<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
1 &lt;= s.length &lt;= 15
</li>
</strong> <strong>
<li>
s contains only the characters ('<span class="math inline">\(I\)</span>', '<span class="math inline">\(V\)</span>', '<span class="math inline">\(X\)</span>', '<span class="math inline">\(L\)</span>', '<span class="math inline">\(C\)</span>', '<span class="math inline">\(D\)</span>', '<span class="math inline">\(M\)</span>').
</li>
</strong> <strong>
<li>
It is guaranteed that s is a valid roman numeral in the range [1, 3999].
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> At first, I thought these symbols can be built by using vector directly. After my careful thought, a map container is a easy way to store elements by a combination of a key value and a mapped value. Next step, I used a loop to check each characters, if <code>symbol[s[i]] &gt;= symbol[s[i + 1]]</code> is true, add symbol[s[i]] up. On the contrary, if <code>symbol[s[i]] &lt; symbol[s[i + 1]]</code> is true, subtract symbol[s[i]] from summation.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        map&lt;char, int&gt; symbol(&#123;&#123;&#x27;I&#x27;, 1&#125;, &#123;&#x27;V&#x27;, 5&#125;, &#123;&#x27;X&#x27;, 10&#125;, &#123;&#x27;L&#x27;, 50&#125;, &#123;&#x27;C&#x27;, 100,&#125;, &#123;&#x27;D&#x27;, 500&#125;, &#123;&#x27;M&#x27;, 1000&#125;&#125;);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol[s[i]] &gt;= symbol[s[i + <span class="number">1</span>]])&#123;</span><br><span class="line">                sum += symbol[s[i]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum -= symbol[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This is a way to reduce a computing time. Add symbol[s[i]] value first, then check a value of s[i - 1] element whether it is less than a value of s[i] or not. If it is true, the summation need to subtract twice value of symbol[s[i - 1]]. So, it implements the less conditional operator.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        map&lt;char, int&gt; symbol(&#123;&#123;&#x27;I&#x27;, 1&#125;, &#123;&#x27;V&#x27;, 5&#125;, &#123;&#x27;X&#x27;, 10&#125;, &#123;&#x27;L&#x27;, 50&#125;, &#123;&#x27;C&#x27;, 100,&#125;, &#123;&#x27;D&#x27;, 500&#125;, &#123;&#x27;M&#x27;, 1000&#125;&#125;);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            sum += symbol[s[i]];</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; symbol[s[i - <span class="number">1</span>]] &lt; symbol[s[i]])&#123;</span><br><span class="line">                sum -= <span class="number">2</span>*symbol[s[i <span class="number">-1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[One-time success] How to install Ryu on Ubuntu - Tutorial</title>
    <url>/posts/9e0f4e5/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Tutorial - Install Ryu in Ubuntu 16.04 with no failure</b></font>
</p>
<p><a href="https://ryu.readthedocs.io/en/latest/index.html">Ryu</a> is a component-based software defined networking framework. It's very easy to develop your own SDN controller. And, if you have any questions, there are rich source on the internet. <a id="more"></a></p>
<h2 id="start-to-configure-and-install">Start to configure and install</h2>
<ul>
<li><strong>Step 1.</strong> Download package information from all configured sources. (The sources often defined in /etc/apt/sources) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 2.</strong> Install dependencies for building the required Python packages on your system <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-pip python-dev</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-eventlet python-routes python-webob python-paramiko python-dev</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 3.</strong> We will download Ryu source code from github, so git is necessary. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 4.</strong> Download Ryu source code from github <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/osrg/ryu.git</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 5.</strong> <a href="https://networkx.org/documentation/stable/index.html">NetworkX</a> is very important software to support your development of SDN controller. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ pip install networkx</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 6.</strong> Install Ryu <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd ryu/</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo python ./setup.py install</span><br></pre></td></tr></table></figure></li>
<li><strong>Step 7.</strong> Execution and testing <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ryu-manager</span><br></pre></td></tr></table></figure> // If your installation is successful, the terminal will show some info. and stop to listening:
<p style="background-color:#F0F0F0">
loading app ryu.controller.ofp_handler<br> instantiating app ryu.controller.ofp_handler of OFPHandler
</p>
<hr />
<p>
<font color=#FF0000>Warning: if you execute “ryu-manager” and get an error!</font>
</p>
<p>
<b>Solution:</b>
</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd ryu/</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -r tools/pip-requires</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo pip install six --upgrade</span><br></pre></td></tr></table></figure>
<font color=#FF0000>Warning: if you execute “ryu-manager” and get an error as below:</font> <font color=#FF0000><b>class ConfigurationSourceDriver(object, metaclass=abc.ABCMeta):</b><br>   <b>SyntaxError: ivalid syntax</b></font><br> <b>Solution:</b> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/lib/python2.7/dist-packages/</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo rm –rf oslo_config/</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo git clone https://github.com/openstack/oslo.config -b stable/ocata</span><br></pre></td></tr></table></figure> From the above, the command is refered to:<br> http://gogosatellite.blogspot.com/2016/05/openstack-oslo-config-tutorial.html <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd oslo.config</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo python setup.py install</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Simulator</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SDN</tag>
        <tag>Controller</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Same Tree - Solution/C++</title>
    <url>/posts/2ef96137/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>100. Same Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given the roots of two binary trees <span style="background-color:#F0F0F0"><font color=#808080>p</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>q</font></span>, write a function to check if they are the same or not.</p>
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. <a id="more"></a> ## Example: <img src="SameTree_example1.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> p = [1,2,3], q = [1,2,3]<br> <b>Output:</b> true<br>
</p>
<img src="SameTree_example2.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> p = [1,2], q = [1,null,2]<br> <b>Output</b>: false<br>
</p>
<img src="SameTree_example3.png" />
<p style="background-color:#F0F0F0">
<b>Input:</b> p = [1,2,1], q = [1,1,2]<br> <b>Output:</b> false<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
TThe number of nodes in both trees is in the range <span style="background-color:#F0F0F0"><font color=#808080>[0, 100]</font></span>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= Node.val &lt;= 10^4</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This is my first time to process binary tree. After realizing question and example, it lets me recollect the solution of <a href="https://egbert-yu-ting.github.io/posts/61be1b10/">LeetCode 21</a>.<br></p>
<p>I can use a similar if statement to code. But, I still don't know how to compare two binary trees of their child. So, I refered to <a href="https://www.programcreek.com/2012/12/check-if-two-trees-are-same-or-not/">programcreek</a>.<br> Finally, I saw source code and understood the solution immediately. We can use recursion to bind the child checking (left &amp; right).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span> &amp;&amp; q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="literal">NULL</span> || q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val==q-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Search Insert Position - Solution/C++</title>
    <url>/posts/41fdcb04/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>35. Search Insert Position</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,3,5,6], target = 5<br><b>Output:</b> 2<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,3,5,6], target = 2<br><b>Output:</b> 1<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,3,5,6], target = 7<br><b>Output:</b> 4<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1,3,5,6], target = 0<br><b>Output:</b> 0<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1], target = 0<br><b>Output:</b> 0<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums.length &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= nums[i] &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums contains <b>distinct</b> values sorted in <b>ascending</b> order.</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10^4 &lt;= target &lt;= 10^4</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> It is an intuitive method, use a loop to match each elements.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="version-2"><u>Version 2</u></h2>
<p>Idea:<br> The solution is refered to <a href="https://zxi.mytechroad.com/blog/algorithms/binary-search/leetcode-35-search-insert-position/">Huahua's Tech Road</a>.<br> It is an efficient approach to process large size of vector. <code>m = l + (r - 1) / 2</code> is a key to divide into two parts. Then, get one of parts that consists target (Reduce computing time), repeats it until we find the accurate position.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.size();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;      </span><br><span class="line">      <span class="keyword">if</span> (nums[m] == target)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (nums[m] &gt; target)</span><br><span class="line">        r = m;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        l = m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structures - Selection Sort</title>
    <url>/posts/74223785/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Selection Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>Declare two variables, <code>i</code> likes the end pointer of sorted vector and <code>j</code> likes the scanning pointer.<br> <a id="more"></a></p>
<p>Aims to find the <b>smallest value</b> (or <b>biggest value</b>), therefore, <code>j</code> starts from <code>i</code> to scan until the end of <code>nums</code>. Then, the smallest value is changed with the value of index <code>i</code> by calling swap(). It means adding the smallest value to the sorted vector. Next step, i moves to the next index and go back to the previous action until all values are sorted.</p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(n<sup>2</sup>)
</li>
<li>
Worst Case：Ο(n<sup>2</sup>)
</li>
<li>
Average Case：Ο(n<sup>2</sup>)
</li>
<p>P.S. Whatever the input is, there are two for-loop to run!<br></p>
<p><b>Space complexity: O(1)</b><br></p>
<p>Stable/Unstable: <b>Unstable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; l, <span class="keyword">int</span>&amp; r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = l;</span><br><span class="line">    l = r;</span><br><span class="line">    r = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">selectSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min_value = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; min_value)&#123;</span><br><span class="line">                min_value = nums[j];</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos != i)&#123;</span><br><span class="line">            swap(nums[i], nums[pos]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input&#123;<span class="number">51</span>,<span class="number">96</span>,<span class="number">6</span>,<span class="number">68</span>,<span class="number">36</span>,<span class="number">27</span>,<span class="number">55</span>,<span class="number">6</span>,<span class="number">56</span>,<span class="number">16</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortedAns = selectSort(input);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sortedAns.size(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sortedAns[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Single Number - Solution/C++</title>
    <url>/posts/f249b7a1/</url>
    <content><![CDATA[<h2 id="question">Question:</h2>
<p>Given a <strong>non-empty</strong> array of integers nums, every element appears twice except for one. Find that single one.</p>
<p><strong>Follow up:</strong> Could you implement a solution with a linear runtime complexity and without using extra memory? <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [2,2,1]<br> <b>Output:</b> 1
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [4,1,2,1,2]<br> <b>Output:</b> 4
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [1]<br> <b>Output:</b> 1
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= nums.length &lt;= 3 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-3 * 10^4 &lt;= nums[i] &lt;= 3 * 10^4</font></span>
</li>
</strong> <strong>
<li>
Each element in the array appears twice except for one element which appears only once.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> I need a pool to store elements, those are recorded by a counter. Hence, I remember one of LeetCode question I had done before. The question of <a href="https://egbert-yu-ting.github.io/posts/b98c8b25/">Two Sum</a> solution is <strong>map</strong>. A map container is supporting generic type key-value pairs with the templates.<br></p>
<p>Therefore, the elements of nums vector will be stored into map&lt;int,int&gt;, I set the element as a key (unique), give 1 as a value (means a counter). If the element is exist in map already, a counter will be added 1.<br></p>
<p>Finally, I use a loop to check each pairs whether a counter is equal to 1. Remember to return a key of pair.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapNum;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            it = mapNum.find(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it == mapNum.end())&#123;</span><br><span class="line">                mapNum.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(nums[i], <span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                it-&gt;second += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(it = mapNum.begin(); it != mapNum.end(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == <span class="number">1</span>)&#123;</span><br><span class="line">                ans = it-&gt;first;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<br> This is an optimal algorithm that refered to internet. A Logical operator is very impressive method to solve it.<br></p>
<p>Exclusive or (<code>XOR</code>) is one of a logicl operator that outputs is true (=1) only when two inputs differ. On the contrary, outputs is false (=0) only when the two inputs are the same.<br></p>
<p>E.g.,<br>    1 0<br> <u>XOR 1 0</u><br>    0 0<br></p>
<p>Hence, we can do XOR for each elements and the result appears only once.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            res ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Logical_Operators</tag>
        <tag>Map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Sqrt(x) - Solution/C++</title>
    <url>/posts/72b31d68/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>69. Sqrt(x)</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a non-negative integer <span style="background-color:#F0F0F0"><font color=#808080>x</font></span>, compute and return <em>the square root of</em> <span style="background-color:#F0F0F0"><font color=#808080>x</font></span>.</p>
<p>Since the return type is an integer, the decimal digits are <b>truncated</b>, and only <b>the integer part</b> of the result is returned. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> x = 4<br><b>Output:</b> 2<br>
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> x = 8<br> <b>Output:</b> 2<br> <b>Explanation:</b> The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.<br>
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= x &lt;= 2^31 - 1</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source Code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> My intuition is divided divisor that is start from 1, we can get remainder, if remainder is equal to divisor, return the divisor; if divisor is bigger than remainder, retrurn the (divisor - 1).<br> This method can work, but it wastes much time.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> divisor = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(divisor &lt;= x)&#123;</span><br><span class="line">            <span class="keyword">int</span> remainder = x / divisor;</span><br><span class="line">            <span class="keyword">if</span>(divisor == remainder) <span class="keyword">return</span> divisor;</span><br><span class="line">            <span class="keyword">if</span>(divisor &gt; remainder) <span class="keyword">return</span> divisor - <span class="number">1</span>;</span><br><span class="line">            divisor ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> divisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea:<be> We can use binary search to improve time complexity. A variable of l means left index, a variable of r means right index and a variable of m means middle index. l must be set 1, because <code>while(l &lt;= r)</code> can filter <code>x = 0</code> test case. We use <code>m * m</code> to find which value can match x.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> r = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(x) ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">long</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ( m * m == x) <span class="keyword">return</span> m;</span><br><span class="line">            <span class="keyword">if</span>( m * m &gt; x)&#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Binary_search</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Summary Ranges - Solution/C++</title>
    <url>/posts/415df519/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>228. Summary Ranges</b></font>
</p>
<h2 id="question">Question:</h2>
<p>You are given a <b>sorted unique</b> integer array <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span>.</p>
<p>Return the <I><b>smallest</b> sorted list of ranges that <b>cover all the numbers in the array exactly</b></I>. That is, each element of <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> is covered by exactly one of the ranges, and there is no integer <span style="background-color:#F0F0F0"><font color=#808080>x</font></span> such that <span style="background-color:#F0F0F0"><font color=#808080>x</font></span> is in one of the ranges but not in <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span>. <a id="more"></a></p>
<p>Each range <span style="background-color:#F0F0F0"><font color=#808080>[a,b]</font></span> in the list should be output as:</p>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>"a-&gt;b"</font></span> if <span style="background-color:#F0F0F0"><font color=#808080>a != b</font></span>
</li>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>"a"</font></span> if <span style="background-color:#F0F0F0"><font color=#808080>a == b</font></span>
</li>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0,1,2,4,5,7]<br> <b>Output:</b> ["0-&gt;2","4-&gt;5","7"]<br> <b>Explanation:</b> The ranges are:<br> [0,2] --&gt; "0-&gt;2"<br> [4,5] --&gt; "4-&gt;5"<br> [7,7] --&gt; "7"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0,2,3,4,6,8,9]<br> <b>Output:</b> ["0","2-&gt;4","6","8-&gt;9"]<br> <b>Explanation:</b> The ranges are:<br> [0,0] --&gt; "0"<br> [2,4] --&gt; "2-&gt;4"<br> [6,6] --&gt; "6"<br> [8,9] --&gt; "8-&gt;9"
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = []<br> <b>Output:</b> []
</p>
<p style="background-color:#F0F0F0">
<p><b>Input:</b> nums = [-1]<br> <b>Output:</b> [-1]<br></p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 20</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</font></sapn>
</li>
</strong> <strong>
<li>
All the values of <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> are <b>unique</b>.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> is sorted in ascending order.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This question is very easy, Use one variable <code>i</code> to record the head of valid range. <code>i</code> will be added 1 while the current value is not same as the next value. On the contrary, there are two sutiations to store the results. One is <code>i = j</code> and the other is <code>i != j</code>.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(k)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">summaryRanges</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            <span class="built_in">string</span> range = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(j + <span class="number">1</span> == n || nums[j] + <span class="number">1</span> != nums[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                    range = to_string(nums[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    range = to_string(nums[i]) + <span class="string">&quot;-&gt;&quot;</span> + to_string(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                res.push_back(range);</span><br><span class="line">                i = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Symmetric Tree - Solution/C++</title>
    <url>/posts/d1f23ab6/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>101. Symmetric Tree</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). <a id="more"></a></p>
<h2 id="example">Example:</h2>
For example, this binary tree <span style="background-color:#F0F0F0"><font color=#808080>[1,2,2,3,4,4,3]</font></span> is symmetric:
<p style="background-color:#F0F0F0">
    1<br>      / \<br>     2   2<br>    / \ / \<br>   3 4 4 3
</p>
But the following <span style="background-color:#F0F0F0"><font color=#808080>[1,2,2,null,3,null,3]</font></span> is not:
<p style="background-color:#F0F0F0">
    1<br>      / \<br>     2   2<br>      \   \<br>     3   3
</p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The strategic is similar to <a href="https://egbert-yu-ting.github.io/posts/2ef96137/#more">Same-Tree</a>. First, we must check the root node whether it's null or not. Then, we use root-&gt;left and root-&gt;right as arguments to call private function.<br></p>
<p>There are some rules we must to know:<br> 1. the value of the left node must be equal to the value of the right node.<br> 2. the value of the left node as the left child node must be equal to the value of the right node as the right child node.<br> 3. the vlaue of the left node as the right child node must be equal to the value of the right node as the left child node.<br> So, we can write to codes based on these ruls at 22~23 line.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSymmetric(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* l, TreeNode* r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l &amp;&amp; !r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!l || !r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (l-&gt;val == r-&gt;val) &amp;&amp; isSymmetric(l-&gt;left, r-&gt;right) </span><br><span class="line">            &amp;&amp; isSymmetric(l-&gt;right, r-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>How to understand recursive function - Tower of Hanoi</title>
    <url>/posts/d1a4dc47/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Tower of Hanoi</b></font>
</p>
<p>Let's realize how does tower of hanoi works and how to use recursive function to implement it!!!</p>
<p>The <strong>Tower of Hanoi</strong> is a mathematical game or puzzle, it's a classical problem during your CSIE studies.</p>
<p><strong>First</strong>, the demonstration of process(3 disks and 3 rods) as below[1]: <img src="https://upload.wikimedia.org/wikipedia/commons/4/4f/Tower_of_Hanoi.gif" alt="animation" /> <a id="more"></a> <strong>Second</strong>, moving the entire stack to another rod need to comply with the following rules: 1. Only one disk can be moved at a time. 2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod. 3. No larger disk may be placed on top of a smaller disk.</p>
<p><strong>Third</strong>, the solutions between 1 disks and 4 disks are shown as following:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">1 disks</th>
<th style="text-align: center;">2 disks</th>
<th style="text-align: center;">3 disks</th>
<th style="text-align: center;">4 disks</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 A-&gt;B</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">2 A-&gt;C</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 B-&gt;C</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3 A-&gt;B</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 A-&gt;C</td>
<td style="text-align: center;">1 C-&gt;A</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">2 A-&gt;B</td>
<td style="text-align: center;">2 C-&gt;B</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">1 A-&gt;B</td>
<td style="text-align: center;">1 C-&gt;B</td>
<td style="text-align: center;">1 A-&gt;B</td>
</tr>
<tr class="even">
<td style="text-align: center;">1 A-&gt;C</td>
<td style="text-align: center;">2 A-&gt;C</td>
<td style="text-align: center;">3 A-&gt;C</td>
<td style="text-align: center;">4 A-&gt;C</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">1 B-&gt;C</td>
<td style="text-align: center;">1 B-&gt;A</td>
<td style="text-align: center;">1 B-&gt;C</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">2 B-&gt;C</td>
<td style="text-align: center;">2 B-&gt;A</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 A-&gt;C</td>
<td style="text-align: center;">1 C-&gt;A</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3 B-&gt;C</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 A-&gt;B</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">2 A-&gt;C</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1 B-&gt;C</td>
</tr>
</tbody>
</table>
<p>we can find regular movement! In short, the pattern can be proposed: + Shift 'n-1' disks from 'A' to 'B'. + Shift last disk from 'A' to 'C'. + Shift 'n-1' disks from 'B' to 'C'.</p>
<p><strong>Finally</strong>, we can get complicated solution by computing:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> start, <span class="keyword">char</span> temp, <span class="keyword">char</span> target, <span class="keyword">int</span> &amp;moved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Move &quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; target &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        moved++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hanoi(n - <span class="number">1</span>, start, target, temp, moved);</span><br><span class="line">        hanoi(<span class="number">1</span>, start, temp, target, moved);</span><br><span class="line">        hanoi(n - <span class="number">1</span>, temp, start, target, moved);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">3</span>, moved = <span class="number">0</span>;</span><br><span class="line">   hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span> , moved);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Total moved &quot;</span> &lt;&lt; moved &lt;&lt; <span class="string">&quot; steps&quot;</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Explanation:<br> In the main(), I declare "n" is represented the number of dists and "moved" is a counter. At 19 line, call hanoi() function which consists 5 argument ('A', 'B' and 'C' are represented each rods).<br> At hanoi() function, it checks n whether it's equal to 1 at 6 line, but it's invalid at the first time. So, the program runs else part.<br> <font color=#FF0000>n = 3 - 1, A C B</font> (<em>recursive call at 10 line</em>) <br>   <font color=#0000FF> n = 2, A C B<br>   =&gt; if statement is invalid, so do else part</font><br>   <font color=#FF0000>n= 2 - 1 , A B C</font> (<em>recursive call</em>)<br>     n = 1, A B C<br>     =&gt; if statement is valid<br>     =&gt; print "Move A → C", moved ++<br>   <font color=#0000FF>n = 1, A C B</font> (<em>recursive call at 11 line</em>)<br>   <font color=#0000FF>=&gt; print "Move A → B", moved ++</font><br>   <font color=#FF0000>n = 2 - 1, C A B</font> (<em>recursive call at 12 line</em>)<br>     n = 1, C A B<br>     =&gt; if statement is valid<br>     =&gt; print "Move C → B", moved ++<br> <font color=#FF0000>n = 1, A B C (<em>recursive call at 11 line</em>)<br> =&gt; if statement is valid<br> =&gt; print "Move A → C", moved ++</font><br> <font color=#FF0000>n = 3 - 1, B A C</font> (<em>recursive call at 12 line</em>)<br>   <font color=#0000FF>n = 2, B A C<br>   =&gt; if statement is invalid, so do else part</font><br>   <font color=#FF0000>n = 2 - 1, B C A</font> (<em>recursive call at 10 line</em>)<br>     n = 1, B C A<br>     =&gt; if statement is valid<br>     =&gt; print "Move B → C", moved ++<br>   <font color=#0000FF>n = 1, B A C</font> (<em>recursive call at 11 line</em>)<br>   <font color=#0000FF>=&gt; print "Move B → C", moved ++</font><br> <font color=#FF0000>n = 2 - 1, A B C (<em>recursive call at 12 line</em>)<br> =&gt; if statement is valid<br> =&gt; print "Move A → C", moved ++</font><br></p>
<p>Reference:<br> [1] André Karwath aka Aka, CC BY-SA 2.5 <a href="https://creativecommons.org/licenses/by-sa/2.5" class="uri">https://creativecommons.org/licenses/by-sa/2.5</a>, via Wikimedia Commons</p>
]]></content>
      <categories>
        <category>Recursion</category>
      </categories>
      <tags>
        <tag>Recursive_function</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Two Sum II - Input array is sorted - Solution/C++</title>
    <url>/posts/a4366474/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Two Sum II - Input array is sorted</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array of integers that is already <b><I>sorted in ascending order</I></b>, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. <a id="more"></a></p>
<b>Note:</b><br> <strong>
<li>
Your returned answers (both index1 and index2) are not zero-based.
</li>
</strong> <strong>
<li>
You may assume that each input would have exactly one solution and you may not use the same element twice.
</li>
<p></strong></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> numbers = [2,7,11,15], target = 9<br> <b>Output:</b> [1,2]<br> <b>Explanation:</b> The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> numbers = [2,3,4], target = 6<br> <b>Output:</b> [1,3]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> numbers = [-1,0], target = -1<br> <b>Output:</b> [1,2]
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>2 &lt;= nums.length &lt;= 3 * 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-1000 &lt;= nums[i] &lt;= 1000</font></span>
</li>
</strong> <strong>
<li>
nums is sorted in increasing order.
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-1000 &lt;= target &lt;= 1000</font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The question is similar with <a href="https://egbert-yu-ting.github.io/posts/b98c8b25/">Two Sum</a>, you can use <strong>Hash Table</strong> to solve it. However, the input is sorted in ascending order, maybe you should try another method.<br></p>
<p>For saving the memory, you can assume the first element as head, the last element as tail, so those formats will be an output. <I>The illustration is shown at the end</I>.<br></p>
<p>A easy way to take the <strong>sum of head and tail</strong> to compare with <strong>target</strong>.<br></p>
<ul>
<li>If the sum is <strong>bigger</strong> than target, <strong>tail minus 1</strong></li>
<li>If the sum is <strong>smaller</strong> than target, <strong>head plus 1</strong></li>
</ul>
<p>Finally, you will find the answer!</p>
<img src="two_sum_II.png" />
<p align="center">
(a.) Figure of input=[1,2,3, 5, 8, ..., 23,24] &amp; target=22
</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = numbers.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[head] + numbers[tail] == target) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(numbers[head] + numbers[tail] &gt; target)&#123;</span><br><span class="line">                tail --;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[head] + numbers[tail] &lt; target)&#123;</span><br><span class="line">                head ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back(head + <span class="number">1</span>);</span><br><span class="line">        res.push_back(tail + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
  </entry>
  <entry>
    <title>[LeetCode Road] Two Sum - Solution/C++</title>
    <url>/posts/b98c8b25/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>1. Two Sum</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array of integers <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> and an integer <span style="background-color:#F0F0F0"><font color=#808080>target</font></span>, return <em>indices of the two numbers such that they add up to target</em>.</p>
<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>You can return the answer in any order. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input</b>: nums = [2,7,11,15], target = 9<br><b>Output</b>: [0,1]<br><b>Output</b>: Because nums[0] + nums[1] == 9, we return [0, 1].
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: nums = [3,2,4], target = 6<br><b>Output</b>: [1,2].
</p>
<p style="background-color:#F0F0F0">
<b>Input</b>: nums = [3,3], target = 6<br><b>Output</b>: [0,1]
</p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> This is my first coding on the LeetCode platform. After reading the problem, my mind's gone blank, I only thought a simple way to solve it. Use two loop to check all numbers, but the time complexity is O(n^2). I knew this method is not efficient!<br></p>
<p><b>Time complexity: O(n<sup>2</sup>)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; returnArray;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                sum = nums[i]+nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                    returnArray.push_back(i);</span><br><span class="line">                    returnArray.push_back(j);</span><br><span class="line">                    <span class="keyword">return</span> returnArray;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-2"><u>Version 2</u></h3>
<p>Idea: So, the source code is refered from online and I added some comments after programming. I heard the Hash Table mechanism at first time. It is a very simple principle, I must remember it! If you want to learn Hash Table, you can see <a href="https://aozturk.medium.com/simple-hash-map-hash-table-implementation-in-c-931965904250">Simple Hash Map</a>.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; returnArray; <span class="comment">// return the ans</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapIndex; <span class="comment">// hash table(key:nums[i], value:index)</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            it = mapIndex.find(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != mapIndex.end())&#123;</span><br><span class="line">                <span class="comment">// found it, it means target - nums[i] = it-&gt;first</span></span><br><span class="line">                returnArray.push_back(it-&gt;second); <span class="comment">// get the value(index) by iterator</span></span><br><span class="line">                returnArray.push_back(i); <span class="comment">// get the current index</span></span><br><span class="line">                <span class="keyword">return</span> returnArray;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// add new element</span></span><br><span class="line">                mapIndex.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(nums[i], i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="version-3"><u>Version 3</u></h3>
<p>Idea:<br> You also can use <code>unordered_map</code> to implement it. <br> And, you don't need to declare a vector as a result container to store indexes.<br></p>
<p><b>Time complexity: O(n)</b><br> <b>Space complexity: O(n)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.find(target - nums[i]) != arr.end())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;arr[target - nums[i]], i&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                arr[nums[i]] = i; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Unordered_map(STL)</tag>
        <tag>Hash_table</tag>
        <tag>Map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Valid Palindromev - Solution/C++</title>
    <url>/posts/1686f472/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>125. Valid Palindrome</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> "A man, a plan, a canal: Panama"<br> <b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> "race a car"<br> <b>Output:</b> false
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</font></span> consists only of printable ASCII characters.
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> You can easily solve the problem by the library function.<br> However, you must understand the description of question, "Palindrome" means that characters of string are the same when you read it forwards from the beginning or backwards from the end.<br></p>
<p>"alphanumeric" the content of question is a key point, you should consider alpha and numeric together（Ignor punctuation marks and whether alpha is uppercase or lowercase or not).<br> So, you shoud call <code>isalnum</code> rather than <code>isalpha</code> to filter characters of string.<br></p>
<p><code>head &lt; tail</code> condition is very important, e.g., input= ".,"<be> Initial: head = 0 &amp; tail=1<br> At 7 line, while() will break when head is added 1(<code>.</code> is not alphanumeric).<br> At 8 line, while() is break direcly, because head = tail (both variables are 1)<br> At 10 line, IF statement will get true and break out of a outer loop.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tail = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head &lt; tail)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head &lt; tail &amp;&amp; !<span class="built_in">isalnum</span>(s[head])) head++;</span><br><span class="line">            <span class="keyword">while</span>(head &lt; tail &amp;&amp; !<span class="built_in">isalnum</span>(s[tail])) tail--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">tolower</span>(s[head]) != <span class="built_in">tolower</span>(s[tail])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            head ++;</span><br><span class="line">            tail --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] Valid Parentheses - Solution/C++</title>
    <url>/posts/5ddd3578/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>20. Valid Parentheses</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given a string <span style="background-color:#F0F0F0"><font color=#808080>s</font></span> containing just the characters <span style="background-color:#F0F0F0"><font color=#808080>'('</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>')'</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>'{'</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>'}'</font></span>, <span style="background-color:#F0F0F0"><font color=#808080>'['</font></span> and <span style="background-color:#F0F0F0"><font color=#808080>']'</font></span>, determine if the input string is valid.</p>
<p>An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "()"<br><b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "()<span></span>"<br><b>Output:</b> true
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "(]"<br><b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "([)]"<br><b>Output:</b> false
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> s = "{[]}"<br><b>Output:</b> true
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>1 &lt;= s.length &lt;= 10^4</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>s</span></font> consists of parentheses only <span style="background-color:#F0F0F0"><font color=#808080>'()<span></span>'.</span></font>
</li>
<p></strong></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> Use map&lt;key, value&gt; to declare the characters. Notice: a string will be process is left parenthese, so these can be used as a value. Then, I can use key-value to do match when right parenthese is processed.<br></p>
<p>I get each characters to check whether it is unrecorded or equal <code>st.top()</code> or not. If it is true, this character be added at the top of the stack. On the contrary, delete the top most element of the stack. Finally, ues <code>st.empty()</code> to return whether the stack is empty. P.S. Stack is LIFO(Last In First Out).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;  match&#123;&#123;<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;, &#123;<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>&#125;,&#123;<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty() || c != st.top())&#123;</span><br><span class="line">                st.push(match[c]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Easy</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Map(STL)</tag>
      </tags>
  </entry>
  <entry>
    <title>Run Visual Studio Code on macOS - Tutorial</title>
    <url>/posts/a7083339/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>Visual Studio Code installation and run it from Terminal on macOS</b></font>
</p>
<h2 id="background">Background</h2>
<p><strong>Visual Studio Code</strong> is a free source-code editor made by Microsoft for Windows, Linux and macOS.<br> Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.</p>
<h2 id="installation">Installation</h2>
<ol type="1">
<li><a href="https://code.visualstudio.com/docs?dv=osx">Download Visual Studio Code</a> for macOS directly. <a id="more"></a></li>
<li>Go to your browser's lownloaded archive.</li>
<li>Extract <em>VSCode-darwin-stable.zip</em> file</li>
<li>Drag <span style="background:#F0F0F0">Visual Studio Code.cpp</span> to the <span style="background:#F0F0F0">Applications</span> folder, making it available in the macOS Launchpad.</li>
</ol>
<h2 id="launching-from-the-command-line">Launching from the command line</h2>
<p>You can type 'code .' in any folder to start editing files in that folder.<br> <font color=#FF0000>Notice: you will meet an error message: <b>“code .” command is not working</b></font></p>
<p><strong>Solution:</strong> You must add Visual Studio Code to the path first:<br></p>
<ol type="1">
<li>Create bash_profile file if it doesn't exist in your system. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ touch ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li>Open this file, click 'i' to edit. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li>Paste it as below, and type ':' + 'wq' to write &amp; quit.&lt; <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&quot;</span><br></pre></td></tr></table></figure></li>
<li>Preserve your current shell, if you miss it, you will repeat step2-step3 again when you reopen the terminal. <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>[Quick and Easy] Installation of ns-3 Simulator with OpenFlow 1.3 - Tutorial</title>
    <url>/posts/8ece0fb0/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>ns-3 configuration and ofswitch13 module - Tutorial</b></font>
</p>
<p>I had deployed the ns-3 simulation with ofswitch13 successfully. I've been struggling to solve the simulation platform a lot of time. So, my experience is quite valuable and self-giving sharing for the ns-3 beginners.<br> The following procedure can be deployed on VMware/Virtual machine or cloud instance.<br> If your want to know how to deploy ns-3 on remote cloud instance easily, I will post an article to demonstrate full steps. <a id="more"></a></p>
<h2 id="what-is-ns-3-network-simulator">What is <a href="https://www.nsnam.org/">ns-3</a> Network Simulator?</h2>
<ul>
<li>A discrete-event network simulator for internet systems</li>
<li>Free software and open source</li>
<li>Packet level</li>
<li>C++ for core/ Python for bindings</li>
<li>Support under Linux, FreeBSD and Cygwin</li>
</ul>
<h2 id="ns-3-simulation-workflow">ns-3 simulation workflow:</h2>
<ol type="1">
<li>Topology definition</li>
<li>Model development</li>
<li>Node and link configuration</li>
<li>Execution</li>
<li>Performance analysis</li>
<li>Graphical Visualization</li>
</ol>
<h2 id="key-terms-adn-abstractions">Key terms adn abstractions:</h2>
<ul>
<li>Node: the virtual hardward (e.g., PC, server, router, smart phone, etc.)</li>
<li>Network device: transimts and receives over the channel with network layer</li>
<li>Channel: transmission medium between Network device (e.g. WiFi, p2p, csma)</li>
<li>Application: creates or receives data packet that send between Nodes with transport layer</li>
<li>Helper: ns-3 construct used to quickly configure and create the above</li>
</ul>
<h2 id="openflow-1.3-module-for-ns-3">OpenFlow 1.3 module for ns-3</h2>
<ul>
<li>The <a href="https://github.com/ljerezchaves/ofswitch13">OFSwitch13 module</a>, which enhances the ns-3 Network Simulator with <a href="https://opennetworking.org/wp-content/uploads/2014/10/openflow-spec-v1.3.0.pdf">OpenFlow 1.3</a> capabilities</li>
<li>Allow ns-3 users to simulate Software-Defined Networks (SDN)</li>
<li>Support internal/external SDN controller
<center>
<img src="OFSwitch13Device_structure.png" alt="OFSwitch13Device structure" /> <b>Fig. 1. The OFSwitch13Device internal structure</b>
</center></li>
</ul>
<h2 id="main-class-function"><a href="http://www.lrc.ic.unicamp.br/~luciano/publications/wns316.pdf">Main class function</a></h2>
<ul>
<li>OpenFlow 1.3 switch network device It can be used to interconnect ns-3 nodes using the existing CSMA network devices and channels.</li>
<li>OpenFlow 1.3 controller interface It provides the basic functionalities for controller implementation.</li>
<li>OpenFlow channel It is the interface that connects each switch to an OpenFlow controller.</li>
<li>ofsoftswitch13 library It provides the complete OpenFlow switch datapath implementation, including input and output ports, the flow-table pipeline for packet matching, the group table, and the meter table. It also provides the OFLib library that is used for converting internal messages to and from OpenFlow 1.3 wire format, and the dpctl utility for converting text commands into internal messages.
<center>
<img src="ofsoftswitch13_library_architecture.png" alt="The ofsoftwitch13 library architecture" /> <b>Fig. 2. The ofsoftswitch13 library architecture</b>
</center></li>
</ul>
<h2 id="start-to-configure-and-build">Start to configure and build</h2>
<ul>
<li><p><strong>Step 1.</strong> You have the following packages installed on your system <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install build-essential gcc g++ python git mercurial unzip cmake</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install pkg-config autoconf libtool libboost-dev</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 2.</strong> Download a recent stable ns-3 code (using the mercurial repository for ns-3.29) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ hg clone http://code.nsnam.org/ns-3.29</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 3.</strong> Download the OFSwitch13 code into the src/ folder <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd ns-3.29/src</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone --recurse-submodules https://github.com/ljerezchaves/ofswitch13.git</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 4.</strong> Update the code to the desired release version (using 4.0.0, which is compatible with ns-3.29 or later) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd ofswitch13</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git checkout 4.0.0 &amp;&amp; git submodule update –recursive</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 5.</strong> It is time to compile the ofsoftswitch13 as a static library (Configure and build the library) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd lib/ofsoftswitch13</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ./boot.sh</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ./configure --enable-ns3-lib</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure> <font color=#FF0000>Warning: if you meet an error as “perl: warning: Setting locale failed”:</font><br> <b>Solution: Add <code>export LC_ALL=“en_US.UTF-8”</code> to bashrc file</b> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo vim .bashrc</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">export LC_ALL=“en_US.UTF-8”</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo locale-gen zh_TW.UTF-8</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 6.</strong> Go back to the ns-3 root directory and patch the ns-3 code with the appropriated patches available under the ofswitch13/utils directory <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ cd ../../../../</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ patch -p1 &lt; src/ofswitch13/utils/ofswitch13-src-3_29.patch</span><br></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ patch -p1 &lt; src/ofswitch13/utils/ofswitch13-doc-3_29.patch</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 7.</strong> Now, configure the ns-3 (Need to check --witch-ofswitch13=your path) <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ./waf configure --enable-tests --enable-examples --enable-sudo --with-ofswitch13=&lt;br&gt;/home/ubuntu/ns-3.29/src/ofswitch13/lib/ofsoftswitch13/</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>Step 8.</strong> Check for the enabled NS-3 OpenFlow 1.3 integration feature after the configuration <img src="ns3_configuration.png" /></p></li>
<li><p><strong>Step 9.</strong> Finally, build the ns-3 simulation <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo ./waf</span><br></pre></td></tr></table></figure> <font color=#FF0000>Warning: if you meet an error as below:</font></p>
<p>
<p><img src="./buildError.png"></p>
</p>
<p><b>Solution: Modify “SuidBuild” → “SuidBuild_task”</b> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sudo vim wscript</span><br></pre></td></tr></table></figure> <img src="./buildError_solution.png"></p>
</p></li>
</ul>
<p><br> <b>Now, you can run your first example script, enjoy it!</b> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ ./waf --run scratch/ofswitch13.first</span><br></pre></td></tr></table></figure> <strong>Notice:</strong><br> 1. <u>Suggest moving your script to scratch folder before executing</u>.<br> 2. <u>Don't add filename extension (e.g. .cc) at your execution's command line</u>.</p>
]]></content>
      <categories>
        <category>Simulator</category>
      </categories>
      <tags>
        <tag>SDN</tag>
        <tag>Simulation</tag>
        <tag>ns-3</tag>
        <tag>ofswitch</tag>
        <tag>OpenFlow1.3</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode Road] 3Sum - Solution/C++</title>
    <url>/posts/b32b0461/</url>
    <content><![CDATA[<p align="center">
<font size="6"><b>15. 3Sum</b></font>
</p>
<h2 id="question">Question:</h2>
<p>Given an array <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> of <I>n</I> integers, are there elements <I>a, b, c</I> in <span style="background-color:#F0F0F0"><font color=#808080>nums</font></span> such that <I>a</I> + <I>b</I> + <I>c</I> = 0? Find all unique triplets in the array which gives the sum of zero.<br></p>
<p>Notice that the solution set must not contain duplicate triplets. <a id="more"></a></p>
<h2 id="example">Example:</h2>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [-1,0,1,2,-1,-4]<br> <b>Output:</b> [[-1,-1,2],[-1,0,1]]
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = []<br> <b>Output:</b> []
</p>
<p style="background-color:#F0F0F0">
<b>Input:</b> nums = [0]<br> <b>Output:</b> []
</p>
<strong>Constraints:</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>0 &lt;= nums.length &lt;= 3000</font></span>
</li>
</strong> <strong>
<li>
<span style="background-color:#F0F0F0"><font color=#808080>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></font></span>
</li>
<p></strong></p>
<h2 id="source-code">Source code:</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<p>Idea:<br> The input is unsorted data, it's hart to find a rules to solve it. Therefore, sort <code>nums</code> first.<br></p>
<p>There are some situations that the program doesn't run necessarily, the explanation of situations are shown as below:<br> 1) The sum of the first three elements is bigger than 0, it means any elements is bigger than 0, so directly break the loop at 11 line.<br> 2) If add the first element <code>nums[i]</code> to the last element <code>nums[n-1]</code> and the second to last element <code>nums[n-2]</code> is small than 0, it's represnets whatever the calculation of sum is always negative number, so directly move <code>i</code> to the next index at 13 line.<br> 3) Avoid the duplicate elements and results at 15 line, because all the possibility are found at <code>nums[i-1]</code>.<br></p>
<p>Then, declare two variables to point the <code>i+1</code> position and the tail of arrayv <code>n-1</code>. There is a search range between <code>i+1</code> and <code>n-1</code>.<br></p>
<p>If <code>nums[i] + nums[j] + nums[k]</code> is not equal to 0, <u>move <code>j</code> to the next index when the sum is small than 0</u> or <u>move <code>k</code> to previous index when the sum is bigger than 0</u>.</p>
<p>If <code>nums[i] + nums[j] + nums[k]</code> is equal to 0, push these elements to 2D vector first, then narrow the search range down, must to check whether the next element is the same as the previous one for avoid the duplicate result at 22 - 27 line.<br></p>
<p><b>Time complexity: O(nlogn + n<sup>2</sup>)</b><br> <b>Space complexity: O(1)</b></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n  = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="comment">//if(n &lt; 3) return res;</span></span><br><span class="line">        </span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">/*the beginning element is bigger than 0, directly break the loop*/</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[n - <span class="number">1</span>] + nums[n - <span class="number">2</span>] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">/*the beginning element add to the most largest element and the element largest element you get result, if result is negative, no reason to calculate*/</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">/*ensure the results are not contain duplicat triplets</span></span><br><span class="line"><span class="comment">            &#x27;i &gt; 0&#x27; statement is necessary for input:[0,0,0]*/</span></span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; k)&#123;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot; &lt;&lt; nums[j] &lt;&lt; &quot; &quot; &lt;&lt;nums[k] &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">int</span> tmp = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">if</span>(tmp == <span class="number">0</span>)&#123;</span><br><span class="line">                    res.push_back(&#123;nums[i] , nums[j] , nums[k]&#125;);</span><br><span class="line">                    ++j;</span><br><span class="line">                    <span class="keyword">while</span>(j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) ++j;</span><br><span class="line">                    --k;</span><br><span class="line">                    <span class="keyword">while</span>(j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) --k;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    --k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode-Medium</category>
      </categories>
  </entry>
  <entry>
    <title>Data Structures - Insertion Sort</title>
    <url>/posts/918ef68a/</url>
    <content><![CDATA[<p align="center">
<font size="6px"><b>Basic programming - Insertion Sort</b></font>
</p>
<h2 id="approach">Approach:</h2>
<p>Need to use two for-loop. One is unsorted data in the range <code>[i:n]</code> and the other is sorted data in the range <code>[0:i]</code>.<br></p>
<p>Take one element from unsorted data to compare with sorted data.<br> <b>Step 1:</b> use <code>temp</code> variable to store this element<br> <b>Step 2:</b> search value from sorted data which is bigger than <code>temp</code> , if true, move the bigger value to current position <code>vector[j] = vector[j - 1]</code><br> <b>Step 3:</b> Until if-statement returns false, it means the value of <code>j - 1</code> is smaller than <code>temp</code>, so insert <code>temp</code> to current position <code>vector[j] = temp</code>.<br> <a id="more"></a></p>
<b>Time complexity:</b><br>
<li>
Best Case：Ο(1)
</li>
<li>
Worst Case：Ο(n<sup>2</sup>)
</li>
<li>
Average Case：Ο(n<sup>2</sup>)
</li>
<p>P.S. If input is sorted, just compare every elements once!</p>
<p><b>Space complexity: O(1)</b><br></p>
<p>Stable/Unstable: <b>Stable</b></p>
<h2 id="source-code">Source code</h2>
<h3 id="version-1"><u>Version 1</u></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, temp;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</span><br><span class="line">      temp = v[i];</span><br><span class="line">      <span class="keyword">for</span>(j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; v[j - <span class="number">1</span>]; --j)&#123;</span><br><span class="line">          v[j] = v[j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      v[j] = temp;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input = &#123;<span class="number">39</span>,<span class="number">63</span>,<span class="number">89</span>,<span class="number">66</span>,<span class="number">42</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">81</span>,<span class="number">47</span>&#125;;</span><br><span class="line">    insertSort(input);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; input[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SortAlgorithm</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
      </tags>
  </entry>
</search>
