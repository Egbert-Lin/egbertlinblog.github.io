<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Egbert Lin&#39;s Blog</title>
  
  <subtitle>“Life is not a race, but a journey to be savoured each step of the way” by Brian Dyson</subtitle>
  <link href="https://egbert-yu-ting.github.io/atom.xml" rel="self"/>
  
  <link href="https://egbert-yu-ting.github.io/"/>
  <updated>2021-01-12T01:45:39.286Z</updated>
  <id>https://egbert-yu-ting.github.io/</id>
  
  <author>
    <name>EgbertLin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[LeetCode Road] Convert Sorted Array to Binary Search Tree</title>
    <link href="https://egbert-yu-ting.github.io/posts/17bf1818/"/>
    <id>https://egbert-yu-ting.github.io/posts/17bf1818/</id>
    <published>2021-01-08T02:44:56.000Z</published>
    <updated>2021-01-12T01:45:39.286Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;108-Convert-Sorted-Array-to-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#108-Convert-Sorted-Array-to-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;108. Convert Sorted Array to Binary Search Tree&quot;&gt;&lt;/a&gt;&lt;center&gt;108. Convert Sorted Array to Binary Search Tree&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given an array where elements are sorted in ascending order, convert it to a height balanced BST.&lt;/p&gt;
&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
    <category term="TreeNode" scheme="https://egbert-yu-ting.github.io/tags/TreeNode/"/>
    
  </entry>
  
  <entry>
    <title>Shared partition between Mac OS X and Windows 10 [Save time]</title>
    <link href="https://egbert-yu-ting.github.io/posts/4755908e/"/>
    <id>https://egbert-yu-ting.github.io/posts/4755908e/</id>
    <published>2021-01-07T03:15:05.000Z</published>
    <updated>2021-01-12T01:53:03.165Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Bootcamp-File-sharing-between-Mac-OS-X-and-Windows-10-on-MacBook-Pro&quot;&gt;&lt;a href=&quot;#Bootcamp-File-sharing-between-Mac-OS-X-and-Windows-10-on-MacBook-Pro&quot; class=&quot;headerlink&quot; title=&quot;Bootcamp: File sharing between Mac OS X and Windows 10 on MacBook Pro&quot;&gt;&lt;/a&gt;&lt;center&gt;Bootcamp: File sharing between Mac OS X and Windows 10 on MacBook Pro&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;Here are some reason you should consider deploying Windows on your Mac device.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;More games with better performance in Windows OS.&lt;/li&gt;
&lt;li&gt;Some Applications don’t work in macOS or not support all functions.&lt;/li&gt;
&lt;li&gt;Developers need to test projects in Windows OS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I shared my experience to save your time of installing Windows on MacBook Pro.&lt;/p&gt;</summary>
    
    
    
    <category term="Instruction" scheme="https://egbert-yu-ting.github.io/categories/Instruction/"/>
    
    
    <category term="MacOS_X" scheme="https://egbert-yu-ting.github.io/tags/MacOS-X/"/>
    
    <category term="Windows10" scheme="https://egbert-yu-ting.github.io/tags/Windows10/"/>
    
    <category term="Bootcamp" scheme="https://egbert-yu-ting.github.io/tags/Bootcamp/"/>
    
  </entry>
  
  <entry>
    <title>[One-time success] How to install Ryu on Ubuntu - Tutorial</title>
    <link href="https://egbert-yu-ting.github.io/posts/9e0f4e5/"/>
    <id>https://egbert-yu-ting.github.io/posts/9e0f4e5/</id>
    <published>2021-01-06T06:14:43.000Z</published>
    <updated>2021-01-12T01:51:33.474Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Tutorial-Install-ryu-in-Ubuntu-16-04-with-no-failure&quot;&gt;&lt;a href=&quot;#Tutorial-Install-ryu-in-Ubuntu-16-04-with-no-failure&quot; class=&quot;headerlink&quot; title=&quot;Tutorial - Install ryu in Ubuntu 16.04 with no failure&quot;&gt;&lt;/a&gt;&lt;center&gt;Tutorial - Install ryu in Ubuntu 16.04 with no failure&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ryu.readthedocs.io/en/latest/index.html&quot;&gt;Ryu&lt;/a&gt; is a component-based software defined networking framework. It’s very easy to develop your own SDN controller. And, if you have any questions, there are rich source on the internet.&lt;/p&gt;</summary>
    
    
    
    <category term="Simulator" scheme="https://egbert-yu-ting.github.io/categories/simulator/"/>
    
    
    <category term="Ubuntu" scheme="https://egbert-yu-ting.github.io/tags/Ubuntu/"/>
    
    <category term="SDN" scheme="https://egbert-yu-ting.github.io/tags/SDN/"/>
    
    <category term="Controller" scheme="https://egbert-yu-ting.github.io/tags/Controller/"/>
    
  </entry>
  
  <entry>
    <title>[Quick and Easy] Installation of ns-3 Simulator with OpenFlow 1.3 - Tutorial</title>
    <link href="https://egbert-yu-ting.github.io/posts/8ece0fb0/"/>
    <id>https://egbert-yu-ting.github.io/posts/8ece0fb0/</id>
    <published>2021-01-05T12:57:13.000Z</published>
    <updated>2021-01-12T01:49:59.976Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;ns-3-configuration-and-ofswitch13-module-Tutorial&quot;&gt;&lt;a href=&quot;#ns-3-configuration-and-ofswitch13-module-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;ns-3 configuration and ofswitch13 module - Tutorial&quot;&gt;&lt;/a&gt;&lt;center&gt;ns-3 configuration and ofswitch13 module - Tutorial&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;I had deployed the ns-3 simulation with ofswitch13 successfully. I’ve been struggling to solve the simulation platform a lot of time. So, my experience is quite valuable and self-giving sharing for the ns-3 beginners.&lt;br&gt;The following procedure can be deployed on VMware/Virtual machine or cloud instance.&lt;br&gt;If your want to know how to deploy ns-3 on remote cloud instance easily, I will post an article to demonstrate full steps.&lt;/p&gt;</summary>
    
    
    
    <category term="Simulator" scheme="https://egbert-yu-ting.github.io/categories/simulator/"/>
    
    
    <category term="SDN" scheme="https://egbert-yu-ting.github.io/tags/SDN/"/>
    
    <category term="Simulation" scheme="https://egbert-yu-ting.github.io/tags/Simulation/"/>
    
    <category term="ns-3" scheme="https://egbert-yu-ting.github.io/tags/ns-3/"/>
    
    <category term="ofswitch" scheme="https://egbert-yu-ting.github.io/tags/ofswitch/"/>
    
    <category term="OpenFlow1.3" scheme="https://egbert-yu-ting.github.io/tags/OpenFlow1-3/"/>
    
  </entry>
  
  <entry>
    <title>[Step by Step] How to install Google Chrome on Ubuntu 16.04</title>
    <link href="https://egbert-yu-ting.github.io/posts/65af7d45/"/>
    <id>https://egbert-yu-ting.github.io/posts/65af7d45/</id>
    <published>2021-01-05T11:33:27.000Z</published>
    <updated>2021-01-12T01:52:54.118Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Tutorial-Google-Chrome-Web-Browser-in-Ubuntu&quot;&gt;&lt;a href=&quot;#Tutorial-Google-Chrome-Web-Browser-in-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Tutorial - Google Chrome Web Browser in Ubuntu&quot;&gt;&lt;/a&gt;&lt;center&gt;Tutorial - Google Chrome Web Browser in Ubuntu&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;If you are working on the Ubuntu environment and not used to using FireFox browser, Google Chrome maybe is your first choice.&lt;br&gt;Here, I shared my experience of installing Google Chrome on Ubuntu 16.04. You can implement it rapidly and easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Download the Google Chrome to your Ubuntu system&lt;/p&gt;
&lt;p style=&quot;background-color:#F0F0F0&quot;&gt;$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&lt;/p&gt;</summary>
    
    
    
    <category term="Instruction" scheme="https://egbert-yu-ting.github.io/categories/Instruction/"/>
    
    
    <category term="Ubuntu" scheme="https://egbert-yu-ting.github.io/tags/Ubuntu/"/>
    
    <category term="Google_Chrome" scheme="https://egbert-yu-ting.github.io/tags/Google-Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Interview programming question - Find second largest element</title>
    <link href="https://egbert-yu-ting.github.io/posts/16153cc7/"/>
    <id>https://egbert-yu-ting.github.io/posts/16153cc7/</id>
    <published>2021-01-05T05:52:46.000Z</published>
    <updated>2021-01-12T01:47:24.519Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Let-coding-interview-become-easy-Find-second-largest-element&quot;&gt;&lt;a href=&quot;#Let-coding-interview-become-easy-Find-second-largest-element&quot; class=&quot;headerlink&quot; title=&quot;Let coding interview become easy - Find second largest element&quot;&gt;&lt;/a&gt;&lt;center&gt;Let coding interview become easy - Find second largest element&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;Maybe you will face it problem when you have an interview for a job with Tech. company.&lt;br&gt;The problem is “How to find second largest element?”, it seems very easy to get result, but you must propose an efficient approach.&lt;/p&gt;</summary>
    
    
    
    <category term="CodeInterview" scheme="https://egbert-yu-ting.github.io/categories/codeinterview/"/>
    
    
    <category term="Pair" scheme="https://egbert-yu-ting.github.io/tags/Pair/"/>
    
    <category term="INT_MIN" scheme="https://egbert-yu-ting.github.io/tags/INT-MIN/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Binary Tree Level Order Traversal II</title>
    <link href="https://egbert-yu-ting.github.io/posts/cac8b982/"/>
    <id>https://egbert-yu-ting.github.io/posts/cac8b982/</id>
    <published>2020-12-30T00:38:38.000Z</published>
    <updated>2021-01-12T01:45:28.431Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;107-Binary-Tree-Level-Order-Traversal-II&quot;&gt;&lt;a href=&quot;#107-Binary-Tree-Level-Order-Traversal-II&quot; class=&quot;headerlink&quot; title=&quot;107. Binary Tree Level Order Traversal II&quot;&gt;&lt;/a&gt;&lt;center&gt;107. Binary Tree Level Order Traversal II&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a binary tree, return the &lt;em&gt;bottom-up level order&lt;/em&gt; traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="STL" scheme="https://egbert-yu-ting.github.io/tags/STL/"/>
    
    <category term="2D_Vector" scheme="https://egbert-yu-ting.github.io/tags/2D-Vector/"/>
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Maximum Depth of Binary Tree</title>
    <link href="https://egbert-yu-ting.github.io/posts/57b52472/"/>
    <id>https://egbert-yu-ting.github.io/posts/57b52472/</id>
    <published>2020-12-25T01:32:23.000Z</published>
    <updated>2021-01-12T01:49:16.036Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;104-Maximum-Depth-of-Binary-Tree&quot;&gt;&lt;a href=&quot;#104-Maximum-Depth-of-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;104. Maximum Depth of Binary Tree&quot;&gt;&lt;/a&gt;&lt;center&gt;104. Maximum Depth of Binary Tree&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;root&lt;/font&gt;&lt;/span&gt; of a binary tree, return &lt;em&gt;its maximum depth&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A binary tree’s &lt;strong&gt;maximum depth&lt;/strong&gt; is the number of nodes along the longest path from the root node down to the farthest leaf node.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
    <category term="Tree" scheme="https://egbert-yu-ting.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Symmetric Tree</title>
    <link href="https://egbert-yu-ting.github.io/posts/d1f23ab6/"/>
    <id>https://egbert-yu-ting.github.io/posts/d1f23ab6/</id>
    <published>2020-12-24T00:40:10.000Z</published>
    <updated>2021-01-12T01:51:48.229Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;101-Symmetric-Tree&quot;&gt;&lt;a href=&quot;#101-Symmetric-Tree&quot; class=&quot;headerlink&quot; title=&quot;101. Symmetric Tree&quot;&gt;&lt;/a&gt;&lt;center&gt;101. Symmetric Tree&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
    <category term="Tree" scheme="https://egbert-yu-ting.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Same Tree</title>
    <link href="https://egbert-yu-ting.github.io/posts/2ef96137/"/>
    <id>https://egbert-yu-ting.github.io/posts/2ef96137/</id>
    <published>2020-12-23T01:14:29.000Z</published>
    <updated>2021-01-12T01:51:39.220Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;100-Same-Tree&quot;&gt;&lt;a href=&quot;#100-Same-Tree&quot; class=&quot;headerlink&quot; title=&quot;100. Same Tree&quot;&gt;&lt;/a&gt;&lt;center&gt;100. Same Tree&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given the roots of two binary trees &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;p&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;q&lt;/font&gt;&lt;/span&gt;, write a function to check if they are the same or not.&lt;/p&gt;
&lt;p&gt;Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
    <category term="Tree" scheme="https://egbert-yu-ting.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Merge Sorted Array</title>
    <link href="https://egbert-yu-ting.github.io/posts/1cc4a24a/"/>
    <id>https://egbert-yu-ting.github.io/posts/1cc4a24a/</id>
    <published>2020-12-22T06:39:08.000Z</published>
    <updated>2021-01-12T01:49:30.773Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;88-Merge-Sorted-Array&quot;&gt;&lt;a href=&quot;#88-Merge-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;88. Merge Sorted Array&quot;&gt;&lt;/a&gt;&lt;center&gt;88. Merge Sorted Array&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given two sorted integer arrays &lt;em&gt;nums1&lt;/em&gt; and &lt;em&gt;nums2&lt;/em&gt;, merge &lt;em&gt;nums2&lt;/em&gt; into &lt;em&gt;nums1&lt;/em&gt; as one sorted array.&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of elements initialized in nums1 and nums2 are m and n respectively.&lt;/li&gt;
&lt;li&gt;You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Vector" scheme="https://egbert-yu-ting.github.io/tags/Vector/"/>
    
    <category term="Call_by_reference" scheme="https://egbert-yu-ting.github.io/tags/Call-by-reference/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted List</title>
    <link href="https://egbert-yu-ting.github.io/posts/66cc46ab/"/>
    <id>https://egbert-yu-ting.github.io/posts/66cc46ab/</id>
    <published>2020-12-22T00:31:02.000Z</published>
    <updated>2021-01-12T01:50:45.711Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;83-Remove-Duplicates-from-Sorted-List&quot;&gt;&lt;a href=&quot;#83-Remove-Duplicates-from-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;83. Remove Duplicates from Sorted List&quot;&gt;&lt;/a&gt;&lt;center&gt;83. Remove Duplicates from Sorted List&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a sorted linked list, delete all duplicates such that each element appear only once.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Climbing Stairs</title>
    <link href="https://egbert-yu-ting.github.io/posts/7af6a106/"/>
    <id>https://egbert-yu-ting.github.io/posts/7af6a106/</id>
    <published>2020-12-17T08:12:36.000Z</published>
    <updated>2021-01-12T01:45:35.640Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;70-Climbing-Stairs&quot;&gt;&lt;a href=&quot;#70-Climbing-Stairs&quot; class=&quot;headerlink&quot; title=&quot;70. Climbing Stairs&quot;&gt;&lt;/a&gt;&lt;center&gt;70. Climbing Stairs&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;You are climbing a staircase. It takes &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;/font&gt;&lt;/span&gt; steps to reach the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;1&lt;/font&gt;&lt;/span&gt; or &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;2&lt;/font&gt;&lt;/span&gt; steps. In how many distinct ways can you climb to the top?&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
    <category term="Fibonacci_Sequence" scheme="https://egbert-yu-ting.github.io/tags/Fibonacci-Sequence/"/>
    
    <category term="Iterator" scheme="https://egbert-yu-ting.github.io/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Sqrt(x)</title>
    <link href="https://egbert-yu-ting.github.io/posts/72b31d68/"/>
    <id>https://egbert-yu-ting.github.io/posts/72b31d68/</id>
    <published>2020-12-17T00:56:30.000Z</published>
    <updated>2021-01-12T01:51:45.279Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;69-Sqrt-x&quot;&gt;&lt;a href=&quot;#69-Sqrt-x&quot; class=&quot;headerlink&quot; title=&quot;69. Sqrt(x)&quot;&gt;&lt;/a&gt;&lt;center&gt;69. Sqrt(x)&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a non-negative integer &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;x&lt;/font&gt;&lt;/span&gt;, compute and return &lt;em&gt;the square root of&lt;/em&gt; &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;x&lt;/font&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since the return type is an integer, the decimal digits are &lt;b&gt;truncated&lt;/b&gt;, and only &lt;b&gt;the integer part&lt;/b&gt; of the result is returned.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Binary_search" scheme="https://egbert-yu-ting.github.io/tags/Binary-search/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Add Binary</title>
    <link href="https://egbert-yu-ting.github.io/posts/e6133085/"/>
    <id>https://egbert-yu-ting.github.io/posts/e6133085/</id>
    <published>2020-12-16T02:22:19.000Z</published>
    <updated>2021-01-12T01:45:23.378Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;67-Add-Binary&quot;&gt;&lt;a href=&quot;#67-Add-Binary&quot; class=&quot;headerlink&quot; title=&quot;67. Add Binary&quot;&gt;&lt;/a&gt;&lt;center&gt;67. Add Binary&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given two binary strings &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;a&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;b&lt;/font&gt;&lt;/span&gt;, return &lt;em&gt;their sum as a binary string&lt;/em&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Logical_Operators" scheme="https://egbert-yu-ting.github.io/tags/Logical-Operators/"/>
    
    <category term="Shift_Operators" scheme="https://egbert-yu-ting.github.io/tags/Shift-Operators/"/>
    
    <category term="ASCII" scheme="https://egbert-yu-ting.github.io/tags/ASCII/"/>
    
    <category term="Reverse_iterator" scheme="https://egbert-yu-ting.github.io/tags/Reverse-iterator/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Plus One</title>
    <link href="https://egbert-yu-ting.github.io/posts/acf6f11e/"/>
    <id>https://egbert-yu-ting.github.io/posts/acf6f11e/</id>
    <published>2020-12-15T01:22:46.000Z</published>
    <updated>2021-01-12T01:50:24.659Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;66-Plus-One&quot;&gt;&lt;a href=&quot;#66-Plus-One&quot; class=&quot;headerlink&quot; title=&quot;66. Plus One&quot;&gt;&lt;/a&gt;&lt;center&gt;66. Plus One&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of decimal digits representing a non-negative integer, increment one to the integer.&lt;/p&gt;
&lt;p&gt;The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.&lt;/p&gt;
&lt;p&gt;You may assume the integer does not contain any leading zero, except the number 0 itself.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Vector" scheme="https://egbert-yu-ting.github.io/tags/Vector/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Maximum Subarray</title>
    <link href="https://egbert-yu-ting.github.io/posts/90ac56be/"/>
    <id>https://egbert-yu-ting.github.io/posts/90ac56be/</id>
    <published>2020-12-14T03:34:06.000Z</published>
    <updated>2021-01-12T01:49:22.702Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;53-Maximum-Subarray&quot;&gt;&lt;a href=&quot;#53-Maximum-Subarray&quot; class=&quot;headerlink&quot; title=&quot;53. Maximum Subarray&quot;&gt;&lt;/a&gt;&lt;center&gt;53. Maximum Subarray&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given an integer array &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt;, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; If you have figured out the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;O(n)&lt;/font&gt;&lt;/span&gt; solution, try coding another solution using the &lt;strong&gt;divide and conquer&lt;/strong&gt; approach, which is more subtle.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Vector" scheme="https://egbert-yu-ting.github.io/tags/Vector/"/>
    
  </entry>
  
  <entry>
    <title>Run Visual Studio Code on macOS Tutorial</title>
    <link href="https://egbert-yu-ting.github.io/posts/a7083339/"/>
    <id>https://egbert-yu-ting.github.io/posts/a7083339/</id>
    <published>2020-12-11T00:55:52.000Z</published>
    <updated>2021-01-12T01:52:22.734Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Visual-Studio-Code-installation-and-run-it-from-Terminal-on-macOS&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code-installation-and-run-it-from-Terminal-on-macOS&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code installation and run it from Terminal on macOS&quot;&gt;&lt;/a&gt;&lt;center&gt;Visual Studio Code installation and run it from Terminal on macOS&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; is a free source-code editor made by Microsoft for Windows, Linux and macOS.&lt;br&gt;Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.&lt;/p&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs?dv=osx&quot;&gt;Download Visual Studio Code&lt;/a&gt; for macOS directly.</summary>
    
    
    
    <category term="Instruction" scheme="https://egbert-yu-ting.github.io/categories/Instruction/"/>
    
    
    <category term="Editor" scheme="https://egbert-yu-ting.github.io/tags/Editor/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Count and Say</title>
    <link href="https://egbert-yu-ting.github.io/posts/e0d9ee0a/"/>
    <id>https://egbert-yu-ting.github.io/posts/e0d9ee0a/</id>
    <published>2020-12-10T07:06:04.000Z</published>
    <updated>2021-01-12T01:45:45.730Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;38-Count-and-Say&quot;&gt;&lt;a href=&quot;#38-Count-and-Say&quot; class=&quot;headerlink&quot; title=&quot;38. Count and Say&quot;&gt;&lt;/a&gt;&lt;center&gt;38. Count and Say&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;count-and-say&lt;/strong&gt; sequence is a sequence of digit strings defined by the recursive formula:&lt;br&gt;&lt;strong&gt;&lt;li&gt;&lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;countAndSay(1) = “1”&lt;/font&gt;&lt;/span&gt;&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;li&gt;&lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;countAndSay(n)&lt;/font&gt;&lt;/span&gt; is the way you would “say” the digit string from &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;countAndSay(n-1)&lt;/font&gt;&lt;/span&gt;, which is then converted into a different digit string.&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;To determine how you “say” a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="String" scheme="https://egbert-yu-ting.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Search Insert Position</title>
    <link href="https://egbert-yu-ting.github.io/posts/41fdcb04/"/>
    <id>https://egbert-yu-ting.github.io/posts/41fdcb04/</id>
    <published>2020-12-10T02:45:08.000Z</published>
    <updated>2021-01-12T01:51:42.457Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;35-Search-Insert-Position&quot;&gt;&lt;a href=&quot;#35-Search-Insert-Position&quot; class=&quot;headerlink&quot; title=&quot;35. Search Insert Position&quot;&gt;&lt;/a&gt;&lt;center&gt;35. Search Insert Position&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h2&gt;&lt;p&gt;Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="search" scheme="https://egbert-yu-ting.github.io/tags/search/"/>
    
  </entry>
  
</feed>
