<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Egbert Lin&#39;s Blog</title>
  
  <subtitle>“Life is not a race, but a journey to be savoured each step of the way” by Brian Dyson</subtitle>
  <link href="https://egbert-yu-ting.github.io/atom.xml" rel="self"/>
  
  <link href="https://egbert-yu-ting.github.io/"/>
  <updated>2021-07-05T06:23:15.070Z</updated>
  <id>https://egbert-yu-ting.github.io/</id>
  
  <author>
    <name>EgbertLin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[LeetCode Road] Unique Paths - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/7cafec50/"/>
    <id>https://egbert-yu-ting.github.io/posts/7cafec50/</id>
    <published>2021-07-05T02:16:17.000Z</published>
    <updated>2021-07-05T06:23:15.070Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;62. Unique Paths&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;A robot is located at the top-left corner of a &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;m x n&lt;/font&gt;&lt;/span&gt; grid (marked &#39;Start&#39; in the diagram below).&lt;/p&gt;
&lt;p&gt;The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).&lt;/p&gt;
&lt;p&gt;How many possible unique paths are there?</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
    <category term="Unordered_map(STL)" scheme="https://egbert-yu-ting.github.io/tags/Unordered-map-STL/"/>
    
    <category term="Recursive_function" scheme="https://egbert-yu-ting.github.io/tags/Recursive-function/"/>
    
    <category term="Dynamic_programming" scheme="https://egbert-yu-ting.github.io/tags/Dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Binary Tree Inorder Traversal - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/c3ddedee/"/>
    <id>https://egbert-yu-ting.github.io/posts/c3ddedee/</id>
    <published>2021-05-14T07:22:17.000Z</published>
    <updated>2021-06-29T12:19:41.548Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;107. Binary Tree Level Order Traversal II&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the root of a binary tree, return the inorder traversal of its nodes&#39; values.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Tree" scheme="https://egbert-yu-ting.github.io/tags/Tree/"/>
    
    <category term="Recursion" scheme="https://egbert-yu-ting.github.io/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Remove Duplicates from Sorted List II - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/9803d5a6/"/>
    <id>https://egbert-yu-ting.github.io/posts/9803d5a6/</id>
    <published>2021-05-13T08:24:25.000Z</published>
    <updated>2021-05-13T09:25:35.183Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;82. Remove Duplicates from Sorted List II&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;head&lt;/font&gt;&lt;/span&gt; of a sorted linked list, &lt;I&gt;delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.&lt;/I&gt; Return the linked list sorted as well.</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>Classic C/C++ program - You must to understand</title>
    <link href="https://egbert-yu-ting.github.io/posts/34845636/"/>
    <id>https://egbert-yu-ting.github.io/posts/34845636/</id>
    <published>2021-05-05T06:31:50.000Z</published>
    <updated>2021-07-05T07:00:45.342Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6&quot;&gt;&lt;b&gt;Classic and Basic C/C++ Question&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;There are four classical question abount C/C++ interview.</summary>
    
    
    
    <category term="CodeInterview" scheme="https://egbert-yu-ting.github.io/categories/codeinterview/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Lowest Common Ancestor of a Binary Search Tree - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/e96b392c/"/>
    <id>https://egbert-yu-ting.github.io/posts/e96b392c/</id>
    <published>2021-04-29T08:03:20.000Z</published>
    <updated>2021-04-30T09:08:43.590Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;235. Lowest Common Ancestor of a Binary Search Tree&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;According to the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;definition of LCA on Wikipedia&lt;/font&gt;&lt;/span&gt;: “The lowest common ancestor is defined between two nodes &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;p&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;q&lt;/font&gt;&lt;/span&gt; as the lowest node in &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;T&lt;/font&gt;&lt;/span&gt; that has both &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;p&lt;/font&gt;&lt;/span&gt; and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;q&lt;/font&gt;&lt;/span&gt; as descendants (where we allow &lt;b&gt;a node to be a descendant of itself&lt;/b&gt;).”</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="BST" scheme="https://egbert-yu-ting.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Palindrome LInked List - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/6737deee/"/>
    <id>https://egbert-yu-ting.github.io/posts/6737deee/</id>
    <published>2021-04-29T03:44:55.000Z</published>
    <updated>2021-04-29T06:24:19.280Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;234. Palindrome Linked List&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;head&lt;/font&gt;&lt;/span&gt; of a singly linked list, return &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;true&lt;/font&gt;&lt;/span&gt; if it is a palindrome.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road]Implement Queue using Stacks - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/fb82e5ef/"/>
    <id>https://egbert-yu-ting.github.io/posts/fb82e5ef/</id>
    <published>2021-04-28T03:54:42.000Z</published>
    <updated>2021-04-29T03:40:36.971Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;225. Implement Queue using Stacks&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (&lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;push&lt;/font&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;peek&lt;/font&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;pop&lt;/font&gt;&lt;/span&gt;, and &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;empty&lt;/font&gt;&lt;span&gt;).</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Stack" scheme="https://egbert-yu-ting.github.io/tags/Stack/"/>
    
    <category term="Queue" scheme="https://egbert-yu-ting.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Power of Two - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/fb3c78ed/"/>
    <id>https://egbert-yu-ting.github.io/posts/fb3c78ed/</id>
    <published>2021-04-27T08:17:27.000Z</published>
    <updated>2021-05-13T09:09:36.243Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;231. Power of Two&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an integer &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;/font&gt;&lt;/span&gt;, return &lt;I&gt;&lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;true&lt;/font&gt;&lt;/span&gt; if it is a power of two. Otherwise, return &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;false&lt;/font&gt;&lt;/span&gt;&lt;/I&gt;.&lt;/p&gt;
&lt;p&gt;An integer &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n&lt;/font&gt;&lt;/span&gt; is a power of two, if there exists an integer &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;x&lt;/font&gt;&lt;/span&gt; such that &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n == 2&lt;sup&gt;x&lt;/sup&gt;&lt;/font&gt;&lt;/span&gt;.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Logical_Operators" scheme="https://egbert-yu-ting.github.io/tags/Logical-Operators/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Summary Ranges - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/415df519/"/>
    <id>https://egbert-yu-ting.github.io/posts/415df519/</id>
    <published>2021-04-26T09:05:56.000Z</published>
    <updated>2021-04-27T09:04:21.410Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;228. Summary Ranges&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;You are given a &lt;b&gt;sorted unique&lt;/b&gt; integer array &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Return the &lt;I&gt;&lt;b&gt;smallest&lt;/b&gt; sorted list of ranges that &lt;b&gt;cover all the numbers in the array exactly&lt;/b&gt;&lt;/I&gt;. That is, each element of &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt; is covered by exactly one of the ranges, and there is no integer &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;x&lt;/font&gt;&lt;/span&gt; such that &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;x&lt;/font&gt;&lt;/span&gt; is in one of the ranges but not in &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt;.</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Invert Binary Tree - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/9c6c52ab/"/>
    <id>https://egbert-yu-ting.github.io/posts/9c6c52ab/</id>
    <published>2021-04-26T07:11:43.000Z</published>
    <updated>2021-04-29T06:31:47.970Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;226. Invert Binary Tree&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given the &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;root&lt;/font&gt;&lt;/span&gt; of a binary tree, invert the tree, and return &lt;I&gt;its root&lt;/I&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;
&lt;img src=&quot;example1.png&quot; /&gt;
&lt;p style=&quot;background-color:#F0F0F0&quot;&gt;
&lt;b&gt;Input:&lt;/b&gt; root = [4,2,7,1,3,6,9]&lt;br&gt; &lt;b&gt;Output:&lt;/b&gt; [4,7,2,9,6,3,1]
&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode-Easy" scheme="https://egbert-yu-ting.github.io/categories/leetcode-easy/"/>
    
    
    <category term="Tree" scheme="https://egbert-yu-ting.github.io/tags/Tree/"/>
    
    <category term="Stack" scheme="https://egbert-yu-ting.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - HeapSort</title>
    <link href="https://egbert-yu-ting.github.io/posts/73b8e6ad/"/>
    <id>https://egbert-yu-ting.github.io/posts/73b8e6ad/</id>
    <published>2021-04-22T08:43:47.000Z</published>
    <updated>2021-04-26T03:50:01.798Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Heap Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Heap is a complete binary tree. And, heap feature is that parent node must bigger than its child nodes. It also calls max-heap.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Merge Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/ef61bad1/"/>
    <id>https://egbert-yu-ting.github.io/posts/ef61bad1/</id>
    <published>2021-04-22T03:08:58.000Z</published>
    <updated>2021-04-26T03:50:06.634Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Merge Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;It is a Divide and Conquer problem. Divide the vector into small group to sort, and merge each small groups to the vector.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Quick Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/91a7f1d8/"/>
    <id>https://egbert-yu-ting.github.io/posts/91a7f1d8/</id>
    <published>2021-04-21T08:40:53.000Z</published>
    <updated>2021-04-26T03:47:55.214Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Quick Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Take one element as the pivot to separate two parts from another elements. For the convenient, we always takes the last element as the pivot.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Bubble Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/2b353b50/"/>
    <id>https://egbert-yu-ting.github.io/posts/2b353b50/</id>
    <published>2021-04-21T06:13:46.000Z</published>
    <updated>2021-04-26T03:45:10.105Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Bubble Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Compare with each elements in the range &lt;code&gt;[0: n]&lt;/code&gt; and if &lt;code&gt;vector[i]&lt;/code&gt; is bigger than &lt;code&gt;vector[i + 1]&lt;/code&gt;, call swap().&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures - Insertion Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/918ef68a/"/>
    <id>https://egbert-yu-ting.github.io/posts/918ef68a/</id>
    <published>2021-04-21T01:08:35.000Z</published>
    <updated>2021-04-21T06:47:05.689Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Insertion Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Need to use two for-loop. One is unsorted data in the range &lt;code&gt;[i:n]&lt;/code&gt; and the other is sorted data in the range &lt;code&gt;[0:i]&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Take one element from unsorted data to compare with sorted data.&lt;br&gt; &lt;b&gt;Step 1:&lt;/b&gt; use &lt;code&gt;temp&lt;/code&gt; variable to store this element&lt;br&gt; &lt;b&gt;Step 2:&lt;/b&gt; search value from sorted data which is bigger than &lt;code&gt;temp&lt;/code&gt; , if true, move the bigger value to current position &lt;code&gt;vector[j] = vector[j - 1]&lt;/code&gt;&lt;br&gt; &lt;b&gt;Step 3:&lt;/b&gt; Until if-statement returns false, it means the value of &lt;code&gt;j - 1&lt;/code&gt; is smaller than &lt;code&gt;temp&lt;/code&gt;, so insert &lt;code&gt;temp&lt;/code&gt; to current position &lt;code&gt;vector[j] = temp&lt;/code&gt;.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Merge k Sorted Lists - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/23a6e02/"/>
    <id>https://egbert-yu-ting.github.io/posts/23a6e02/</id>
    <published>2021-04-13T03:39:31.000Z</published>
    <updated>2021-04-20T06:06:25.830Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;23. Merge k Sorted Lists&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;You are given an array of &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;k&lt;/font&gt;&lt;/span&gt; linked-lists &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;lists&lt;/font&gt;&lt;/span&gt;, each linked-list is sorted in ascending order.&lt;br&gt; Merge all the linked-lists into one sorted linked-list and return it.</summary>
    
    
    
    <category term="LeetCode-Hard" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Hard/"/>
    
    
    <category term="ListNode" scheme="https://egbert-yu-ting.github.io/tags/ListNode/"/>
    
  </entry>
  
  <entry>
    <title>How arrays are passed to functions in C/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/47c634b1/"/>
    <id>https://egbert-yu-ting.github.io/posts/47c634b1/</id>
    <published>2021-04-11T09:55:01.000Z</published>
    <updated>2021-04-21T01:03:51.095Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;How arrays are passed to function | Basic and Important&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;</summary>
    
    
    
    <category term="C/C++_Concept" scheme="https://egbert-yu-ting.github.io/categories/C-C-Concept/"/>
    
    
  </entry>
  
  <entry>
    <title>Let&#39;s understand the Backtracking algorithm</title>
    <link href="https://egbert-yu-ting.github.io/posts/eabab51c/"/>
    <id>https://egbert-yu-ting.github.io/posts/eabab51c/</id>
    <published>2021-04-11T09:30:10.000Z</published>
    <updated>2021-04-21T01:05:26.284Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Backtracking algorithm&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;</summary>
    
    
    
    <category term="Tree_SearchAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/Tree-SearchAlgorithm/"/>
    
    
    <category term="Backtracking" scheme="https://egbert-yu-ting.github.io/tags/Backtracking/"/>
    
    <category term="Algorithm" scheme="https://egbert-yu-ting.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode Road] Find the Duplicate Number - Solution/C++</title>
    <link href="https://egbert-yu-ting.github.io/posts/36325234/"/>
    <id>https://egbert-yu-ting.github.io/posts/36325234/</id>
    <published>2021-03-25T02:03:36.000Z</published>
    <updated>2021-04-20T06:25:57.838Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;287. Find the Duplicate Number&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;question&quot;&gt;Question:&lt;/h2&gt;
&lt;p&gt;Given an array of integers &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt; containing &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;n + 1&lt;/font&gt;&lt;/span&gt; integers where each integer is in the range &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;[1, n]&lt;/font&gt;&lt;/span&gt; inclusive.&lt;/p&gt;
&lt;p&gt;There is only &lt;b&gt;one repeated number&lt;/b&gt; in &lt;span style=&quot;background-color:#F0F0F0&quot;&gt;&lt;font color=#808080&gt;nums&lt;/font&gt;&lt;/span&gt;, return &lt;/u&gt;this repeated number&lt;/u&gt;.</summary>
    
    
    
    <category term="LeetCode-Medium" scheme="https://egbert-yu-ting.github.io/categories/LeetCode-Medium/"/>
    
    
  </entry>
  
  <entry>
    <title>Data Structures - Selection Sort</title>
    <link href="https://egbert-yu-ting.github.io/posts/74223785/"/>
    <id>https://egbert-yu-ting.github.io/posts/74223785/</id>
    <published>2021-03-24T02:57:42.000Z</published>
    <updated>2021-04-26T03:44:56.394Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
&lt;font size=&quot;6px&quot;&gt;&lt;b&gt;Basic programming - Selection Sort&lt;/b&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;h2 id=&quot;approach&quot;&gt;Approach:&lt;/h2&gt;
&lt;p&gt;Declare two variables, &lt;code&gt;i&lt;/code&gt; likes the end pointer of sorted vector and &lt;code&gt;j&lt;/code&gt; likes the scanning pointer.&lt;br&gt;</summary>
    
    
    
    <category term="SortAlgorithm" scheme="https://egbert-yu-ting.github.io/categories/SortAlgorithm/"/>
    
    
    <category term="Sorting" scheme="https://egbert-yu-ting.github.io/tags/Sorting/"/>
    
  </entry>
  
</feed>
